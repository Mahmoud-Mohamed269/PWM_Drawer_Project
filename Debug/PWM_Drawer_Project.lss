
PWM_Drawer_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  000032dc  00003370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  0080019c  0080019c  000034ac  2**0
                  ALLOC
  3 .stab         0000264c  00000000  00000000  000034ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000174e  00000000  00000000  00005af8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__vector_1>
       8:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__vector_2>
       c:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3c       	cpi	r26, 0xC5	; 197
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 78 18 	call	0x30f0	; 0x30f0 <main>
      8a:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e7       	ldi	r22, 0x73	; 115
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4d 19 	jmp	0x329a	; 0x329a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 58       	subi	r30, 0x85	; 133
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <itoa>:
     e2e:	fb 01       	movw	r30, r22
     e30:	9f 01       	movw	r18, r30
     e32:	e8 94       	clt
     e34:	42 30       	cpi	r20, 0x02	; 2
     e36:	c4 f0       	brlt	.+48     	; 0xe68 <itoa+0x3a>
     e38:	45 32       	cpi	r20, 0x25	; 37
     e3a:	b4 f4       	brge	.+44     	; 0xe68 <itoa+0x3a>
     e3c:	4a 30       	cpi	r20, 0x0A	; 10
     e3e:	29 f4       	brne	.+10     	; 0xe4a <itoa+0x1c>
     e40:	97 fb       	bst	r25, 7
     e42:	1e f4       	brtc	.+6      	; 0xe4a <itoa+0x1c>
     e44:	90 95       	com	r25
     e46:	81 95       	neg	r24
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	64 2f       	mov	r22, r20
     e4c:	77 27       	eor	r23, r23
     e4e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__udivmodhi4>
     e52:	80 5d       	subi	r24, 0xD0	; 208
     e54:	8a 33       	cpi	r24, 0x3A	; 58
     e56:	0c f0       	brlt	.+2      	; 0xe5a <itoa+0x2c>
     e58:	89 5d       	subi	r24, 0xD9	; 217
     e5a:	81 93       	st	Z+, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	a1 f7       	brne	.-24     	; 0xe4a <itoa+0x1c>
     e62:	16 f4       	brtc	.+4      	; 0xe68 <itoa+0x3a>
     e64:	5d e2       	ldi	r21, 0x2D	; 45
     e66:	51 93       	st	Z+, r21
     e68:	10 82       	st	Z, r1
     e6a:	c9 01       	movw	r24, r18
     e6c:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <strrev>

00000e70 <ltoa>:
     e70:	fa 01       	movw	r30, r20
     e72:	cf 93       	push	r28
     e74:	ff 93       	push	r31
     e76:	ef 93       	push	r30
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	44 f1       	brlt	.+80     	; 0xecc <ltoa+0x5c>
     e7c:	25 32       	cpi	r18, 0x25	; 37
     e7e:	34 f5       	brge	.+76     	; 0xecc <ltoa+0x5c>
     e80:	c2 2f       	mov	r28, r18
     e82:	e8 94       	clt
     e84:	ca 30       	cpi	r28, 0x0A	; 10
     e86:	49 f4       	brne	.+18     	; 0xe9a <ltoa+0x2a>
     e88:	97 fb       	bst	r25, 7
     e8a:	3e f4       	brtc	.+14     	; 0xe9a <ltoa+0x2a>
     e8c:	90 95       	com	r25
     e8e:	80 95       	com	r24
     e90:	70 95       	com	r23
     e92:	61 95       	neg	r22
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	8f 4f       	sbci	r24, 0xFF	; 255
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	2c 2f       	mov	r18, r28
     e9c:	33 27       	eor	r19, r19
     e9e:	44 27       	eor	r20, r20
     ea0:	55 27       	eor	r21, r21
     ea2:	ff 93       	push	r31
     ea4:	ef 93       	push	r30
     ea6:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__udivmodsi4>
     eaa:	ef 91       	pop	r30
     eac:	ff 91       	pop	r31
     eae:	60 5d       	subi	r22, 0xD0	; 208
     eb0:	6a 33       	cpi	r22, 0x3A	; 58
     eb2:	0c f0       	brlt	.+2      	; 0xeb6 <ltoa+0x46>
     eb4:	69 5d       	subi	r22, 0xD9	; 217
     eb6:	61 93       	st	Z+, r22
     eb8:	b9 01       	movw	r22, r18
     eba:	ca 01       	movw	r24, r20
     ebc:	60 50       	subi	r22, 0x00	; 0
     ebe:	70 40       	sbci	r23, 0x00	; 0
     ec0:	80 40       	sbci	r24, 0x00	; 0
     ec2:	90 40       	sbci	r25, 0x00	; 0
     ec4:	51 f7       	brne	.-44     	; 0xe9a <ltoa+0x2a>
     ec6:	16 f4       	brtc	.+4      	; 0xecc <ltoa+0x5c>
     ec8:	cd e2       	ldi	r28, 0x2D	; 45
     eca:	c1 93       	st	Z+, r28
     ecc:	10 82       	st	Z, r1
     ece:	8f 91       	pop	r24
     ed0:	9f 91       	pop	r25
     ed2:	cf 91       	pop	r28
     ed4:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <strrev>

00000ed8 <strrev>:
     ed8:	dc 01       	movw	r26, r24
     eda:	fc 01       	movw	r30, r24
     edc:	67 2f       	mov	r22, r23
     ede:	71 91       	ld	r23, Z+
     ee0:	77 23       	and	r23, r23
     ee2:	e1 f7       	brne	.-8      	; 0xedc <strrev+0x4>
     ee4:	32 97       	sbiw	r30, 0x02	; 2
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <strrev+0x18>
     ee8:	7c 91       	ld	r23, X
     eea:	6d 93       	st	X+, r22
     eec:	70 83       	st	Z, r23
     eee:	62 91       	ld	r22, -Z
     ef0:	ae 17       	cp	r26, r30
     ef2:	bf 07       	cpc	r27, r31
     ef4:	c8 f3       	brcs	.-14     	; 0xee8 <strrev+0x10>
     ef6:	08 95       	ret

00000ef8 <Timer1_init>:
 *
 *  Created on: Oct 15, 2021
 *      Author: Mahmoud
 */
#include "Timer1.h"
void Timer1_init() {
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
#elif TIMER1_MODE == TIMER1_PWM_FAST_9
	CLR_BIT(TCCR1A, WGM10);
	SET_BIT(TCCR1A, WGM11);
	SET_BIT(TCCR1A, WGM12);
#elif TIMER1_MODE == TIMER1_PWM_FAST_10
	SET_BIT(TCCR1A, WGM10);
     f00:	af e4       	ldi	r26, 0x4F	; 79
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ef e4       	ldi	r30, 0x4F	; 79
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	81 60       	ori	r24, 0x01	; 1
     f0c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
     f0e:	af e4       	ldi	r26, 0x4F	; 79
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ef e4       	ldi	r30, 0x4F	; 79
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	82 60       	ori	r24, 0x02	; 2
     f1a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1B1);
     f1c:	af e4       	ldi	r26, 0x4F	; 79
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ef e4       	ldi	r30, 0x4F	; 79
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 62       	ori	r24, 0x20	; 32
     f28:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
     f2a:	ae e4       	ldi	r26, 0x4E	; 78
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ee e4       	ldi	r30, 0x4E	; 78
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	88 60       	ori	r24, 0x08	; 8
     f36:	8c 93       	st	X, r24
#endif

#if TIMER1_COMPARE_OUTPUT == COM_OUT_DIS
	CLR_BIT(TCCR1A, COM1A0);
     f38:	af e4       	ldi	r26, 0x4F	; 79
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ef e4       	ldi	r30, 0x4F	; 79
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8f 7b       	andi	r24, 0xBF	; 191
     f44:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A1);
     f46:	af e4       	ldi	r26, 0x4F	; 79
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ef e4       	ldi	r30, 0x4F	; 79
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8f 77       	andi	r24, 0x7F	; 127
     f52:	8c 93       	st	X, r24
#elif TIMO_PRES == TIMO_8_PRES
	CLR_BIT(TCCR1B, 0);
	SET_BIT(TCCR1B, 1);
	CLR_BIT(TCCR1B, 2);
#elif TIMO_PRES == TIMO_64_PRES
	SET_BIT(TCCR1B, 0);
     f54:	ae e4       	ldi	r26, 0x4E	; 78
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ee e4       	ldi	r30, 0x4E	; 78
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	81 60       	ori	r24, 0x01	; 1
     f60:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, 1);
     f62:	ae e4       	ldi	r26, 0x4E	; 78
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ee e4       	ldi	r30, 0x4E	; 78
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, 2);
     f70:	ae e4       	ldi	r26, 0x4E	; 78
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ee e4       	ldi	r30, 0x4E	; 78
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8b 7f       	andi	r24, 0xFB	; 251
     f7c:	8c 93       	st	X, r24
#elif TIMO_PRES == TIMO_1024_PRES
	SET_BIT(TCCR1B, 0);
	CLR_BIT(TCCR1B, 1);
	SET_BIT(TCCR1B, 2);
#endif
}
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <Timer_PWM>:
void Timer_PWM() {
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	e8 97       	sbiw	r28, 0x38	; 56
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
	//fast PWM mode
	//64 Prescaler
	SET_BIT(TCCR1B, CS10);
     f98:	ae e4       	ldi	r26, 0x4E	; 78
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ee e4       	ldi	r30, 0x4E	; 78
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	81 60       	ori	r24, 0x01	; 1
     fa4:	8c 93       	st	X, r24
	//CTC mode is enabled
	OCR1A = 800;
     fa6:	ea e4       	ldi	r30, 0x4A	; 74
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 e2       	ldi	r24, 0x20	; 32
     fac:	93 e0       	ldi	r25, 0x03	; 3
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	80 83       	st	Z, r24
	OCR1B = 0;
     fb2:	e8 e4       	ldi	r30, 0x48	; 72
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	11 82       	std	Z+1, r1	; 0x01
     fb8:	10 82       	st	Z, r1
     fba:	7c c0       	rjmp	.+248    	; 0x10b4 <Timer_PWM+0x130>
	while (1) {
		while (OCR1B <= 1022) { //turn LED on
			OCR1B += 1;
     fbc:	a8 e4       	ldi	r26, 0x48	; 72
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e8 e4       	ldi	r30, 0x48	; 72
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	11 96       	adiw	r26, 0x01	; 1
     fcc:	9c 93       	st	X, r25
     fce:	8e 93       	st	-X, r24
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 ea       	ldi	r26, 0xA0	; 160
     fd6:	b0 e4       	ldi	r27, 0x40	; 64
     fd8:	8d ab       	std	Y+53, r24	; 0x35
     fda:	9e ab       	std	Y+54, r25	; 0x36
     fdc:	af ab       	std	Y+55, r26	; 0x37
     fde:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe0:	6d a9       	ldd	r22, Y+53	; 0x35
     fe2:	7e a9       	ldd	r23, Y+54	; 0x36
     fe4:	8f a9       	ldd	r24, Y+55	; 0x37
     fe6:	98 ad       	ldd	r25, Y+56	; 0x38
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a e7       	ldi	r20, 0x7A	; 122
     fee:	55 e4       	ldi	r21, 0x45	; 69
     ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	89 ab       	std	Y+49, r24	; 0x31
     ffa:	9a ab       	std	Y+50, r25	; 0x32
     ffc:	ab ab       	std	Y+51, r26	; 0x33
     ffe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1000:	69 a9       	ldd	r22, Y+49	; 0x31
    1002:	7a a9       	ldd	r23, Y+50	; 0x32
    1004:	8b a9       	ldd	r24, Y+51	; 0x33
    1006:	9c a9       	ldd	r25, Y+52	; 0x34
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1014:	88 23       	and	r24, r24
    1016:	2c f4       	brge	.+10     	; 0x1022 <Timer_PWM+0x9e>
		__ticks = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	98 ab       	std	Y+48, r25	; 0x30
    101e:	8f a7       	std	Y+47, r24	; 0x2f
    1020:	3f c0       	rjmp	.+126    	; 0x10a0 <Timer_PWM+0x11c>
	else if (__tmp > 65535)
    1022:	69 a9       	ldd	r22, Y+49	; 0x31
    1024:	7a a9       	ldd	r23, Y+50	; 0x32
    1026:	8b a9       	ldd	r24, Y+51	; 0x33
    1028:	9c a9       	ldd	r25, Y+52	; 0x34
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	3f ef       	ldi	r19, 0xFF	; 255
    102e:	4f e7       	ldi	r20, 0x7F	; 127
    1030:	57 e4       	ldi	r21, 0x47	; 71
    1032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1036:	18 16       	cp	r1, r24
    1038:	4c f5       	brge	.+82     	; 0x108c <Timer_PWM+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103a:	6d a9       	ldd	r22, Y+53	; 0x35
    103c:	7e a9       	ldd	r23, Y+54	; 0x36
    103e:	8f a9       	ldd	r24, Y+55	; 0x37
    1040:	98 ad       	ldd	r25, Y+56	; 0x38
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	98 ab       	std	Y+48, r25	; 0x30
    1060:	8f a7       	std	Y+47, r24	; 0x2f
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <Timer_PWM+0xfe>
    1064:	80 e9       	ldi	r24, 0x90	; 144
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	9e a7       	std	Y+46, r25	; 0x2e
    106a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    106c:	8d a5       	ldd	r24, Y+45	; 0x2d
    106e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <Timer_PWM+0xec>
    1074:	9e a7       	std	Y+46, r25	; 0x2e
    1076:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	8f a5       	ldd	r24, Y+47	; 0x2f
    107a:	98 a9       	ldd	r25, Y+48	; 0x30
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	98 ab       	std	Y+48, r25	; 0x30
    1080:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1082:	8f a5       	ldd	r24, Y+47	; 0x2f
    1084:	98 a9       	ldd	r25, Y+48	; 0x30
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	69 f7       	brne	.-38     	; 0x1064 <Timer_PWM+0xe0>
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <Timer_PWM+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108c:	69 a9       	ldd	r22, Y+49	; 0x31
    108e:	7a a9       	ldd	r23, Y+50	; 0x32
    1090:	8b a9       	ldd	r24, Y+51	; 0x33
    1092:	9c a9       	ldd	r25, Y+52	; 0x34
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	98 ab       	std	Y+48, r25	; 0x30
    109e:	8f a7       	std	Y+47, r24	; 0x2f
    10a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a2:	98 a9       	ldd	r25, Y+48	; 0x30
    10a4:	9c a7       	std	Y+44, r25	; 0x2c
    10a6:	8b a7       	std	Y+43, r24	; 0x2b
    10a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    10aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <Timer_PWM+0x128>
    10b0:	9c a7       	std	Y+44, r25	; 0x2c
    10b2:	8b a7       	std	Y+43, r24	; 0x2b
	SET_BIT(TCCR1B, CS10);
	//CTC mode is enabled
	OCR1A = 800;
	OCR1B = 0;
	while (1) {
		while (OCR1B <= 1022) { //turn LED on
    10b4:	e8 e4       	ldi	r30, 0x48	; 72
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	23 e0       	ldi	r18, 0x03	; 3
    10be:	8f 3f       	cpi	r24, 0xFF	; 255
    10c0:	92 07       	cpc	r25, r18
    10c2:	08 f4       	brcc	.+2      	; 0x10c6 <Timer_PWM+0x142>
    10c4:	7b cf       	rjmp	.-266    	; 0xfbc <Timer_PWM+0x38>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	aa e7       	ldi	r26, 0x7A	; 122
    10cc:	b4 e4       	ldi	r27, 0x44	; 68
    10ce:	8f a3       	std	Y+39, r24	; 0x27
    10d0:	98 a7       	std	Y+40, r25	; 0x28
    10d2:	a9 a7       	std	Y+41, r26	; 0x29
    10d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	6f a1       	ldd	r22, Y+39	; 0x27
    10d8:	78 a5       	ldd	r23, Y+40	; 0x28
    10da:	89 a5       	ldd	r24, Y+41	; 0x29
    10dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a e7       	ldi	r20, 0x7A	; 122
    10e4:	55 e4       	ldi	r21, 0x45	; 69
    10e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	8b a3       	std	Y+35, r24	; 0x23
    10f0:	9c a3       	std	Y+36, r25	; 0x24
    10f2:	ad a3       	std	Y+37, r26	; 0x25
    10f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10f6:	6b a1       	ldd	r22, Y+35	; 0x23
    10f8:	7c a1       	ldd	r23, Y+36	; 0x24
    10fa:	8d a1       	ldd	r24, Y+37	; 0x25
    10fc:	9e a1       	ldd	r25, Y+38	; 0x26
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    110a:	88 23       	and	r24, r24
    110c:	2c f4       	brge	.+10     	; 0x1118 <Timer_PWM+0x194>
		__ticks = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9a a3       	std	Y+34, r25	; 0x22
    1114:	89 a3       	std	Y+33, r24	; 0x21
    1116:	3f c0       	rjmp	.+126    	; 0x1196 <Timer_PWM+0x212>
	else if (__tmp > 65535)
    1118:	6b a1       	ldd	r22, Y+35	; 0x23
    111a:	7c a1       	ldd	r23, Y+36	; 0x24
    111c:	8d a1       	ldd	r24, Y+37	; 0x25
    111e:	9e a1       	ldd	r25, Y+38	; 0x26
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    112c:	18 16       	cp	r1, r24
    112e:	4c f5       	brge	.+82     	; 0x1182 <Timer_PWM+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1130:	6f a1       	ldd	r22, Y+39	; 0x27
    1132:	78 a5       	ldd	r23, Y+40	; 0x28
    1134:	89 a5       	ldd	r24, Y+41	; 0x29
    1136:	9a a5       	ldd	r25, Y+42	; 0x2a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9a a3       	std	Y+34, r25	; 0x22
    1156:	89 a3       	std	Y+33, r24	; 0x21
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <Timer_PWM+0x1f4>
    115a:	80 e9       	ldi	r24, 0x90	; 144
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	98 a3       	std	Y+32, r25	; 0x20
    1160:	8f 8f       	std	Y+31, r24	; 0x1f
    1162:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1164:	98 a1       	ldd	r25, Y+32	; 0x20
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <Timer_PWM+0x1e2>
    116a:	98 a3       	std	Y+32, r25	; 0x20
    116c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	89 a1       	ldd	r24, Y+33	; 0x21
    1170:	9a a1       	ldd	r25, Y+34	; 0x22
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9a a3       	std	Y+34, r25	; 0x22
    1176:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1178:	89 a1       	ldd	r24, Y+33	; 0x21
    117a:	9a a1       	ldd	r25, Y+34	; 0x22
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	69 f7       	brne	.-38     	; 0x115a <Timer_PWM+0x1d6>
    1180:	91 c0       	rjmp	.+290    	; 0x12a4 <Timer_PWM+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1182:	6b a1       	ldd	r22, Y+35	; 0x23
    1184:	7c a1       	ldd	r23, Y+36	; 0x24
    1186:	8d a1       	ldd	r24, Y+37	; 0x25
    1188:	9e a1       	ldd	r25, Y+38	; 0x26
    118a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9a a3       	std	Y+34, r25	; 0x22
    1194:	89 a3       	std	Y+33, r24	; 0x21
    1196:	89 a1       	ldd	r24, Y+33	; 0x21
    1198:	9a a1       	ldd	r25, Y+34	; 0x22
    119a:	9e 8f       	std	Y+30, r25	; 0x1e
    119c:	8d 8f       	std	Y+29, r24	; 0x1d
    119e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <Timer_PWM+0x21e>
    11a6:	9e 8f       	std	Y+30, r25	; 0x1e
    11a8:	8d 8f       	std	Y+29, r24	; 0x1d
    11aa:	7c c0       	rjmp	.+248    	; 0x12a4 <Timer_PWM+0x320>
			OCR1B += 1;
			_delay_ms(5);
		}
		_delay_ms(1000);
		while (OCR1B > 0) { //turn LED off
			OCR1B -= 1;
    11ac:	a8 e4       	ldi	r26, 0x48	; 72
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e8 e4       	ldi	r30, 0x48	; 72
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	11 96       	adiw	r26, 0x01	; 1
    11bc:	9c 93       	st	X, r25
    11be:	8e 93       	st	-X, r24
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a0 ea       	ldi	r26, 0xA0	; 160
    11c6:	b0 e4       	ldi	r27, 0x40	; 64
    11c8:	89 8f       	std	Y+25, r24	; 0x19
    11ca:	9a 8f       	std	Y+26, r25	; 0x1a
    11cc:	ab 8f       	std	Y+27, r26	; 0x1b
    11ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d0:	69 8d       	ldd	r22, Y+25	; 0x19
    11d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	4a e7       	ldi	r20, 0x7A	; 122
    11de:	55 e4       	ldi	r21, 0x45	; 69
    11e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	8d 8b       	std	Y+21, r24	; 0x15
    11ea:	9e 8b       	std	Y+22, r25	; 0x16
    11ec:	af 8b       	std	Y+23, r26	; 0x17
    11ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11f0:	6d 89       	ldd	r22, Y+21	; 0x15
    11f2:	7e 89       	ldd	r23, Y+22	; 0x16
    11f4:	8f 89       	ldd	r24, Y+23	; 0x17
    11f6:	98 8d       	ldd	r25, Y+24	; 0x18
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e8       	ldi	r20, 0x80	; 128
    11fe:	5f e3       	ldi	r21, 0x3F	; 63
    1200:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1204:	88 23       	and	r24, r24
    1206:	2c f4       	brge	.+10     	; 0x1212 <Timer_PWM+0x28e>
		__ticks = 1;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	9c 8b       	std	Y+20, r25	; 0x14
    120e:	8b 8b       	std	Y+19, r24	; 0x13
    1210:	3f c0       	rjmp	.+126    	; 0x1290 <Timer_PWM+0x30c>
	else if (__tmp > 65535)
    1212:	6d 89       	ldd	r22, Y+21	; 0x15
    1214:	7e 89       	ldd	r23, Y+22	; 0x16
    1216:	8f 89       	ldd	r24, Y+23	; 0x17
    1218:	98 8d       	ldd	r25, Y+24	; 0x18
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	3f ef       	ldi	r19, 0xFF	; 255
    121e:	4f e7       	ldi	r20, 0x7F	; 127
    1220:	57 e4       	ldi	r21, 0x47	; 71
    1222:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1226:	18 16       	cp	r1, r24
    1228:	4c f5       	brge	.+82     	; 0x127c <Timer_PWM+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122a:	69 8d       	ldd	r22, Y+25	; 0x19
    122c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    122e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1230:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e2       	ldi	r20, 0x20	; 32
    1238:	51 e4       	ldi	r21, 0x41	; 65
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	bc 01       	movw	r22, r24
    1244:	cd 01       	movw	r24, r26
    1246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	9c 8b       	std	Y+20, r25	; 0x14
    1250:	8b 8b       	std	Y+19, r24	; 0x13
    1252:	0f c0       	rjmp	.+30     	; 0x1272 <Timer_PWM+0x2ee>
    1254:	80 e9       	ldi	r24, 0x90	; 144
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	9a 8b       	std	Y+18, r25	; 0x12
    125a:	89 8b       	std	Y+17, r24	; 0x11
    125c:	89 89       	ldd	r24, Y+17	; 0x11
    125e:	9a 89       	ldd	r25, Y+18	; 0x12
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <Timer_PWM+0x2dc>
    1264:	9a 8b       	std	Y+18, r25	; 0x12
    1266:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1268:	8b 89       	ldd	r24, Y+19	; 0x13
    126a:	9c 89       	ldd	r25, Y+20	; 0x14
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	9c 8b       	std	Y+20, r25	; 0x14
    1270:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1272:	8b 89       	ldd	r24, Y+19	; 0x13
    1274:	9c 89       	ldd	r25, Y+20	; 0x14
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	69 f7       	brne	.-38     	; 0x1254 <Timer_PWM+0x2d0>
    127a:	14 c0       	rjmp	.+40     	; 0x12a4 <Timer_PWM+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127c:	6d 89       	ldd	r22, Y+21	; 0x15
    127e:	7e 89       	ldd	r23, Y+22	; 0x16
    1280:	8f 89       	ldd	r24, Y+23	; 0x17
    1282:	98 8d       	ldd	r25, Y+24	; 0x18
    1284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	9c 8b       	std	Y+20, r25	; 0x14
    128e:	8b 8b       	std	Y+19, r24	; 0x13
    1290:	8b 89       	ldd	r24, Y+19	; 0x13
    1292:	9c 89       	ldd	r25, Y+20	; 0x14
    1294:	98 8b       	std	Y+16, r25	; 0x10
    1296:	8f 87       	std	Y+15, r24	; 0x0f
    1298:	8f 85       	ldd	r24, Y+15	; 0x0f
    129a:	98 89       	ldd	r25, Y+16	; 0x10
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <Timer_PWM+0x318>
    12a0:	98 8b       	std	Y+16, r25	; 0x10
    12a2:	8f 87       	std	Y+15, r24	; 0x0f
		while (OCR1B <= 1022) { //turn LED on
			OCR1B += 1;
			_delay_ms(5);
		}
		_delay_ms(1000);
		while (OCR1B > 0) { //turn LED off
    12a4:	e8 e4       	ldi	r30, 0x48	; 72
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <Timer_PWM+0x32e>
    12b0:	7d cf       	rjmp	.-262    	; 0x11ac <Timer_PWM+0x228>
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	aa e7       	ldi	r26, 0x7A	; 122
    12b8:	b4 e4       	ldi	r27, 0x44	; 68
    12ba:	8b 87       	std	Y+11, r24	; 0x0b
    12bc:	9c 87       	std	Y+12, r25	; 0x0c
    12be:	ad 87       	std	Y+13, r26	; 0x0d
    12c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	4a e7       	ldi	r20, 0x7A	; 122
    12d0:	55 e4       	ldi	r21, 0x45	; 69
    12d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	8f 83       	std	Y+7, r24	; 0x07
    12dc:	98 87       	std	Y+8, r25	; 0x08
    12de:	a9 87       	std	Y+9, r26	; 0x09
    12e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12e2:	6f 81       	ldd	r22, Y+7	; 0x07
    12e4:	78 85       	ldd	r23, Y+8	; 0x08
    12e6:	89 85       	ldd	r24, Y+9	; 0x09
    12e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e8       	ldi	r20, 0x80	; 128
    12f0:	5f e3       	ldi	r21, 0x3F	; 63
    12f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12f6:	88 23       	and	r24, r24
    12f8:	2c f4       	brge	.+10     	; 0x1304 <Timer_PWM+0x380>
		__ticks = 1;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	3f c0       	rjmp	.+126    	; 0x1382 <Timer_PWM+0x3fe>
	else if (__tmp > 65535)
    1304:	6f 81       	ldd	r22, Y+7	; 0x07
    1306:	78 85       	ldd	r23, Y+8	; 0x08
    1308:	89 85       	ldd	r24, Y+9	; 0x09
    130a:	9a 85       	ldd	r25, Y+10	; 0x0a
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	3f ef       	ldi	r19, 0xFF	; 255
    1310:	4f e7       	ldi	r20, 0x7F	; 127
    1312:	57 e4       	ldi	r21, 0x47	; 71
    1314:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1318:	18 16       	cp	r1, r24
    131a:	4c f5       	brge	.+82     	; 0x136e <Timer_PWM+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131c:	6b 85       	ldd	r22, Y+11	; 0x0b
    131e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1320:	8d 85       	ldd	r24, Y+13	; 0x0d
    1322:	9e 85       	ldd	r25, Y+14	; 0x0e
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e2       	ldi	r20, 0x20	; 32
    132a:	51 e4       	ldi	r21, 0x41	; 65
    132c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	bc 01       	movw	r22, r24
    1336:	cd 01       	movw	r24, r26
    1338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
    1344:	0f c0       	rjmp	.+30     	; 0x1364 <Timer_PWM+0x3e0>
    1346:	80 e9       	ldi	r24, 0x90	; 144
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	9c 83       	std	Y+4, r25	; 0x04
    134c:	8b 83       	std	Y+3, r24	; 0x03
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <Timer_PWM+0x3ce>
    1356:	9c 83       	std	Y+4, r25	; 0x04
    1358:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	9e 83       	std	Y+6, r25	; 0x06
    1362:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	69 f7       	brne	.-38     	; 0x1346 <Timer_PWM+0x3c2>
    136c:	a3 ce       	rjmp	.-698    	; 0x10b4 <Timer_PWM+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	9a 83       	std	Y+2, r25	; 0x02
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <Timer_PWM+0x40a>
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	8e ce       	rjmp	.-740    	; 0x10b4 <Timer_PWM+0x130>

00001398 <Freq_Duty>:
		}
		_delay_ms(1000);
	}
}
void Freq_Duty(uint8t a, uint8t b, uint8t c, uint8t h, uint8t p, long *f,
		float *d) {
    1398:	cf 92       	push	r12
    139a:	df 92       	push	r13
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	2e 97       	sbiw	r28, 0x0e	; 14
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	7c 83       	std	Y+4, r23	; 0x04
    13be:	6b 83       	std	Y+3, r22	; 0x03
    13c0:	5e 83       	std	Y+6, r21	; 0x06
    13c2:	4d 83       	std	Y+5, r20	; 0x05
    13c4:	38 87       	std	Y+8, r19	; 0x08
    13c6:	2f 83       	std	Y+7, r18	; 0x07
    13c8:	1a 87       	std	Y+10, r17	; 0x0a
    13ca:	09 87       	std	Y+9, r16	; 0x09
    13cc:	fc 86       	std	Y+12, r15	; 0x0c
    13ce:	eb 86       	std	Y+11, r14	; 0x0b
    13d0:	de 86       	std	Y+14, r13	; 0x0e
    13d2:	cd 86       	std	Y+13, r12	; 0x0d
	TCCR1A = 0;
    13d4:	ef e4       	ldi	r30, 0x4F	; 79
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	10 82       	st	Z, r1
	TCCR1B = 0;
    13da:	ee e4       	ldi	r30, 0x4E	; 78
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	10 82       	st	Z, r1
	TCNT1 = 0;
    13e0:	ec e4       	ldi	r30, 0x4C	; 76
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	11 82       	std	Z+1, r1	; 0x01
    13e6:	10 82       	st	Z, r1
	TIFR = (1 << ICF1); // Clear ICF (Input Capture flag) flag
    13e8:	e8 e5       	ldi	r30, 0x58	; 88
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 e2       	ldi	r24, 0x20	; 32
    13ee:	80 83       	st	Z, r24

	SET_BIT(TCCR1B,ICES1); // Rising edge
    13f0:	ae e4       	ldi	r26, 0x4E	; 78
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ee e4       	ldi	r30, 0x4E	; 78
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 64       	ori	r24, 0x40	; 64
    13fc:	8c 93       	st	X, r24
	while ((TIFR & (1 << ICF1)) == 0)
    13fe:	e8 e5       	ldi	r30, 0x58	; 88
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	80 72       	andi	r24, 0x20	; 32
    140a:	90 70       	andi	r25, 0x00	; 0
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	b9 f3       	breq	.-18     	; 0x13fe <Freq_Duty+0x66>
		;
	a = ICR1; // Take value of capture register
    1410:	e6 e4       	ldi	r30, 0x46	; 70
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	9a 83       	std	Y+2, r25	; 0x02
    141a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TIFR, ICF1); // Clear ICF flag
    141c:	a8 e5       	ldi	r26, 0x58	; 88
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e8 e5       	ldi	r30, 0x58	; 88
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	80 62       	ori	r24, 0x20	; 32
    1428:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B,ICES1); // Falling edge
    142a:	ae e4       	ldi	r26, 0x4E	; 78
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	ee e4       	ldi	r30, 0x4E	; 78
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8f 7b       	andi	r24, 0xBF	; 191
    1436:	8c 93       	st	X, r24
	while ((TIFR & (1 << ICF1)) == 0)
    1438:	e8 e5       	ldi	r30, 0x58	; 88
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	80 72       	andi	r24, 0x20	; 32
    1444:	90 70       	andi	r25, 0x00	; 0
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	b9 f3       	breq	.-18     	; 0x1438 <Freq_Duty+0xa0>
		;
	b = ICR1; // Take value of capture register
    144a:	e6 e4       	ldi	r30, 0x46	; 70
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	91 81       	ldd	r25, Z+1	; 0x01
    1452:	9c 83       	std	Y+4, r25	; 0x04
    1454:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(TIFR, ICF1); // Clear ICF flag
    1456:	a8 e5       	ldi	r26, 0x58	; 88
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e8 e5       	ldi	r30, 0x58	; 88
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 62       	ori	r24, 0x20	; 32
    1462:	8c 93       	st	X, r24

	SET_BIT(TCCR1B,ICES1); // Rising edge
    1464:	ae e4       	ldi	r26, 0x4E	; 78
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	ee e4       	ldi	r30, 0x4E	; 78
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	80 64       	ori	r24, 0x40	; 64
    1470:	8c 93       	st	X, r24
	while ((TIFR & (1 << ICF1)) == 0)
    1472:	e8 e5       	ldi	r30, 0x58	; 88
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	80 72       	andi	r24, 0x20	; 32
    147e:	90 70       	andi	r25, 0x00	; 0
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	b9 f3       	breq	.-18     	; 0x1472 <Freq_Duty+0xda>
		;
	c = ICR1; // Take value of capture register
    1484:	e6 e4       	ldi	r30, 0x46	; 70
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	91 81       	ldd	r25, Z+1	; 0x01
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
	SET_BIT(TIFR, ICF1); // Clear ICF flag
    1490:	a8 e5       	ldi	r26, 0x58	; 88
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e8 e5       	ldi	r30, 0x58	; 88
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	80 62       	ori	r24, 0x20	; 32
    149c:	8c 93       	st	X, r24

	TCCR1B = 0; // Stop the timer
    149e:	ee e4       	ldi	r30, 0x4E	; 78
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	10 82       	st	Z, r1

	if (a < b && b < c) /* Check for valid condition,
    14a4:	29 81       	ldd	r18, Y+1	; 0x01
    14a6:	3a 81       	ldd	r19, Y+2	; 0x02
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	28 17       	cp	r18, r24
    14ae:	39 07       	cpc	r19, r25
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <Freq_Duty+0x11c>
    14b2:	5d c0       	rjmp	.+186    	; 0x156e <Freq_Duty+0x1d6>
    14b4:	2b 81       	ldd	r18, Y+3	; 0x03
    14b6:	3c 81       	ldd	r19, Y+4	; 0x04
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	9e 81       	ldd	r25, Y+6	; 0x06
    14bc:	28 17       	cp	r18, r24
    14be:	39 07       	cpc	r19, r25
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <Freq_Duty+0x12c>
    14c2:	55 c0       	rjmp	.+170    	; 0x156e <Freq_Duty+0x1d6>
	 to avoid timer overflow reading */
	{
		h = b - a;
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	a9 01       	movw	r20, r18
    14ce:	48 1b       	sub	r20, r24
    14d0:	59 0b       	sbc	r21, r25
    14d2:	ca 01       	movw	r24, r20
    14d4:	98 87       	std	Y+8, r25	; 0x08
    14d6:	8f 83       	std	Y+7, r24	; 0x07
		p = c - a;
    14d8:	2d 81       	ldd	r18, Y+5	; 0x05
    14da:	3e 81       	ldd	r19, Y+6	; 0x06
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	a9 01       	movw	r20, r18
    14e2:	48 1b       	sub	r20, r24
    14e4:	59 0b       	sbc	r21, r25
    14e6:	ca 01       	movw	r24, r20
    14e8:	9a 87       	std	Y+10, r25	; 0x0a
    14ea:	89 87       	std	Y+9, r24	; 0x09
		*f = F_CPU / p;
    14ec:	89 85       	ldd	r24, Y+9	; 0x09
    14ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f0:	9c 01       	movw	r18, r24
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	94 e2       	ldi	r25, 0x24	; 36
    14fa:	a4 ef       	ldi	r26, 0xF4	; 244
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__udivmodsi4>
    1506:	da 01       	movw	r26, r20
    1508:	c9 01       	movw	r24, r18
    150a:	eb 85       	ldd	r30, Y+11	; 0x0b
    150c:	fc 85       	ldd	r31, Y+12	; 0x0c
    150e:	80 83       	st	Z, r24
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	a2 83       	std	Z+2, r26	; 0x02
    1514:	b3 83       	std	Z+3, r27	; 0x03
		*d = ((float) h / (float) p) * 100;
    1516:	8f 81       	ldd	r24, Y+7	; 0x07
    1518:	98 85       	ldd	r25, Y+8	; 0x08
    151a:	cc 01       	movw	r24, r24
    151c:	a0 e0       	ldi	r26, 0x00	; 0
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	bc 01       	movw	r22, r24
    1522:	cd 01       	movw	r24, r26
    1524:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1528:	7b 01       	movw	r14, r22
    152a:	8c 01       	movw	r16, r24
    152c:	89 85       	ldd	r24, Y+9	; 0x09
    152e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1530:	cc 01       	movw	r24, r24
    1532:	a0 e0       	ldi	r26, 0x00	; 0
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	bc 01       	movw	r22, r24
    1538:	cd 01       	movw	r24, r26
    153a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    153e:	9b 01       	movw	r18, r22
    1540:	ac 01       	movw	r20, r24
    1542:	c8 01       	movw	r24, r16
    1544:	b7 01       	movw	r22, r14
    1546:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	48 ec       	ldi	r20, 0xC8	; 200
    1558:	52 e4       	ldi	r21, 0x42	; 66
    155a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	ed 85       	ldd	r30, Y+13	; 0x0d
    1564:	fe 85       	ldd	r31, Y+14	; 0x0e
    1566:	80 83       	st	Z, r24
    1568:	91 83       	std	Z+1, r25	; 0x01
    156a:	a2 83       	std	Z+2, r26	; 0x02
    156c:	b3 83       	std	Z+3, r27	; 0x03
	}
}
    156e:	2e 96       	adiw	r28, 0x0e	; 14
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	df 90       	pop	r13
    1588:	cf 90       	pop	r12
    158a:	08 95       	ret

0000158c <init_interrupt>:
 *  Created on: Oct 1, 2021
 *      Author: LENOVOOOO
 */
#include "../External_Interupts/Ex_Int.h"

void init_interrupt(){
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT0 == ENABLED
	GICR |= (1<<INT0);
    1594:	ab e5       	ldi	r26, 0x5B	; 91
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	eb e5       	ldi	r30, 0x5B	; 91
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 64       	ori	r24, 0x40	; 64
    15a0:	8c 93       	st	X, r24
#if EXTI_INT0_EDGE == LOW_LEVEL
	MCUCR &= ~(1<<ISC01);
	MCUCR &= ~(1<<ISC00);

#elif EXTI_INT0_EDGE == BOTH_EDGES
	MCUCR &= ~(1<<ISC01);
    15a2:	a5 e5       	ldi	r26, 0x55	; 85
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e5 e5       	ldi	r30, 0x55	; 85
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8d 7f       	andi	r24, 0xFD	; 253
    15ae:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC00);
    15b0:	a5 e5       	ldi	r26, 0x55	; 85
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e5 e5       	ldi	r30, 0x55	; 85
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	8c 93       	st	X, r24
#endif

#if EXTI_INT1 == ENABLED
	GICR |= (1<<INT0);
#else
	GICR &= ~(1<<INT0);
    15be:	ab e5       	ldi	r26, 0x5B	; 91
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	eb e5       	ldi	r30, 0x5B	; 91
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8f 7b       	andi	r24, 0xBF	; 191
    15ca:	8c 93       	st	X, r24
#if EXTI_INT1_EDGE == LOW_LEVEL
	MCUCR &= ~(1<<ISC01);
	MCUCR &= ~(1<<ISC00);

#elif EXTI_INT1_EDGE == BOTH_EDGES
	MCUCR &= ~(1<<ISC01);
    15cc:	a5 e5       	ldi	r26, 0x55	; 85
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e5 e5       	ldi	r30, 0x55	; 85
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	8d 7f       	andi	r24, 0xFD	; 253
    15d8:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC00);
    15da:	a5 e5       	ldi	r26, 0x55	; 85
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e5 e5       	ldi	r30, 0x55	; 85
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	81 60       	ori	r24, 0x01	; 1
    15e6:	8c 93       	st	X, r24
#endif

#if EXTI_INT2 == ENABLED
	GICR |= (1<<INT0);
#else
	GICR &= ~(1<<INT0);
    15e8:	ab e5       	ldi	r26, 0x5B	; 91
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	eb e5       	ldi	r30, 0x5B	; 91
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8f 7b       	andi	r24, 0xBF	; 191
    15f4:	8c 93       	st	X, r24
#if EXTI_INT2_EDGE == LOW_LEVEL
	MCUCR &= ~(1<<ISC01);
	MCUCR &= ~(1<<ISC00);

#elif EXTI_INT2_EDGE == BOTH_EDGES
	MCUCR &= ~(1<<ISC01);
    15f6:	a5 e5       	ldi	r26, 0x55	; 85
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e5 e5       	ldi	r30, 0x55	; 85
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8d 7f       	andi	r24, 0xFD	; 253
    1602:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC00);
    1604:	a5 e5       	ldi	r26, 0x55	; 85
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e5 e5       	ldi	r30, 0x55	; 85
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	81 60       	ori	r24, 0x01	; 1
    1610:	8c 93       	st	X, r24
	MCUCR & = (1<<ISC00);
#elif EXTI_INT2_EDGE == RAISING_EDGE
	MCUCR | = ~(1<<ISC01);
	MCUCR | = (1<<ISC00);
#endif
}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <init_int0>:

void init_int0(){
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT0); //Enable Interrupt 0
    1620:	ab e5       	ldi	r26, 0x5B	; 91
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	eb e5       	ldi	r30, 0x5B	; 91
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	80 64       	ori	r24, 0x40	; 64
    162c:	8c 93       	st	X, r24
	//Make interrupt at any logical change
	SET_BIT(MCUCR,ISC00);
    162e:	a5 e5       	ldi	r26, 0x55	; 85
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e5 e5       	ldi	r30, 0x55	; 85
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	81 60       	ori	r24, 0x01	; 1
    163a:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC01);
    163c:	a5 e5       	ldi	r26, 0x55	; 85
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e5 e5       	ldi	r30, 0x55	; 85
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	8d 7f       	andi	r24, 0xFD	; 253
    1648:	8c 93       	st	X, r24
}
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <__vector_1>:

ISR(INT0_vect){
    1650:	1f 92       	push	r1
    1652:	0f 92       	push	r0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	0f 92       	push	r0
    1658:	11 24       	eor	r1, r1
    165a:	2f 93       	push	r18
    165c:	3f 93       	push	r19
    165e:	4f 93       	push	r20
    1660:	5f 93       	push	r21
    1662:	6f 93       	push	r22
    1664:	7f 93       	push	r23
    1666:	8f 93       	push	r24
    1668:	9f 93       	push	r25
    166a:	af 93       	push	r26
    166c:	bf 93       	push	r27
    166e:	ef 93       	push	r30
    1670:	ff 93       	push	r31
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	p1();
    167a:	e0 91 9c 01 	lds	r30, 0x019C
    167e:	f0 91 9d 01 	lds	r31, 0x019D
    1682:	09 95       	icall
}
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	ff 91       	pop	r31
    168a:	ef 91       	pop	r30
    168c:	bf 91       	pop	r27
    168e:	af 91       	pop	r26
    1690:	9f 91       	pop	r25
    1692:	8f 91       	pop	r24
    1694:	7f 91       	pop	r23
    1696:	6f 91       	pop	r22
    1698:	5f 91       	pop	r21
    169a:	4f 91       	pop	r20
    169c:	3f 91       	pop	r19
    169e:	2f 91       	pop	r18
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	0f 90       	pop	r0
    16a6:	1f 90       	pop	r1
    16a8:	18 95       	reti

000016aa <__vector_2>:
ISR(INT1_vect){
    16aa:	1f 92       	push	r1
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	0f 92       	push	r0
    16b2:	11 24       	eor	r1, r1
    16b4:	2f 93       	push	r18
    16b6:	3f 93       	push	r19
    16b8:	4f 93       	push	r20
    16ba:	5f 93       	push	r21
    16bc:	6f 93       	push	r22
    16be:	7f 93       	push	r23
    16c0:	8f 93       	push	r24
    16c2:	9f 93       	push	r25
    16c4:	af 93       	push	r26
    16c6:	bf 93       	push	r27
    16c8:	ef 93       	push	r30
    16ca:	ff 93       	push	r31
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
	p1();
    16d4:	e0 91 9c 01 	lds	r30, 0x019C
    16d8:	f0 91 9d 01 	lds	r31, 0x019D
    16dc:	09 95       	icall
}
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	ff 91       	pop	r31
    16e4:	ef 91       	pop	r30
    16e6:	bf 91       	pop	r27
    16e8:	af 91       	pop	r26
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	7f 91       	pop	r23
    16f0:	6f 91       	pop	r22
    16f2:	5f 91       	pop	r21
    16f4:	4f 91       	pop	r20
    16f6:	3f 91       	pop	r19
    16f8:	2f 91       	pop	r18
    16fa:	0f 90       	pop	r0
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	0f 90       	pop	r0
    1700:	1f 90       	pop	r1
    1702:	18 95       	reti

00001704 <__vector_3>:
ISR(INT2_vect){
    1704:	1f 92       	push	r1
    1706:	0f 92       	push	r0
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	0f 92       	push	r0
    170c:	11 24       	eor	r1, r1
    170e:	2f 93       	push	r18
    1710:	3f 93       	push	r19
    1712:	4f 93       	push	r20
    1714:	5f 93       	push	r21
    1716:	6f 93       	push	r22
    1718:	7f 93       	push	r23
    171a:	8f 93       	push	r24
    171c:	9f 93       	push	r25
    171e:	af 93       	push	r26
    1720:	bf 93       	push	r27
    1722:	ef 93       	push	r30
    1724:	ff 93       	push	r31
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
	p1();
    172e:	e0 91 9c 01 	lds	r30, 0x019C
    1732:	f0 91 9d 01 	lds	r31, 0x019D
    1736:	09 95       	icall
}
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	ff 91       	pop	r31
    173e:	ef 91       	pop	r30
    1740:	bf 91       	pop	r27
    1742:	af 91       	pop	r26
    1744:	9f 91       	pop	r25
    1746:	8f 91       	pop	r24
    1748:	7f 91       	pop	r23
    174a:	6f 91       	pop	r22
    174c:	5f 91       	pop	r21
    174e:	4f 91       	pop	r20
    1750:	3f 91       	pop	r19
    1752:	2f 91       	pop	r18
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	0f 90       	pop	r0
    175a:	1f 90       	pop	r1
    175c:	18 95       	reti

0000175e <set_cb_int0>:
void set_cb_int0(void(*p2)()){
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	00 d0       	rcall	.+0      	; 0x1764 <set_cb_int0+0x6>
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
	p1 = p2;
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	90 93 9d 01 	sts	0x019D, r25
    1774:	80 93 9c 01 	sts	0x019C, r24
}
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <set_cb_int1>:
void set_cb_int1(void(*p2)()){
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <set_cb_int1+0x6>
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
	p1 = p2;
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	90 93 9d 01 	sts	0x019D, r25
    1798:	80 93 9c 01 	sts	0x019C, r24
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <set_cb_int2>:
void set_cb_int2(void(*p2)()){
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <set_cb_int2+0x6>
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01
	p1 = p2;
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	90 93 9d 01 	sts	0x019D, r25
    17bc:	80 93 9c 01 	sts	0x019C, r24
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <DIO_WRITE>:
//2->PORTC
//3->PORTD
#include "DIO.h"
extern pin_config_type pin_configs[];
extern int n;
void DIO_WRITE(uint8 channel, uint8 state) {
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <DIO_WRITE+0x6>
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <DIO_WRITE+0x8>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <DIO_WRITE+0xa>
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	8b 83       	std	Y+3, r24	; 0x03
    17da:	6c 83       	std	Y+4, r22	; 0x04
	uint8 port_v = channel / 8;
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	86 95       	lsr	r24
    17e0:	86 95       	lsr	r24
    17e2:	86 95       	lsr	r24
    17e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pin_num = channel % 8;
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	87 70       	andi	r24, 0x07	; 7
    17ea:	89 83       	std	Y+1, r24	; 0x01
	switch (port_v) {
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3e 83       	std	Y+6, r19	; 0x06
    17f4:	2d 83       	std	Y+5, r18	; 0x05
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <DIO_WRITE+0x38>
    1800:	43 c0       	rjmp	.+134    	; 0x1888 <DIO_WRITE+0xbe>
    1802:	2d 81       	ldd	r18, Y+5	; 0x05
    1804:	3e 81       	ldd	r19, Y+6	; 0x06
    1806:	22 30       	cpi	r18, 0x02	; 2
    1808:	31 05       	cpc	r19, r1
    180a:	2c f4       	brge	.+10     	; 0x1816 <DIO_WRITE+0x4c>
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	71 f0       	breq	.+28     	; 0x1830 <DIO_WRITE+0x66>
    1814:	bc c0       	rjmp	.+376    	; 0x198e <DIO_WRITE+0x1c4>
    1816:	2d 81       	ldd	r18, Y+5	; 0x05
    1818:	3e 81       	ldd	r19, Y+6	; 0x06
    181a:	22 30       	cpi	r18, 0x02	; 2
    181c:	31 05       	cpc	r19, r1
    181e:	09 f4       	brne	.+2      	; 0x1822 <DIO_WRITE+0x58>
    1820:	5f c0       	rjmp	.+190    	; 0x18e0 <DIO_WRITE+0x116>
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	83 30       	cpi	r24, 0x03	; 3
    1828:	91 05       	cpc	r25, r1
    182a:	09 f4       	brne	.+2      	; 0x182e <DIO_WRITE+0x64>
    182c:	85 c0       	rjmp	.+266    	; 0x1938 <DIO_WRITE+0x16e>
    182e:	af c0       	rjmp	.+350    	; 0x198e <DIO_WRITE+0x1c4>
	case 0:
		if (state == 1)
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	a1 f4       	brne	.+40     	; 0x185e <DIO_WRITE+0x94>
			SET_BIT(PORTA, pin_num);
    1836:	ab e3       	ldi	r26, 0x3B	; 59
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	eb e3       	ldi	r30, 0x3B	; 59
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_WRITE+0x8a>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_WRITE+0x86>
    1858:	84 2b       	or	r24, r20
    185a:	8c 93       	st	X, r24
    185c:	98 c0       	rjmp	.+304    	; 0x198e <DIO_WRITE+0x1c4>
		else
			CLR_BIT(PORTA, pin_num);
    185e:	ab e3       	ldi	r26, 0x3B	; 59
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	eb e3       	ldi	r30, 0x3B	; 59
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 2e       	mov	r0, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_WRITE+0xb2>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	0a 94       	dec	r0
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <DIO_WRITE+0xae>
    1880:	80 95       	com	r24
    1882:	84 23       	and	r24, r20
    1884:	8c 93       	st	X, r24
    1886:	83 c0       	rjmp	.+262    	; 0x198e <DIO_WRITE+0x1c4>
		break;
	case 1:
		if (state == 1)
    1888:	8c 81       	ldd	r24, Y+4	; 0x04
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	a1 f4       	brne	.+40     	; 0x18b6 <DIO_WRITE+0xec>
			SET_BIT(PORTB, pin_num);
    188e:	a8 e3       	ldi	r26, 0x38	; 56
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e8 e3       	ldi	r30, 0x38	; 56
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	48 2f       	mov	r20, r24
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 2e       	mov	r0, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <DIO_WRITE+0xe2>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <DIO_WRITE+0xde>
    18b0:	84 2b       	or	r24, r20
    18b2:	8c 93       	st	X, r24
    18b4:	6c c0       	rjmp	.+216    	; 0x198e <DIO_WRITE+0x1c4>
		else
			CLR_BIT(PORTB, pin_num);
    18b6:	a8 e3       	ldi	r26, 0x38	; 56
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e8 e3       	ldi	r30, 0x38	; 56
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <DIO_WRITE+0x10a>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <DIO_WRITE+0x106>
    18d8:	80 95       	com	r24
    18da:	84 23       	and	r24, r20
    18dc:	8c 93       	st	X, r24
    18de:	57 c0       	rjmp	.+174    	; 0x198e <DIO_WRITE+0x1c4>
		break;
	case 2:
		if (state == 1)
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	a1 f4       	brne	.+40     	; 0x190e <DIO_WRITE+0x144>
			SET_BIT(PORTC, pin_num);
    18e6:	a5 e3       	ldi	r26, 0x35	; 53
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e5 e3       	ldi	r30, 0x35	; 53
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <DIO_WRITE+0x13a>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <DIO_WRITE+0x136>
    1908:	84 2b       	or	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	40 c0       	rjmp	.+128    	; 0x198e <DIO_WRITE+0x1c4>
		else
			CLR_BIT(PORTC, pin_num);
    190e:	a5 e3       	ldi	r26, 0x35	; 53
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e5 e3       	ldi	r30, 0x35	; 53
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_WRITE+0x162>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <DIO_WRITE+0x15e>
    1930:	80 95       	com	r24
    1932:	84 23       	and	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	2b c0       	rjmp	.+86     	; 0x198e <DIO_WRITE+0x1c4>
		break;
	case 3:
		if (state == 1)
    1938:	8c 81       	ldd	r24, Y+4	; 0x04
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	a1 f4       	brne	.+40     	; 0x1966 <DIO_WRITE+0x19c>
			SET_BIT(PORTD, pin_num);
    193e:	a2 e3       	ldi	r26, 0x32	; 50
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e2 e3       	ldi	r30, 0x32	; 50
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <DIO_WRITE+0x192>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <DIO_WRITE+0x18e>
    1960:	84 2b       	or	r24, r20
    1962:	8c 93       	st	X, r24
    1964:	14 c0       	rjmp	.+40     	; 0x198e <DIO_WRITE+0x1c4>
		else
			CLR_BIT(PORTD, pin_num);
    1966:	a2 e3       	ldi	r26, 0x32	; 50
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e2 e3       	ldi	r30, 0x32	; 50
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_WRITE+0x1ba>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_WRITE+0x1b6>
    1988:	80 95       	com	r24
    198a:	84 23       	and	r24, r20
    198c:	8c 93       	st	X, r24
		break;
	}
}
    198e:	26 96       	adiw	r28, 0x06	; 6
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <DIO_READ>:
state_type DIO_READ(uint8 channel) {
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <DIO_READ+0x6>
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <DIO_READ+0x8>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <DIO_READ+0xa>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	8c 83       	std	Y+4, r24	; 0x04
	Dio_port_type port_v = channel / 8;
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	86 95       	lsr	r24
    19b4:	86 95       	lsr	r24
    19b6:	86 95       	lsr	r24
    19b8:	8b 83       	std	Y+3, r24	; 0x03
	Dio_pin_type pin_num = channel % 8;
    19ba:	8c 81       	ldd	r24, Y+4	; 0x04
    19bc:	87 70       	andi	r24, 0x07	; 7
    19be:	8a 83       	std	Y+2, r24	; 0x02
	state_type state = 0;
    19c0:	19 82       	std	Y+1, r1	; 0x01
	switch (port_v) {
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3e 83       	std	Y+6, r19	; 0x06
    19ca:	2d 83       	std	Y+5, r18	; 0x05
    19cc:	4d 81       	ldd	r20, Y+5	; 0x05
    19ce:	5e 81       	ldd	r21, Y+6	; 0x06
    19d0:	41 30       	cpi	r20, 0x01	; 1
    19d2:	51 05       	cpc	r21, r1
    19d4:	41 f1       	breq	.+80     	; 0x1a26 <DIO_READ+0x86>
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	82 30       	cpi	r24, 0x02	; 2
    19dc:	91 05       	cpc	r25, r1
    19de:	34 f4       	brge	.+12     	; 0x19ec <DIO_READ+0x4c>
    19e0:	2d 81       	ldd	r18, Y+5	; 0x05
    19e2:	3e 81       	ldd	r19, Y+6	; 0x06
    19e4:	21 15       	cp	r18, r1
    19e6:	31 05       	cpc	r19, r1
    19e8:	61 f0       	breq	.+24     	; 0x1a02 <DIO_READ+0x62>
    19ea:	53 c0       	rjmp	.+166    	; 0x1a92 <DIO_READ+0xf2>
    19ec:	4d 81       	ldd	r20, Y+5	; 0x05
    19ee:	5e 81       	ldd	r21, Y+6	; 0x06
    19f0:	42 30       	cpi	r20, 0x02	; 2
    19f2:	51 05       	cpc	r21, r1
    19f4:	51 f1       	breq	.+84     	; 0x1a4a <DIO_READ+0xaa>
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	83 30       	cpi	r24, 0x03	; 3
    19fc:	91 05       	cpc	r25, r1
    19fe:	b9 f1       	breq	.+110    	; 0x1a6e <DIO_READ+0xce>
    1a00:	48 c0       	rjmp	.+144    	; 0x1a92 <DIO_READ+0xf2>
	case 0:
		state = GET_BIT(PINA, pin_num);
    1a02:	e9 e3       	ldi	r30, 0x39	; 57
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a9 01       	movw	r20, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <DIO_READ+0x7a>
    1a16:	55 95       	asr	r21
    1a18:	47 95       	ror	r20
    1a1a:	8a 95       	dec	r24
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <DIO_READ+0x76>
    1a1e:	ca 01       	movw	r24, r20
    1a20:	81 70       	andi	r24, 0x01	; 1
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	38 c0       	rjmp	.+112    	; 0x1a96 <DIO_READ+0xf6>
		break;
	case 1:
		state = GET_BIT(PINB, pin_num);
    1a26:	e6 e3       	ldi	r30, 0x36	; 54
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a9 01       	movw	r20, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <DIO_READ+0x9e>
    1a3a:	55 95       	asr	r21
    1a3c:	47 95       	ror	r20
    1a3e:	8a 95       	dec	r24
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <DIO_READ+0x9a>
    1a42:	ca 01       	movw	r24, r20
    1a44:	81 70       	andi	r24, 0x01	; 1
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	26 c0       	rjmp	.+76     	; 0x1a96 <DIO_READ+0xf6>
		break;
	case 2:
		state = GET_BIT(PINC, pin_num);
    1a4a:	e3 e3       	ldi	r30, 0x33	; 51
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	88 2f       	mov	r24, r24
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a9 01       	movw	r20, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <DIO_READ+0xc2>
    1a5e:	55 95       	asr	r21
    1a60:	47 95       	ror	r20
    1a62:	8a 95       	dec	r24
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <DIO_READ+0xbe>
    1a66:	ca 01       	movw	r24, r20
    1a68:	81 70       	andi	r24, 0x01	; 1
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <DIO_READ+0xf6>
		break;
	case 3:
		state = GET_BIT(PIND, pin_num);
    1a6e:	e0 e3       	ldi	r30, 0x30	; 48
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a9 01       	movw	r20, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_READ+0xe6>
    1a82:	55 95       	asr	r21
    1a84:	47 95       	ror	r20
    1a86:	8a 95       	dec	r24
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_READ+0xe2>
    1a8a:	ca 01       	movw	r24, r20
    1a8c:	81 70       	andi	r24, 0x01	; 1
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <DIO_READ+0xf6>
		break;
	default:
		state = -1;
    1a92:	8f ef       	ldi	r24, 0xFF	; 255
    1a94:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a98:	26 96       	adiw	r28, 0x06	; 6
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <dio_init>:

void dio_init(void) {
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <dio_init+0x6>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <dio_init+0x8>
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
	int i;
	for (i = 0; i < n; i++) {
    1ab6:	1a 82       	std	Y+2, r1	; 0x02
    1ab8:	19 82       	std	Y+1, r1	; 0x01
    1aba:	57 c1       	rjmp	.+686    	; 0x1d6a <dio_init+0x2c0>
		switch (pin_configs[i].port) {
    1abc:	29 81       	ldd	r18, Y+1	; 0x01
    1abe:	3a 81       	ldd	r19, Y+2	; 0x02
    1ac0:	c9 01       	movw	r24, r18
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	82 0f       	add	r24, r18
    1ac8:	93 1f       	adc	r25, r19
    1aca:	fc 01       	movw	r30, r24
    1acc:	e5 58       	subi	r30, 0x85	; 133
    1ace:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad0:	80 81       	ld	r24, Z
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	3c 83       	std	Y+4, r19	; 0x04
    1ad8:	2b 83       	std	Y+3, r18	; 0x03
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <dio_init+0x3c>
    1ae4:	61 c0       	rjmp	.+194    	; 0x1ba8 <dio_init+0xfe>
    1ae6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aea:	22 30       	cpi	r18, 0x02	; 2
    1aec:	31 05       	cpc	r19, r1
    1aee:	2c f4       	brge	.+10     	; 0x1afa <dio_init+0x50>
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	71 f0       	breq	.+28     	; 0x1b14 <dio_init+0x6a>
    1af8:	33 c1       	rjmp	.+614    	; 0x1d60 <dio_init+0x2b6>
    1afa:	2b 81       	ldd	r18, Y+3	; 0x03
    1afc:	3c 81       	ldd	r19, Y+4	; 0x04
    1afe:	22 30       	cpi	r18, 0x02	; 2
    1b00:	31 05       	cpc	r19, r1
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <dio_init+0x5c>
    1b04:	9b c0       	rjmp	.+310    	; 0x1c3c <dio_init+0x192>
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	83 30       	cpi	r24, 0x03	; 3
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <dio_init+0x68>
    1b10:	df c0       	rjmp	.+446    	; 0x1cd0 <dio_init+0x226>
    1b12:	26 c1       	rjmp	.+588    	; 0x1d60 <dio_init+0x2b6>
		case DIO_PORTA:
			if (pin_configs[i].dir == OUTPUT)
    1b14:	29 81       	ldd	r18, Y+1	; 0x01
    1b16:	3a 81       	ldd	r19, Y+2	; 0x02
    1b18:	c9 01       	movw	r24, r18
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	82 0f       	add	r24, r18
    1b20:	93 1f       	adc	r25, r19
    1b22:	fc 01       	movw	r30, r24
    1b24:	e3 58       	subi	r30, 0x83	; 131
    1b26:	fe 4f       	sbci	r31, 0xFE	; 254
    1b28:	80 81       	ld	r24, Z
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	f1 f4       	brne	.+60     	; 0x1b6a <dio_init+0xc0>
				SET_BIT(DDRA, pin_configs[i].pin);
    1b2e:	aa e3       	ldi	r26, 0x3A	; 58
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ea e3       	ldi	r30, 0x3A	; 58
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	29 81       	ldd	r18, Y+1	; 0x01
    1b3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b3e:	c9 01       	movw	r24, r18
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	82 0f       	add	r24, r18
    1b46:	93 1f       	adc	r25, r19
    1b48:	fc 01       	movw	r30, r24
    1b4a:	e4 58       	subi	r30, 0x84	; 132
    1b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4e:	80 81       	ld	r24, Z
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <dio_init+0xb6>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <dio_init+0xb2>
    1b64:	84 2b       	or	r24, r20
    1b66:	8c 93       	st	X, r24
    1b68:	fb c0       	rjmp	.+502    	; 0x1d60 <dio_init+0x2b6>
			else
				CLR_BIT(DDRA, pin_configs[i].pin);
    1b6a:	aa e3       	ldi	r26, 0x3A	; 58
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	ea e3       	ldi	r30, 0x3A	; 58
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	48 2f       	mov	r20, r24
    1b76:	29 81       	ldd	r18, Y+1	; 0x01
    1b78:	3a 81       	ldd	r19, Y+2	; 0x02
    1b7a:	c9 01       	movw	r24, r18
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	82 0f       	add	r24, r18
    1b82:	93 1f       	adc	r25, r19
    1b84:	fc 01       	movw	r30, r24
    1b86:	e4 58       	subi	r30, 0x84	; 132
    1b88:	fe 4f       	sbci	r31, 0xFE	; 254
    1b8a:	80 81       	ld	r24, Z
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <dio_init+0xf2>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <dio_init+0xee>
    1ba0:	80 95       	com	r24
    1ba2:	84 23       	and	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	dc c0       	rjmp	.+440    	; 0x1d60 <dio_init+0x2b6>
			break;
		case DIO_PORTB:
			if (pin_configs[i].dir == OUTPUT)
    1ba8:	29 81       	ldd	r18, Y+1	; 0x01
    1baa:	3a 81       	ldd	r19, Y+2	; 0x02
    1bac:	c9 01       	movw	r24, r18
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	82 0f       	add	r24, r18
    1bb4:	93 1f       	adc	r25, r19
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	e3 58       	subi	r30, 0x83	; 131
    1bba:	fe 4f       	sbci	r31, 0xFE	; 254
    1bbc:	80 81       	ld	r24, Z
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	f1 f4       	brne	.+60     	; 0x1bfe <dio_init+0x154>
				SET_BIT(DDRB, pin_configs[i].pin);
    1bc2:	a7 e3       	ldi	r26, 0x37	; 55
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e7 e3       	ldi	r30, 0x37	; 55
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 2f       	mov	r20, r24
    1bce:	29 81       	ldd	r18, Y+1	; 0x01
    1bd0:	3a 81       	ldd	r19, Y+2	; 0x02
    1bd2:	c9 01       	movw	r24, r18
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	82 0f       	add	r24, r18
    1bda:	93 1f       	adc	r25, r19
    1bdc:	fc 01       	movw	r30, r24
    1bde:	e4 58       	subi	r30, 0x84	; 132
    1be0:	fe 4f       	sbci	r31, 0xFE	; 254
    1be2:	80 81       	ld	r24, Z
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <dio_init+0x14a>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <dio_init+0x146>
    1bf8:	84 2b       	or	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	b1 c0       	rjmp	.+354    	; 0x1d60 <dio_init+0x2b6>
			else
				CLR_BIT(DDRB, pin_configs[i].pin);
    1bfe:	a7 e3       	ldi	r26, 0x37	; 55
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e7 e3       	ldi	r30, 0x37	; 55
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	29 81       	ldd	r18, Y+1	; 0x01
    1c0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c0e:	c9 01       	movw	r24, r18
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	82 0f       	add	r24, r18
    1c16:	93 1f       	adc	r25, r19
    1c18:	fc 01       	movw	r30, r24
    1c1a:	e4 58       	subi	r30, 0x84	; 132
    1c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1e:	80 81       	ld	r24, Z
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <dio_init+0x186>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <dio_init+0x182>
    1c34:	80 95       	com	r24
    1c36:	84 23       	and	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	92 c0       	rjmp	.+292    	; 0x1d60 <dio_init+0x2b6>
			break;
		case DIO_PORTC:
			if (pin_configs[i].dir == OUTPUT)
    1c3c:	29 81       	ldd	r18, Y+1	; 0x01
    1c3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c40:	c9 01       	movw	r24, r18
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	82 0f       	add	r24, r18
    1c48:	93 1f       	adc	r25, r19
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	e3 58       	subi	r30, 0x83	; 131
    1c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c50:	80 81       	ld	r24, Z
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	f1 f4       	brne	.+60     	; 0x1c92 <dio_init+0x1e8>
				SET_BIT(DDRC, pin_configs[i].pin);
    1c56:	a4 e3       	ldi	r26, 0x34	; 52
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e4 e3       	ldi	r30, 0x34	; 52
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	29 81       	ldd	r18, Y+1	; 0x01
    1c64:	3a 81       	ldd	r19, Y+2	; 0x02
    1c66:	c9 01       	movw	r24, r18
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	82 0f       	add	r24, r18
    1c6e:	93 1f       	adc	r25, r19
    1c70:	fc 01       	movw	r30, r24
    1c72:	e4 58       	subi	r30, 0x84	; 132
    1c74:	fe 4f       	sbci	r31, 0xFE	; 254
    1c76:	80 81       	ld	r24, Z
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 2e       	mov	r0, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <dio_init+0x1de>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	0a 94       	dec	r0
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <dio_init+0x1da>
    1c8c:	84 2b       	or	r24, r20
    1c8e:	8c 93       	st	X, r24
    1c90:	67 c0       	rjmp	.+206    	; 0x1d60 <dio_init+0x2b6>
			else
				CLR_BIT(DDRC, pin_configs[i].pin);
    1c92:	a4 e3       	ldi	r26, 0x34	; 52
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e4 e3       	ldi	r30, 0x34	; 52
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	29 81       	ldd	r18, Y+1	; 0x01
    1ca0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ca2:	c9 01       	movw	r24, r18
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	82 0f       	add	r24, r18
    1caa:	93 1f       	adc	r25, r19
    1cac:	fc 01       	movw	r30, r24
    1cae:	e4 58       	subi	r30, 0x84	; 132
    1cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb2:	80 81       	ld	r24, Z
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <dio_init+0x21a>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <dio_init+0x216>
    1cc8:	80 95       	com	r24
    1cca:	84 23       	and	r24, r20
    1ccc:	8c 93       	st	X, r24
    1cce:	48 c0       	rjmp	.+144    	; 0x1d60 <dio_init+0x2b6>
			break;
		case DIO_PORTD:
			if (pin_configs[i].dir == OUTPUT)
    1cd0:	29 81       	ldd	r18, Y+1	; 0x01
    1cd2:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd4:	c9 01       	movw	r24, r18
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	82 0f       	add	r24, r18
    1cdc:	93 1f       	adc	r25, r19
    1cde:	fc 01       	movw	r30, r24
    1ce0:	e3 58       	subi	r30, 0x83	; 131
    1ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce4:	80 81       	ld	r24, Z
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	f1 f4       	brne	.+60     	; 0x1d26 <dio_init+0x27c>
				SET_BIT(DDRD, pin_configs[i].pin);
    1cea:	a1 e3       	ldi	r26, 0x31	; 49
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	e1 e3       	ldi	r30, 0x31	; 49
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	48 2f       	mov	r20, r24
    1cf6:	29 81       	ldd	r18, Y+1	; 0x01
    1cf8:	3a 81       	ldd	r19, Y+2	; 0x02
    1cfa:	c9 01       	movw	r24, r18
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	82 0f       	add	r24, r18
    1d02:	93 1f       	adc	r25, r19
    1d04:	fc 01       	movw	r30, r24
    1d06:	e4 58       	subi	r30, 0x84	; 132
    1d08:	fe 4f       	sbci	r31, 0xFE	; 254
    1d0a:	80 81       	ld	r24, Z
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 2e       	mov	r0, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <dio_init+0x272>
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <dio_init+0x26e>
    1d20:	84 2b       	or	r24, r20
    1d22:	8c 93       	st	X, r24
    1d24:	1d c0       	rjmp	.+58     	; 0x1d60 <dio_init+0x2b6>
			else
				CLR_BIT(DDRD, pin_configs[i].pin);
    1d26:	a1 e3       	ldi	r26, 0x31	; 49
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e1 e3       	ldi	r30, 0x31	; 49
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	29 81       	ldd	r18, Y+1	; 0x01
    1d34:	3a 81       	ldd	r19, Y+2	; 0x02
    1d36:	c9 01       	movw	r24, r18
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	82 0f       	add	r24, r18
    1d3e:	93 1f       	adc	r25, r19
    1d40:	fc 01       	movw	r30, r24
    1d42:	e4 58       	subi	r30, 0x84	; 132
    1d44:	fe 4f       	sbci	r31, 0xFE	; 254
    1d46:	80 81       	ld	r24, Z
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <dio_init+0x2ac>
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	2a 95       	dec	r18
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <dio_init+0x2a8>
    1d5a:	80 95       	com	r24
    1d5c:	84 23       	and	r24, r20
    1d5e:	8c 93       	st	X, r24
	return state;
}

void dio_init(void) {
	int i;
	for (i = 0; i < n; i++) {
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	9a 81       	ldd	r25, Y+2	; 0x02
    1d64:	01 96       	adiw	r24, 0x01	; 1
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	20 91 99 01 	lds	r18, 0x0199
    1d6e:	30 91 9a 01 	lds	r19, 0x019A
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	82 17       	cp	r24, r18
    1d78:	93 07       	cpc	r25, r19
    1d7a:	0c f4       	brge	.+2      	; 0x1d7e <dio_init+0x2d4>
    1d7c:	9f ce       	rjmp	.-706    	; 0x1abc <dio_init+0x12>
			break;
		default:
			break;
		}
	}
}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <lcd_send_ch>:
 *  Created on: Sep 24, 2021
 *      Author: LENOVOOOO
 */
#include "lcd.h"

void lcd_send_ch(unsigned char data) {
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	c1 56       	subi	r28, 0x61	; 97
    1d9a:	d0 40       	sbci	r29, 0x00	; 0
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	fe 01       	movw	r30, r28
    1da8:	ef 59       	subi	r30, 0x9F	; 159
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 83       	st	Z, r24
	DIO_WRITE(RS, HIGH);
    1dae:	89 e0       	ldi	r24, 0x09	; 9
    1db0:	61 e0       	ldi	r22, 0x01	; 1
    1db2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	DIO_WRITE(RW, LOW);
    1db6:	8a e0       	ldi	r24, 0x0A	; 10
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(data, 4)) {DIO_WRITE(D4, HIGH);}else{DIO_WRITE(D4, LOW);}
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ef 59       	subi	r30, 0x9F	; 159
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 81       	ld	r24, Z
    1dc6:	82 95       	swap	r24
    1dc8:	8f 70       	andi	r24, 0x0F	; 15
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	81 70       	andi	r24, 0x01	; 1
    1dd0:	90 70       	andi	r25, 0x00	; 0
    1dd2:	88 23       	and	r24, r24
    1dd4:	29 f0       	breq	.+10     	; 0x1de0 <lcd_send_ch+0x54>
    1dd6:	84 e0       	ldi	r24, 0x04	; 4
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    1dde:	04 c0       	rjmp	.+8      	; 0x1de8 <lcd_send_ch+0x5c>
    1de0:	84 e0       	ldi	r24, 0x04	; 4
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(data, 5)) {DIO_WRITE(D5, HIGH);}else {DIO_WRITE(D5, LOW);}
    1de8:	fe 01       	movw	r30, r28
    1dea:	ef 59       	subi	r30, 0x9F	; 159
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 81       	ld	r24, Z
    1df0:	82 95       	swap	r24
    1df2:	86 95       	lsr	r24
    1df4:	87 70       	andi	r24, 0x07	; 7
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	81 70       	andi	r24, 0x01	; 1
    1dfc:	90 70       	andi	r25, 0x00	; 0
    1dfe:	88 23       	and	r24, r24
    1e00:	29 f0       	breq	.+10     	; 0x1e0c <lcd_send_ch+0x80>
    1e02:	85 e0       	ldi	r24, 0x05	; 5
    1e04:	61 e0       	ldi	r22, 0x01	; 1
    1e06:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    1e0a:	04 c0       	rjmp	.+8      	; 0x1e14 <lcd_send_ch+0x88>
    1e0c:	85 e0       	ldi	r24, 0x05	; 5
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(data, 6)) {DIO_WRITE(D6, HIGH);}else {DIO_WRITE(D6, LOW);}
    1e14:	fe 01       	movw	r30, r28
    1e16:	ef 59       	subi	r30, 0x9F	; 159
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 81       	ld	r24, Z
    1e1c:	82 95       	swap	r24
    1e1e:	86 95       	lsr	r24
    1e20:	86 95       	lsr	r24
    1e22:	83 70       	andi	r24, 0x03	; 3
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	81 70       	andi	r24, 0x01	; 1
    1e2a:	90 70       	andi	r25, 0x00	; 0
    1e2c:	88 23       	and	r24, r24
    1e2e:	29 f0       	breq	.+10     	; 0x1e3a <lcd_send_ch+0xae>
    1e30:	86 e0       	ldi	r24, 0x06	; 6
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    1e38:	04 c0       	rjmp	.+8      	; 0x1e42 <lcd_send_ch+0xb6>
    1e3a:	86 e0       	ldi	r24, 0x06	; 6
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(data, 7)) {DIO_WRITE(D7, HIGH);}else {DIO_WRITE(D7, LOW);}
    1e42:	fe 01       	movw	r30, r28
    1e44:	ef 59       	subi	r30, 0x9F	; 159
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 23       	and	r24, r24
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <lcd_send_ch+0xcc>
    1e4e:	87 e0       	ldi	r24, 0x07	; 7
    1e50:	61 e0       	ldi	r22, 0x01	; 1
    1e52:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <lcd_send_ch+0xd4>
    1e58:	87 e0       	ldi	r24, 0x07	; 7
    1e5a:	60 e0       	ldi	r22, 0x00	; 0
    1e5c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	DIO_WRITE(E, HIGH);
    1e60:	8b e0       	ldi	r24, 0x0B	; 11
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e3 5a       	subi	r30, 0xA3	; 163
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 e2       	ldi	r26, 0x20	; 32
    1e74:	b1 e4       	ldi	r27, 0x41	; 65
    1e76:	80 83       	st	Z, r24
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	a2 83       	std	Z+2, r26	; 0x02
    1e7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e7e:	8e 01       	movw	r16, r28
    1e80:	07 5a       	subi	r16, 0xA7	; 167
    1e82:	1f 4f       	sbci	r17, 0xFF	; 255
    1e84:	fe 01       	movw	r30, r28
    1e86:	e3 5a       	subi	r30, 0xA3	; 163
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	60 81       	ld	r22, Z
    1e8c:	71 81       	ldd	r23, Z+1	; 0x01
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	2b ea       	ldi	r18, 0xAB	; 171
    1e94:	3a ea       	ldi	r19, 0xAA	; 170
    1e96:	4a ea       	ldi	r20, 0xAA	; 170
    1e98:	50 e4       	ldi	r21, 0x40	; 64
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	80 83       	st	Z, r24
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	a2 83       	std	Z+2, r26	; 0x02
    1eaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eac:	fe 01       	movw	r30, r28
    1eae:	e7 5a       	subi	r30, 0xA7	; 167
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	60 81       	ld	r22, Z
    1eb4:	71 81       	ldd	r23, Z+1	; 0x01
    1eb6:	82 81       	ldd	r24, Z+2	; 0x02
    1eb8:	93 81       	ldd	r25, Z+3	; 0x03
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e8       	ldi	r20, 0x80	; 128
    1ec0:	5f e3       	ldi	r21, 0x3F	; 63
    1ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec6:	88 23       	and	r24, r24
    1ec8:	34 f4       	brge	.+12     	; 0x1ed6 <lcd_send_ch+0x14a>
		__ticks = 1;
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e8 5a       	subi	r30, 0xA8	; 168
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	80 83       	st	Z, r24
    1ed4:	e0 c0       	rjmp	.+448    	; 0x2096 <lcd_send_ch+0x30a>
	else if (__tmp > 255)
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e7 5a       	subi	r30, 0xA7	; 167
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4f e7       	ldi	r20, 0x7F	; 127
    1eea:	53 e4       	ldi	r21, 0x43	; 67
    1eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef0:	18 16       	cp	r1, r24
    1ef2:	0c f0       	brlt	.+2      	; 0x1ef6 <lcd_send_ch+0x16a>
    1ef4:	c0 c0       	rjmp	.+384    	; 0x2076 <lcd_send_ch+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	e3 5a       	subi	r30, 0xA3	; 163
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a e7       	ldi	r20, 0x7A	; 122
    1f0a:	54 e4       	ldi	r21, 0x44	; 68
    1f0c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	fe 01       	movw	r30, r28
    1f16:	ec 5a       	subi	r30, 0xAC	; 172
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 83       	st	Z, r24
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	a2 83       	std	Z+2, r26	; 0x02
    1f20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f22:	8e 01       	movw	r16, r28
    1f24:	00 5b       	subi	r16, 0xB0	; 176
    1f26:	1f 4f       	sbci	r17, 0xFF	; 255
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ec 5a       	subi	r30, 0xAC	; 172
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a e7       	ldi	r20, 0x7A	; 122
    1f3c:	55 e4       	ldi	r21, 0x45	; 69
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	f8 01       	movw	r30, r16
    1f48:	80 83       	st	Z, r24
    1f4a:	91 83       	std	Z+1, r25	; 0x01
    1f4c:	a2 83       	std	Z+2, r26	; 0x02
    1f4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f50:	fe 01       	movw	r30, r28
    1f52:	e0 5b       	subi	r30, 0xB0	; 176
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	60 81       	ld	r22, Z
    1f58:	71 81       	ldd	r23, Z+1	; 0x01
    1f5a:	82 81       	ldd	r24, Z+2	; 0x02
    1f5c:	93 81       	ldd	r25, Z+3	; 0x03
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	44 f4       	brge	.+16     	; 0x1f7e <lcd_send_ch+0x1f2>
		__ticks = 1;
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e2 5b       	subi	r30, 0xB2	; 178
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	80 83       	st	Z, r24
    1f7c:	64 c0       	rjmp	.+200    	; 0x2046 <lcd_send_ch+0x2ba>
	else if (__tmp > 65535)
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e0 5b       	subi	r30, 0xB0	; 176
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	3f ef       	ldi	r19, 0xFF	; 255
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	57 e4       	ldi	r21, 0x47	; 71
    1f94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f98:	18 16       	cp	r1, r24
    1f9a:	0c f0       	brlt	.+2      	; 0x1f9e <lcd_send_ch+0x212>
    1f9c:	43 c0       	rjmp	.+134    	; 0x2024 <lcd_send_ch+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	ec 5a       	subi	r30, 0xAC	; 172
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	60 81       	ld	r22, Z
    1fa6:	71 81       	ldd	r23, Z+1	; 0x01
    1fa8:	82 81       	ldd	r24, Z+2	; 0x02
    1faa:	93 81       	ldd	r25, Z+3	; 0x03
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	8e 01       	movw	r16, r28
    1fbe:	02 5b       	subi	r16, 0xB2	; 178
    1fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	f8 01       	movw	r30, r16
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	80 83       	st	Z, r24
    1fd4:	1f c0       	rjmp	.+62     	; 0x2014 <lcd_send_ch+0x288>
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e4 5b       	subi	r30, 0xB4	; 180
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	80 e9       	ldi	r24, 0x90	; 144
    1fde:	91 e0       	ldi	r25, 0x01	; 1
    1fe0:	91 83       	std	Z+1, r25	; 0x01
    1fe2:	80 83       	st	Z, r24
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e4 5b       	subi	r30, 0xB4	; 180
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 81       	ld	r24, Z
    1fec:	91 81       	ldd	r25, Z+1	; 0x01
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <lcd_send_ch+0x262>
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e4 5b       	subi	r30, 0xB4	; 180
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	91 83       	std	Z+1, r25	; 0x01
    1ffa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	de 01       	movw	r26, r28
    1ffe:	a2 5b       	subi	r26, 0xB2	; 178
    2000:	bf 4f       	sbci	r27, 0xFF	; 255
    2002:	fe 01       	movw	r30, r28
    2004:	e2 5b       	subi	r30, 0xB2	; 178
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 81       	ld	r24, Z
    200a:	91 81       	ldd	r25, Z+1	; 0x01
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	11 96       	adiw	r26, 0x01	; 1
    2010:	9c 93       	st	X, r25
    2012:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2014:	fe 01       	movw	r30, r28
    2016:	e2 5b       	subi	r30, 0xB2	; 178
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	91 81       	ldd	r25, Z+1	; 0x01
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	d1 f6       	brne	.-76     	; 0x1fd6 <lcd_send_ch+0x24a>
    2022:	4b c0       	rjmp	.+150    	; 0x20ba <lcd_send_ch+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2024:	8e 01       	movw	r16, r28
    2026:	02 5b       	subi	r16, 0xB2	; 178
    2028:	1f 4f       	sbci	r17, 0xFF	; 255
    202a:	fe 01       	movw	r30, r28
    202c:	e0 5b       	subi	r30, 0xB0	; 176
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	f8 01       	movw	r30, r16
    2042:	91 83       	std	Z+1, r25	; 0x01
    2044:	80 83       	st	Z, r24
    2046:	de 01       	movw	r26, r28
    2048:	a6 5b       	subi	r26, 0xB6	; 182
    204a:	bf 4f       	sbci	r27, 0xFF	; 255
    204c:	fe 01       	movw	r30, r28
    204e:	e2 5b       	subi	r30, 0xB2	; 178
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	80 81       	ld	r24, Z
    2054:	91 81       	ldd	r25, Z+1	; 0x01
    2056:	11 96       	adiw	r26, 0x01	; 1
    2058:	9c 93       	st	X, r25
    205a:	8e 93       	st	-X, r24
    205c:	fe 01       	movw	r30, r28
    205e:	e6 5b       	subi	r30, 0xB6	; 182
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 81       	ld	r24, Z
    2064:	91 81       	ldd	r25, Z+1	; 0x01
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <lcd_send_ch+0x2da>
    206a:	fe 01       	movw	r30, r28
    206c:	e6 5b       	subi	r30, 0xB6	; 182
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	91 83       	std	Z+1, r25	; 0x01
    2072:	80 83       	st	Z, r24
    2074:	22 c0       	rjmp	.+68     	; 0x20ba <lcd_send_ch+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2076:	8e 01       	movw	r16, r28
    2078:	08 5a       	subi	r16, 0xA8	; 168
    207a:	1f 4f       	sbci	r17, 0xFF	; 255
    207c:	fe 01       	movw	r30, r28
    207e:	e7 5a       	subi	r30, 0xA7	; 167
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	60 81       	ld	r22, Z
    2084:	71 81       	ldd	r23, Z+1	; 0x01
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	f8 01       	movw	r30, r16
    2094:	80 83       	st	Z, r24
    2096:	de 01       	movw	r26, r28
    2098:	a7 5b       	subi	r26, 0xB7	; 183
    209a:	bf 4f       	sbci	r27, 0xFF	; 255
    209c:	fe 01       	movw	r30, r28
    209e:	e8 5a       	subi	r30, 0xA8	; 168
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 81       	ld	r24, Z
    20a4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20a6:	fe 01       	movw	r30, r28
    20a8:	e7 5b       	subi	r30, 0xB7	; 183
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 81       	ld	r24, Z
    20ae:	8a 95       	dec	r24
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <lcd_send_ch+0x322>
    20b2:	fe 01       	movw	r30, r28
    20b4:	e7 5b       	subi	r30, 0xB7	; 183
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 83       	st	Z, r24
	_delay_us(10);
	DIO_WRITE(E, LOW);
    20ba:	8b e0       	ldi	r24, 0x0B	; 11
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    20c2:	fe 01       	movw	r30, r28
    20c4:	eb 5b       	subi	r30, 0xBB	; 187
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a8 e4       	ldi	r26, 0x48	; 72
    20ce:	b3 e4       	ldi	r27, 0x43	; 67
    20d0:	80 83       	st	Z, r24
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	a2 83       	std	Z+2, r26	; 0x02
    20d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20d8:	8e 01       	movw	r16, r28
    20da:	0f 5b       	subi	r16, 0xBF	; 191
    20dc:	1f 4f       	sbci	r17, 0xFF	; 255
    20de:	fe 01       	movw	r30, r28
    20e0:	eb 5b       	subi	r30, 0xBB	; 187
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	60 81       	ld	r22, Z
    20e6:	71 81       	ldd	r23, Z+1	; 0x01
    20e8:	82 81       	ldd	r24, Z+2	; 0x02
    20ea:	93 81       	ldd	r25, Z+3	; 0x03
    20ec:	2b ea       	ldi	r18, 0xAB	; 171
    20ee:	3a ea       	ldi	r19, 0xAA	; 170
    20f0:	4a ea       	ldi	r20, 0xAA	; 170
    20f2:	50 e4       	ldi	r21, 0x40	; 64
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	f8 01       	movw	r30, r16
    20fe:	80 83       	st	Z, r24
    2100:	91 83       	std	Z+1, r25	; 0x01
    2102:	a2 83       	std	Z+2, r26	; 0x02
    2104:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2106:	fe 01       	movw	r30, r28
    2108:	ef 5b       	subi	r30, 0xBF	; 191
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	60 81       	ld	r22, Z
    210e:	71 81       	ldd	r23, Z+1	; 0x01
    2110:	82 81       	ldd	r24, Z+2	; 0x02
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	34 f4       	brge	.+12     	; 0x2130 <lcd_send_ch+0x3a4>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	fe 01       	movw	r30, r28
    2128:	e0 5c       	subi	r30, 0xC0	; 192
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	80 83       	st	Z, r24
    212e:	9d c0       	rjmp	.+314    	; 0x226a <lcd_send_ch+0x4de>
	else if (__tmp > 255)
    2130:	fe 01       	movw	r30, r28
    2132:	ef 5b       	subi	r30, 0xBF	; 191
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	60 81       	ld	r22, Z
    2138:	71 81       	ldd	r23, Z+1	; 0x01
    213a:	82 81       	ldd	r24, Z+2	; 0x02
    213c:	93 81       	ldd	r25, Z+3	; 0x03
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4f e7       	ldi	r20, 0x7F	; 127
    2144:	53 e4       	ldi	r21, 0x43	; 67
    2146:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    214a:	18 16       	cp	r1, r24
    214c:	0c f0       	brlt	.+2      	; 0x2150 <lcd_send_ch+0x3c4>
    214e:	7e c0       	rjmp	.+252    	; 0x224c <lcd_send_ch+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    2150:	fe 01       	movw	r30, r28
    2152:	eb 5b       	subi	r30, 0xBB	; 187
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	93 81       	ldd	r25, Z+3	; 0x03
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	4a e7       	ldi	r20, 0x7A	; 122
    2164:	54 e4       	ldi	r21, 0x44	; 68
    2166:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	8c af       	std	Y+60, r24	; 0x3c
    2170:	9d af       	std	Y+61, r25	; 0x3d
    2172:	ae af       	std	Y+62, r26	; 0x3e
    2174:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2176:	6c ad       	ldd	r22, Y+60	; 0x3c
    2178:	7d ad       	ldd	r23, Y+61	; 0x3d
    217a:	8e ad       	ldd	r24, Y+62	; 0x3e
    217c:	9f ad       	ldd	r25, Y+63	; 0x3f
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	4a e7       	ldi	r20, 0x7A	; 122
    2184:	55 e4       	ldi	r21, 0x45	; 69
    2186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	88 af       	std	Y+56, r24	; 0x38
    2190:	99 af       	std	Y+57, r25	; 0x39
    2192:	aa af       	std	Y+58, r26	; 0x3a
    2194:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2196:	68 ad       	ldd	r22, Y+56	; 0x38
    2198:	79 ad       	ldd	r23, Y+57	; 0x39
    219a:	8a ad       	ldd	r24, Y+58	; 0x3a
    219c:	9b ad       	ldd	r25, Y+59	; 0x3b
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e8       	ldi	r20, 0x80	; 128
    21a4:	5f e3       	ldi	r21, 0x3F	; 63
    21a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21aa:	88 23       	and	r24, r24
    21ac:	2c f4       	brge	.+10     	; 0x21b8 <lcd_send_ch+0x42c>
		__ticks = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	9f ab       	std	Y+55, r25	; 0x37
    21b4:	8e ab       	std	Y+54, r24	; 0x36
    21b6:	3f c0       	rjmp	.+126    	; 0x2236 <lcd_send_ch+0x4aa>
	else if (__tmp > 65535)
    21b8:	68 ad       	ldd	r22, Y+56	; 0x38
    21ba:	79 ad       	ldd	r23, Y+57	; 0x39
    21bc:	8a ad       	ldd	r24, Y+58	; 0x3a
    21be:	9b ad       	ldd	r25, Y+59	; 0x3b
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	3f ef       	ldi	r19, 0xFF	; 255
    21c4:	4f e7       	ldi	r20, 0x7F	; 127
    21c6:	57 e4       	ldi	r21, 0x47	; 71
    21c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21cc:	18 16       	cp	r1, r24
    21ce:	4c f5       	brge	.+82     	; 0x2222 <lcd_send_ch+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d0:	6c ad       	ldd	r22, Y+60	; 0x3c
    21d2:	7d ad       	ldd	r23, Y+61	; 0x3d
    21d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    21d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e2       	ldi	r20, 0x20	; 32
    21de:	51 e4       	ldi	r21, 0x41	; 65
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9f ab       	std	Y+55, r25	; 0x37
    21f6:	8e ab       	std	Y+54, r24	; 0x36
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <lcd_send_ch+0x48c>
    21fa:	80 e9       	ldi	r24, 0x90	; 144
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	9d ab       	std	Y+53, r25	; 0x35
    2200:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2202:	8c a9       	ldd	r24, Y+52	; 0x34
    2204:	9d a9       	ldd	r25, Y+53	; 0x35
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <lcd_send_ch+0x47a>
    220a:	9d ab       	std	Y+53, r25	; 0x35
    220c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220e:	8e a9       	ldd	r24, Y+54	; 0x36
    2210:	9f a9       	ldd	r25, Y+55	; 0x37
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	9f ab       	std	Y+55, r25	; 0x37
    2216:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2218:	8e a9       	ldd	r24, Y+54	; 0x36
    221a:	9f a9       	ldd	r25, Y+55	; 0x37
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	69 f7       	brne	.-38     	; 0x21fa <lcd_send_ch+0x46e>
    2220:	2d c0       	rjmp	.+90     	; 0x227c <lcd_send_ch+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2222:	68 ad       	ldd	r22, Y+56	; 0x38
    2224:	79 ad       	ldd	r23, Y+57	; 0x39
    2226:	8a ad       	ldd	r24, Y+58	; 0x3a
    2228:	9b ad       	ldd	r25, Y+59	; 0x3b
    222a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	9f ab       	std	Y+55, r25	; 0x37
    2234:	8e ab       	std	Y+54, r24	; 0x36
    2236:	8e a9       	ldd	r24, Y+54	; 0x36
    2238:	9f a9       	ldd	r25, Y+55	; 0x37
    223a:	9b ab       	std	Y+51, r25	; 0x33
    223c:	8a ab       	std	Y+50, r24	; 0x32
    223e:	8a a9       	ldd	r24, Y+50	; 0x32
    2240:	9b a9       	ldd	r25, Y+51	; 0x33
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <lcd_send_ch+0x4b6>
    2246:	9b ab       	std	Y+51, r25	; 0x33
    2248:	8a ab       	std	Y+50, r24	; 0x32
    224a:	18 c0       	rjmp	.+48     	; 0x227c <lcd_send_ch+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    224c:	fe 01       	movw	r30, r28
    224e:	ef 5b       	subi	r30, 0xBF	; 191
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	fe 01       	movw	r30, r28
    2264:	e0 5c       	subi	r30, 0xC0	; 192
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 83       	st	Z, r24
    226a:	fe 01       	movw	r30, r28
    226c:	e0 5c       	subi	r30, 0xC0	; 192
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2274:	89 a9       	ldd	r24, Y+49	; 0x31
    2276:	8a 95       	dec	r24
    2278:	f1 f7       	brne	.-4      	; 0x2276 <lcd_send_ch+0x4ea>
    227a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	if (GET_BIT(data, 0)) {DIO_WRITE(D4, HIGH);}else {DIO_WRITE(D4, LOW);}
    227c:	fe 01       	movw	r30, r28
    227e:	ef 59       	subi	r30, 0x9F	; 159
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	81 70       	andi	r24, 0x01	; 1
    228a:	90 70       	andi	r25, 0x00	; 0
    228c:	88 23       	and	r24, r24
    228e:	29 f0       	breq	.+10     	; 0x229a <lcd_send_ch+0x50e>
    2290:	84 e0       	ldi	r24, 0x04	; 4
    2292:	61 e0       	ldi	r22, 0x01	; 1
    2294:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    2298:	04 c0       	rjmp	.+8      	; 0x22a2 <lcd_send_ch+0x516>
    229a:	84 e0       	ldi	r24, 0x04	; 4
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(data, 1)) {DIO_WRITE(D5, HIGH);}else {DIO_WRITE(D5, LOW);}
    22a2:	fe 01       	movw	r30, r28
    22a4:	ef 59       	subi	r30, 0x9F	; 159
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	86 95       	lsr	r24
    22ac:	88 2f       	mov	r24, r24
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	81 70       	andi	r24, 0x01	; 1
    22b2:	90 70       	andi	r25, 0x00	; 0
    22b4:	88 23       	and	r24, r24
    22b6:	29 f0       	breq	.+10     	; 0x22c2 <lcd_send_ch+0x536>
    22b8:	85 e0       	ldi	r24, 0x05	; 5
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    22c0:	04 c0       	rjmp	.+8      	; 0x22ca <lcd_send_ch+0x53e>
    22c2:	85 e0       	ldi	r24, 0x05	; 5
    22c4:	60 e0       	ldi	r22, 0x00	; 0
    22c6:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(data, 2)) {DIO_WRITE(D6, HIGH);}else {DIO_WRITE(D6, LOW);}
    22ca:	fe 01       	movw	r30, r28
    22cc:	ef 59       	subi	r30, 0x9F	; 159
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 81       	ld	r24, Z
    22d2:	86 95       	lsr	r24
    22d4:	86 95       	lsr	r24
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	81 70       	andi	r24, 0x01	; 1
    22dc:	90 70       	andi	r25, 0x00	; 0
    22de:	88 23       	and	r24, r24
    22e0:	29 f0       	breq	.+10     	; 0x22ec <lcd_send_ch+0x560>
    22e2:	86 e0       	ldi	r24, 0x06	; 6
    22e4:	61 e0       	ldi	r22, 0x01	; 1
    22e6:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    22ea:	04 c0       	rjmp	.+8      	; 0x22f4 <lcd_send_ch+0x568>
    22ec:	86 e0       	ldi	r24, 0x06	; 6
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(data, 3)) {DIO_WRITE(D7, HIGH);}else {DIO_WRITE(D7, LOW);}
    22f4:	fe 01       	movw	r30, r28
    22f6:	ef 59       	subi	r30, 0x9F	; 159
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	80 81       	ld	r24, Z
    22fc:	86 95       	lsr	r24
    22fe:	86 95       	lsr	r24
    2300:	86 95       	lsr	r24
    2302:	88 2f       	mov	r24, r24
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	81 70       	andi	r24, 0x01	; 1
    2308:	90 70       	andi	r25, 0x00	; 0
    230a:	88 23       	and	r24, r24
    230c:	29 f0       	breq	.+10     	; 0x2318 <lcd_send_ch+0x58c>
    230e:	87 e0       	ldi	r24, 0x07	; 7
    2310:	61 e0       	ldi	r22, 0x01	; 1
    2312:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    2316:	04 c0       	rjmp	.+8      	; 0x2320 <lcd_send_ch+0x594>
    2318:	87 e0       	ldi	r24, 0x07	; 7
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	DIO_WRITE(E, HIGH);
    2320:	8b e0       	ldi	r24, 0x0B	; 11
    2322:	61 e0       	ldi	r22, 0x01	; 1
    2324:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	a0 e2       	ldi	r26, 0x20	; 32
    232e:	b1 e4       	ldi	r27, 0x41	; 65
    2330:	8d a7       	std	Y+45, r24	; 0x2d
    2332:	9e a7       	std	Y+46, r25	; 0x2e
    2334:	af a7       	std	Y+47, r26	; 0x2f
    2336:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2338:	6d a5       	ldd	r22, Y+45	; 0x2d
    233a:	7e a5       	ldd	r23, Y+46	; 0x2e
    233c:	8f a5       	ldd	r24, Y+47	; 0x2f
    233e:	98 a9       	ldd	r25, Y+48	; 0x30
    2340:	2b ea       	ldi	r18, 0xAB	; 171
    2342:	3a ea       	ldi	r19, 0xAA	; 170
    2344:	4a ea       	ldi	r20, 0xAA	; 170
    2346:	50 e4       	ldi	r21, 0x40	; 64
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	89 a7       	std	Y+41, r24	; 0x29
    2352:	9a a7       	std	Y+42, r25	; 0x2a
    2354:	ab a7       	std	Y+43, r26	; 0x2b
    2356:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2358:	69 a5       	ldd	r22, Y+41	; 0x29
    235a:	7a a5       	ldd	r23, Y+42	; 0x2a
    235c:	8b a5       	ldd	r24, Y+43	; 0x2b
    235e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e8       	ldi	r20, 0x80	; 128
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	1c f4       	brge	.+6      	; 0x2376 <lcd_send_ch+0x5ea>
		__ticks = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	88 a7       	std	Y+40, r24	; 0x28
    2374:	91 c0       	rjmp	.+290    	; 0x2498 <lcd_send_ch+0x70c>
	else if (__tmp > 255)
    2376:	69 a5       	ldd	r22, Y+41	; 0x29
    2378:	7a a5       	ldd	r23, Y+42	; 0x2a
    237a:	8b a5       	ldd	r24, Y+43	; 0x2b
    237c:	9c a5       	ldd	r25, Y+44	; 0x2c
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	53 e4       	ldi	r21, 0x43	; 67
    2386:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	0c f0       	brlt	.+2      	; 0x2390 <lcd_send_ch+0x604>
    238e:	7b c0       	rjmp	.+246    	; 0x2486 <lcd_send_ch+0x6fa>
	{
		_delay_ms(__us / 1000.0);
    2390:	6d a5       	ldd	r22, Y+45	; 0x2d
    2392:	7e a5       	ldd	r23, Y+46	; 0x2e
    2394:	8f a5       	ldd	r24, Y+47	; 0x2f
    2396:	98 a9       	ldd	r25, Y+48	; 0x30
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	4a e7       	ldi	r20, 0x7A	; 122
    239e:	54 e4       	ldi	r21, 0x44	; 68
    23a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	8c a3       	std	Y+36, r24	; 0x24
    23aa:	9d a3       	std	Y+37, r25	; 0x25
    23ac:	ae a3       	std	Y+38, r26	; 0x26
    23ae:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	6c a1       	ldd	r22, Y+36	; 0x24
    23b2:	7d a1       	ldd	r23, Y+37	; 0x25
    23b4:	8e a1       	ldd	r24, Y+38	; 0x26
    23b6:	9f a1       	ldd	r25, Y+39	; 0x27
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	4a e7       	ldi	r20, 0x7A	; 122
    23be:	55 e4       	ldi	r21, 0x45	; 69
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	88 a3       	std	Y+32, r24	; 0x20
    23ca:	99 a3       	std	Y+33, r25	; 0x21
    23cc:	aa a3       	std	Y+34, r26	; 0x22
    23ce:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    23d0:	68 a1       	ldd	r22, Y+32	; 0x20
    23d2:	79 a1       	ldd	r23, Y+33	; 0x21
    23d4:	8a a1       	ldd	r24, Y+34	; 0x22
    23d6:	9b a1       	ldd	r25, Y+35	; 0x23
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e8       	ldi	r20, 0x80	; 128
    23de:	5f e3       	ldi	r21, 0x3F	; 63
    23e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e4:	88 23       	and	r24, r24
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <lcd_send_ch+0x666>
		__ticks = 1;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9f 8f       	std	Y+31, r25	; 0x1f
    23ee:	8e 8f       	std	Y+30, r24	; 0x1e
    23f0:	3f c0       	rjmp	.+126    	; 0x2470 <lcd_send_ch+0x6e4>
	else if (__tmp > 65535)
    23f2:	68 a1       	ldd	r22, Y+32	; 0x20
    23f4:	79 a1       	ldd	r23, Y+33	; 0x21
    23f6:	8a a1       	ldd	r24, Y+34	; 0x22
    23f8:	9b a1       	ldd	r25, Y+35	; 0x23
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	3f ef       	ldi	r19, 0xFF	; 255
    23fe:	4f e7       	ldi	r20, 0x7F	; 127
    2400:	57 e4       	ldi	r21, 0x47	; 71
    2402:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2406:	18 16       	cp	r1, r24
    2408:	4c f5       	brge	.+82     	; 0x245c <lcd_send_ch+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240a:	6c a1       	ldd	r22, Y+36	; 0x24
    240c:	7d a1       	ldd	r23, Y+37	; 0x25
    240e:	8e a1       	ldd	r24, Y+38	; 0x26
    2410:	9f a1       	ldd	r25, Y+39	; 0x27
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e2       	ldi	r20, 0x20	; 32
    2418:	51 e4       	ldi	r21, 0x41	; 65
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9f 8f       	std	Y+31, r25	; 0x1f
    2430:	8e 8f       	std	Y+30, r24	; 0x1e
    2432:	0f c0       	rjmp	.+30     	; 0x2452 <lcd_send_ch+0x6c6>
    2434:	80 e9       	ldi	r24, 0x90	; 144
    2436:	91 e0       	ldi	r25, 0x01	; 1
    2438:	9d 8f       	std	Y+29, r25	; 0x1d
    243a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    243c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    243e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <lcd_send_ch+0x6b4>
    2444:	9d 8f       	std	Y+29, r25	; 0x1d
    2446:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2448:	8e 8d       	ldd	r24, Y+30	; 0x1e
    244a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	9f 8f       	std	Y+31, r25	; 0x1f
    2450:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2452:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2454:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	69 f7       	brne	.-38     	; 0x2434 <lcd_send_ch+0x6a8>
    245a:	24 c0       	rjmp	.+72     	; 0x24a4 <lcd_send_ch+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245c:	68 a1       	ldd	r22, Y+32	; 0x20
    245e:	79 a1       	ldd	r23, Y+33	; 0x21
    2460:	8a a1       	ldd	r24, Y+34	; 0x22
    2462:	9b a1       	ldd	r25, Y+35	; 0x23
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9f 8f       	std	Y+31, r25	; 0x1f
    246e:	8e 8f       	std	Y+30, r24	; 0x1e
    2470:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2472:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2474:	9b 8f       	std	Y+27, r25	; 0x1b
    2476:	8a 8f       	std	Y+26, r24	; 0x1a
    2478:	8a 8d       	ldd	r24, Y+26	; 0x1a
    247a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <lcd_send_ch+0x6f0>
    2480:	9b 8f       	std	Y+27, r25	; 0x1b
    2482:	8a 8f       	std	Y+26, r24	; 0x1a
    2484:	0f c0       	rjmp	.+30     	; 0x24a4 <lcd_send_ch+0x718>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2486:	69 a5       	ldd	r22, Y+41	; 0x29
    2488:	7a a5       	ldd	r23, Y+42	; 0x2a
    248a:	8b a5       	ldd	r24, Y+43	; 0x2b
    248c:	9c a5       	ldd	r25, Y+44	; 0x2c
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	88 a7       	std	Y+40, r24	; 0x28
    2498:	88 a5       	ldd	r24, Y+40	; 0x28
    249a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    249c:	89 8d       	ldd	r24, Y+25	; 0x19
    249e:	8a 95       	dec	r24
    24a0:	f1 f7       	brne	.-4      	; 0x249e <lcd_send_ch+0x712>
    24a2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_WRITE(E, LOW);
    24a4:	8b e0       	ldi	r24, 0x0B	; 11
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a8 e4       	ldi	r26, 0x48	; 72
    24b2:	b3 e4       	ldi	r27, 0x43	; 67
    24b4:	8d 8b       	std	Y+21, r24	; 0x15
    24b6:	9e 8b       	std	Y+22, r25	; 0x16
    24b8:	af 8b       	std	Y+23, r26	; 0x17
    24ba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24bc:	6d 89       	ldd	r22, Y+21	; 0x15
    24be:	7e 89       	ldd	r23, Y+22	; 0x16
    24c0:	8f 89       	ldd	r24, Y+23	; 0x17
    24c2:	98 8d       	ldd	r25, Y+24	; 0x18
    24c4:	2b ea       	ldi	r18, 0xAB	; 171
    24c6:	3a ea       	ldi	r19, 0xAA	; 170
    24c8:	4a ea       	ldi	r20, 0xAA	; 170
    24ca:	50 e4       	ldi	r21, 0x40	; 64
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	89 8b       	std	Y+17, r24	; 0x11
    24d6:	9a 8b       	std	Y+18, r25	; 0x12
    24d8:	ab 8b       	std	Y+19, r26	; 0x13
    24da:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24dc:	69 89       	ldd	r22, Y+17	; 0x11
    24de:	7a 89       	ldd	r23, Y+18	; 0x12
    24e0:	8b 89       	ldd	r24, Y+19	; 0x13
    24e2:	9c 89       	ldd	r25, Y+20	; 0x14
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	1c f4       	brge	.+6      	; 0x24fa <lcd_send_ch+0x76e>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	88 8b       	std	Y+16, r24	; 0x10
    24f8:	91 c0       	rjmp	.+290    	; 0x261c <lcd_send_ch+0x890>
	else if (__tmp > 255)
    24fa:	69 89       	ldd	r22, Y+17	; 0x11
    24fc:	7a 89       	ldd	r23, Y+18	; 0x12
    24fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2500:	9c 89       	ldd	r25, Y+20	; 0x14
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	53 e4       	ldi	r21, 0x43	; 67
    250a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	0c f0       	brlt	.+2      	; 0x2514 <lcd_send_ch+0x788>
    2512:	7b c0       	rjmp	.+246    	; 0x260a <lcd_send_ch+0x87e>
	{
		_delay_ms(__us / 1000.0);
    2514:	6d 89       	ldd	r22, Y+21	; 0x15
    2516:	7e 89       	ldd	r23, Y+22	; 0x16
    2518:	8f 89       	ldd	r24, Y+23	; 0x17
    251a:	98 8d       	ldd	r25, Y+24	; 0x18
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a e7       	ldi	r20, 0x7A	; 122
    2522:	54 e4       	ldi	r21, 0x44	; 68
    2524:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	8c 87       	std	Y+12, r24	; 0x0c
    252e:	9d 87       	std	Y+13, r25	; 0x0d
    2530:	ae 87       	std	Y+14, r26	; 0x0e
    2532:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	6c 85       	ldd	r22, Y+12	; 0x0c
    2536:	7d 85       	ldd	r23, Y+13	; 0x0d
    2538:	8e 85       	ldd	r24, Y+14	; 0x0e
    253a:	9f 85       	ldd	r25, Y+15	; 0x0f
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a e7       	ldi	r20, 0x7A	; 122
    2542:	55 e4       	ldi	r21, 0x45	; 69
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	88 87       	std	Y+8, r24	; 0x08
    254e:	99 87       	std	Y+9, r25	; 0x09
    2550:	aa 87       	std	Y+10, r26	; 0x0a
    2552:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2554:	68 85       	ldd	r22, Y+8	; 0x08
    2556:	79 85       	ldd	r23, Y+9	; 0x09
    2558:	8a 85       	ldd	r24, Y+10	; 0x0a
    255a:	9b 85       	ldd	r25, Y+11	; 0x0b
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <lcd_send_ch+0x7ea>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9f 83       	std	Y+7, r25	; 0x07
    2572:	8e 83       	std	Y+6, r24	; 0x06
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <lcd_send_ch+0x868>
	else if (__tmp > 65535)
    2576:	68 85       	ldd	r22, Y+8	; 0x08
    2578:	79 85       	ldd	r23, Y+9	; 0x09
    257a:	8a 85       	ldd	r24, Y+10	; 0x0a
    257c:	9b 85       	ldd	r25, Y+11	; 0x0b
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <lcd_send_ch+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2590:	7d 85       	ldd	r23, Y+13	; 0x0d
    2592:	8e 85       	ldd	r24, Y+14	; 0x0e
    2594:	9f 85       	ldd	r25, Y+15	; 0x0f
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9f 83       	std	Y+7, r25	; 0x07
    25b4:	8e 83       	std	Y+6, r24	; 0x06
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <lcd_send_ch+0x84a>
    25b8:	80 e9       	ldi	r24, 0x90	; 144
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	9d 83       	std	Y+5, r25	; 0x05
    25be:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25c0:	8c 81       	ldd	r24, Y+4	; 0x04
    25c2:	9d 81       	ldd	r25, Y+5	; 0x05
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <lcd_send_ch+0x838>
    25c8:	9d 83       	std	Y+5, r25	; 0x05
    25ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8e 81       	ldd	r24, Y+6	; 0x06
    25ce:	9f 81       	ldd	r25, Y+7	; 0x07
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9f 83       	std	Y+7, r25	; 0x07
    25d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8e 81       	ldd	r24, Y+6	; 0x06
    25d8:	9f 81       	ldd	r25, Y+7	; 0x07
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <lcd_send_ch+0x82c>
    25de:	24 c0       	rjmp	.+72     	; 0x2628 <lcd_send_ch+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	68 85       	ldd	r22, Y+8	; 0x08
    25e2:	79 85       	ldd	r23, Y+9	; 0x09
    25e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9f 83       	std	Y+7, r25	; 0x07
    25f2:	8e 83       	std	Y+6, r24	; 0x06
    25f4:	8e 81       	ldd	r24, Y+6	; 0x06
    25f6:	9f 81       	ldd	r25, Y+7	; 0x07
    25f8:	9b 83       	std	Y+3, r25	; 0x03
    25fa:	8a 83       	std	Y+2, r24	; 0x02
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <lcd_send_ch+0x874>
    2604:	9b 83       	std	Y+3, r25	; 0x03
    2606:	8a 83       	std	Y+2, r24	; 0x02
    2608:	0f c0       	rjmp	.+30     	; 0x2628 <lcd_send_ch+0x89c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    260a:	69 89       	ldd	r22, Y+17	; 0x11
    260c:	7a 89       	ldd	r23, Y+18	; 0x12
    260e:	8b 89       	ldd	r24, Y+19	; 0x13
    2610:	9c 89       	ldd	r25, Y+20	; 0x14
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	88 8b       	std	Y+16, r24	; 0x10
    261c:	88 89       	ldd	r24, Y+16	; 0x10
    261e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	8a 95       	dec	r24
    2624:	f1 f7       	brne	.-4      	; 0x2622 <lcd_send_ch+0x896>
    2626:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);

}
    2628:	cf 59       	subi	r28, 0x9F	; 159
    262a:	df 4f       	sbci	r29, 0xFF	; 255
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	1f 91       	pop	r17
    263c:	0f 91       	pop	r16
    263e:	08 95       	ret

00002640 <lcd_send_cmd>:
void lcd_send_cmd(unsigned char cmd) {
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	c1 56       	subi	r28, 0x61	; 97
    264e:	d0 40       	sbci	r29, 0x00	; 0
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	fe 01       	movw	r30, r28
    265c:	ef 59       	subi	r30, 0x9F	; 159
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 83       	st	Z, r24
	DIO_WRITE(RS, LOW);
    2662:	89 e0       	ldi	r24, 0x09	; 9
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	DIO_WRITE(RW, LOW);
    266a:	8a e0       	ldi	r24, 0x0A	; 10
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>

	if (GET_BIT(cmd, 4)) {DIO_WRITE(D4, HIGH);}else {DIO_WRITE(D4, LOW);}
    2672:	fe 01       	movw	r30, r28
    2674:	ef 59       	subi	r30, 0x9F	; 159
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	80 81       	ld	r24, Z
    267a:	82 95       	swap	r24
    267c:	8f 70       	andi	r24, 0x0F	; 15
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	81 70       	andi	r24, 0x01	; 1
    2684:	90 70       	andi	r25, 0x00	; 0
    2686:	88 23       	and	r24, r24
    2688:	29 f0       	breq	.+10     	; 0x2694 <lcd_send_cmd+0x54>
    268a:	84 e0       	ldi	r24, 0x04	; 4
    268c:	61 e0       	ldi	r22, 0x01	; 1
    268e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    2692:	04 c0       	rjmp	.+8      	; 0x269c <lcd_send_cmd+0x5c>
    2694:	84 e0       	ldi	r24, 0x04	; 4
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(cmd, 5)) {DIO_WRITE(D5, HIGH);}else {DIO_WRITE(D5, LOW);}
    269c:	fe 01       	movw	r30, r28
    269e:	ef 59       	subi	r30, 0x9F	; 159
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	80 81       	ld	r24, Z
    26a4:	82 95       	swap	r24
    26a6:	86 95       	lsr	r24
    26a8:	87 70       	andi	r24, 0x07	; 7
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	81 70       	andi	r24, 0x01	; 1
    26b0:	90 70       	andi	r25, 0x00	; 0
    26b2:	88 23       	and	r24, r24
    26b4:	29 f0       	breq	.+10     	; 0x26c0 <lcd_send_cmd+0x80>
    26b6:	85 e0       	ldi	r24, 0x05	; 5
    26b8:	61 e0       	ldi	r22, 0x01	; 1
    26ba:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <lcd_send_cmd+0x88>
    26c0:	85 e0       	ldi	r24, 0x05	; 5
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(cmd, 6)) {DIO_WRITE(D6, HIGH);}else {DIO_WRITE(D6, LOW);}
    26c8:	fe 01       	movw	r30, r28
    26ca:	ef 59       	subi	r30, 0x9F	; 159
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	80 81       	ld	r24, Z
    26d0:	82 95       	swap	r24
    26d2:	86 95       	lsr	r24
    26d4:	86 95       	lsr	r24
    26d6:	83 70       	andi	r24, 0x03	; 3
    26d8:	88 2f       	mov	r24, r24
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	81 70       	andi	r24, 0x01	; 1
    26de:	90 70       	andi	r25, 0x00	; 0
    26e0:	88 23       	and	r24, r24
    26e2:	29 f0       	breq	.+10     	; 0x26ee <lcd_send_cmd+0xae>
    26e4:	86 e0       	ldi	r24, 0x06	; 6
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    26ec:	04 c0       	rjmp	.+8      	; 0x26f6 <lcd_send_cmd+0xb6>
    26ee:	86 e0       	ldi	r24, 0x06	; 6
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(cmd, 7)) {DIO_WRITE(D7, HIGH);}else {DIO_WRITE(D7, LOW);}
    26f6:	fe 01       	movw	r30, r28
    26f8:	ef 59       	subi	r30, 0x9F	; 159
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	88 23       	and	r24, r24
    2700:	2c f4       	brge	.+10     	; 0x270c <lcd_send_cmd+0xcc>
    2702:	87 e0       	ldi	r24, 0x07	; 7
    2704:	61 e0       	ldi	r22, 0x01	; 1
    2706:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    270a:	04 c0       	rjmp	.+8      	; 0x2714 <lcd_send_cmd+0xd4>
    270c:	87 e0       	ldi	r24, 0x07	; 7
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	DIO_WRITE(E, HIGH);
    2714:	8b e0       	ldi	r24, 0x0B	; 11
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    271c:	fe 01       	movw	r30, r28
    271e:	e3 5a       	subi	r30, 0xA3	; 163
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	a0 e2       	ldi	r26, 0x20	; 32
    2728:	b1 e4       	ldi	r27, 0x41	; 65
    272a:	80 83       	st	Z, r24
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	a2 83       	std	Z+2, r26	; 0x02
    2730:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2732:	8e 01       	movw	r16, r28
    2734:	07 5a       	subi	r16, 0xA7	; 167
    2736:	1f 4f       	sbci	r17, 0xFF	; 255
    2738:	fe 01       	movw	r30, r28
    273a:	e3 5a       	subi	r30, 0xA3	; 163
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	60 81       	ld	r22, Z
    2740:	71 81       	ldd	r23, Z+1	; 0x01
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	2b ea       	ldi	r18, 0xAB	; 171
    2748:	3a ea       	ldi	r19, 0xAA	; 170
    274a:	4a ea       	ldi	r20, 0xAA	; 170
    274c:	50 e4       	ldi	r21, 0x40	; 64
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	f8 01       	movw	r30, r16
    2758:	80 83       	st	Z, r24
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	a2 83       	std	Z+2, r26	; 0x02
    275e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2760:	fe 01       	movw	r30, r28
    2762:	e7 5a       	subi	r30, 0xA7	; 167
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	60 81       	ld	r22, Z
    2768:	71 81       	ldd	r23, Z+1	; 0x01
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	34 f4       	brge	.+12     	; 0x278a <lcd_send_cmd+0x14a>
		__ticks = 1;
    277e:	fe 01       	movw	r30, r28
    2780:	e8 5a       	subi	r30, 0xA8	; 168
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	80 83       	st	Z, r24
    2788:	e0 c0       	rjmp	.+448    	; 0x294a <lcd_send_cmd+0x30a>
	else if (__tmp > 255)
    278a:	fe 01       	movw	r30, r28
    278c:	e7 5a       	subi	r30, 0xA7	; 167
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	60 81       	ld	r22, Z
    2792:	71 81       	ldd	r23, Z+1	; 0x01
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	4f e7       	ldi	r20, 0x7F	; 127
    279e:	53 e4       	ldi	r21, 0x43	; 67
    27a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a4:	18 16       	cp	r1, r24
    27a6:	0c f0       	brlt	.+2      	; 0x27aa <lcd_send_cmd+0x16a>
    27a8:	c0 c0       	rjmp	.+384    	; 0x292a <lcd_send_cmd+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    27aa:	fe 01       	movw	r30, r28
    27ac:	e3 5a       	subi	r30, 0xA3	; 163
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	60 81       	ld	r22, Z
    27b2:	71 81       	ldd	r23, Z+1	; 0x01
    27b4:	82 81       	ldd	r24, Z+2	; 0x02
    27b6:	93 81       	ldd	r25, Z+3	; 0x03
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	4a e7       	ldi	r20, 0x7A	; 122
    27be:	54 e4       	ldi	r21, 0x44	; 68
    27c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	fe 01       	movw	r30, r28
    27ca:	ec 5a       	subi	r30, 0xAC	; 172
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 83       	st	Z, r24
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	a2 83       	std	Z+2, r26	; 0x02
    27d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d6:	8e 01       	movw	r16, r28
    27d8:	00 5b       	subi	r16, 0xB0	; 176
    27da:	1f 4f       	sbci	r17, 0xFF	; 255
    27dc:	fe 01       	movw	r30, r28
    27de:	ec 5a       	subi	r30, 0xAC	; 172
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	60 81       	ld	r22, Z
    27e4:	71 81       	ldd	r23, Z+1	; 0x01
    27e6:	82 81       	ldd	r24, Z+2	; 0x02
    27e8:	93 81       	ldd	r25, Z+3	; 0x03
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4a e7       	ldi	r20, 0x7A	; 122
    27f0:	55 e4       	ldi	r21, 0x45	; 69
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	f8 01       	movw	r30, r16
    27fc:	80 83       	st	Z, r24
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	a2 83       	std	Z+2, r26	; 0x02
    2802:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2804:	fe 01       	movw	r30, r28
    2806:	e0 5b       	subi	r30, 0xB0	; 176
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    281e:	88 23       	and	r24, r24
    2820:	44 f4       	brge	.+16     	; 0x2832 <lcd_send_cmd+0x1f2>
		__ticks = 1;
    2822:	fe 01       	movw	r30, r28
    2824:	e2 5b       	subi	r30, 0xB2	; 178
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	80 83       	st	Z, r24
    2830:	64 c0       	rjmp	.+200    	; 0x28fa <lcd_send_cmd+0x2ba>
	else if (__tmp > 65535)
    2832:	fe 01       	movw	r30, r28
    2834:	e0 5b       	subi	r30, 0xB0	; 176
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	3f ef       	ldi	r19, 0xFF	; 255
    2844:	4f e7       	ldi	r20, 0x7F	; 127
    2846:	57 e4       	ldi	r21, 0x47	; 71
    2848:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    284c:	18 16       	cp	r1, r24
    284e:	0c f0       	brlt	.+2      	; 0x2852 <lcd_send_cmd+0x212>
    2850:	43 c0       	rjmp	.+134    	; 0x28d8 <lcd_send_cmd+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2852:	fe 01       	movw	r30, r28
    2854:	ec 5a       	subi	r30, 0xAC	; 172
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	60 81       	ld	r22, Z
    285a:	71 81       	ldd	r23, Z+1	; 0x01
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	93 81       	ldd	r25, Z+3	; 0x03
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e2       	ldi	r20, 0x20	; 32
    2866:	51 e4       	ldi	r21, 0x41	; 65
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	8e 01       	movw	r16, r28
    2872:	02 5b       	subi	r16, 0xB2	; 178
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	f8 01       	movw	r30, r16
    2884:	91 83       	std	Z+1, r25	; 0x01
    2886:	80 83       	st	Z, r24
    2888:	1f c0       	rjmp	.+62     	; 0x28c8 <lcd_send_cmd+0x288>
    288a:	fe 01       	movw	r30, r28
    288c:	e4 5b       	subi	r30, 0xB4	; 180
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 e9       	ldi	r24, 0x90	; 144
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2898:	fe 01       	movw	r30, r28
    289a:	e4 5b       	subi	r30, 0xB4	; 180
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	91 81       	ldd	r25, Z+1	; 0x01
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <lcd_send_cmd+0x262>
    28a6:	fe 01       	movw	r30, r28
    28a8:	e4 5b       	subi	r30, 0xB4	; 180
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b0:	de 01       	movw	r26, r28
    28b2:	a2 5b       	subi	r26, 0xB2	; 178
    28b4:	bf 4f       	sbci	r27, 0xFF	; 255
    28b6:	fe 01       	movw	r30, r28
    28b8:	e2 5b       	subi	r30, 0xB2	; 178
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	80 81       	ld	r24, Z
    28be:	91 81       	ldd	r25, Z+1	; 0x01
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	11 96       	adiw	r26, 0x01	; 1
    28c4:	9c 93       	st	X, r25
    28c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c8:	fe 01       	movw	r30, r28
    28ca:	e2 5b       	subi	r30, 0xB2	; 178
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 81       	ld	r24, Z
    28d0:	91 81       	ldd	r25, Z+1	; 0x01
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	d1 f6       	brne	.-76     	; 0x288a <lcd_send_cmd+0x24a>
    28d6:	4b c0       	rjmp	.+150    	; 0x296e <lcd_send_cmd+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d8:	8e 01       	movw	r16, r28
    28da:	02 5b       	subi	r16, 0xB2	; 178
    28dc:	1f 4f       	sbci	r17, 0xFF	; 255
    28de:	fe 01       	movw	r30, r28
    28e0:	e0 5b       	subi	r30, 0xB0	; 176
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	82 81       	ldd	r24, Z+2	; 0x02
    28ea:	93 81       	ldd	r25, Z+3	; 0x03
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	f8 01       	movw	r30, r16
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
    28fa:	de 01       	movw	r26, r28
    28fc:	a6 5b       	subi	r26, 0xB6	; 182
    28fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2900:	fe 01       	movw	r30, r28
    2902:	e2 5b       	subi	r30, 0xB2	; 178
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	80 81       	ld	r24, Z
    2908:	91 81       	ldd	r25, Z+1	; 0x01
    290a:	11 96       	adiw	r26, 0x01	; 1
    290c:	9c 93       	st	X, r25
    290e:	8e 93       	st	-X, r24
    2910:	fe 01       	movw	r30, r28
    2912:	e6 5b       	subi	r30, 0xB6	; 182
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 81       	ld	r24, Z
    2918:	91 81       	ldd	r25, Z+1	; 0x01
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <lcd_send_cmd+0x2da>
    291e:	fe 01       	movw	r30, r28
    2920:	e6 5b       	subi	r30, 0xB6	; 182
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	80 83       	st	Z, r24
    2928:	22 c0       	rjmp	.+68     	; 0x296e <lcd_send_cmd+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    292a:	8e 01       	movw	r16, r28
    292c:	08 5a       	subi	r16, 0xA8	; 168
    292e:	1f 4f       	sbci	r17, 0xFF	; 255
    2930:	fe 01       	movw	r30, r28
    2932:	e7 5a       	subi	r30, 0xA7	; 167
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	60 81       	ld	r22, Z
    2938:	71 81       	ldd	r23, Z+1	; 0x01
    293a:	82 81       	ldd	r24, Z+2	; 0x02
    293c:	93 81       	ldd	r25, Z+3	; 0x03
    293e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	f8 01       	movw	r30, r16
    2948:	80 83       	st	Z, r24
    294a:	de 01       	movw	r26, r28
    294c:	a7 5b       	subi	r26, 0xB7	; 183
    294e:	bf 4f       	sbci	r27, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e8 5a       	subi	r30, 0xA8	; 168
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    295a:	fe 01       	movw	r30, r28
    295c:	e7 5b       	subi	r30, 0xB7	; 183
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 81       	ld	r24, Z
    2962:	8a 95       	dec	r24
    2964:	f1 f7       	brne	.-4      	; 0x2962 <lcd_send_cmd+0x322>
    2966:	fe 01       	movw	r30, r28
    2968:	e7 5b       	subi	r30, 0xB7	; 183
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 83       	st	Z, r24
	_delay_us(10);
	DIO_WRITE(E, LOW);
    296e:	8b e0       	ldi	r24, 0x0B	; 11
    2970:	60 e0       	ldi	r22, 0x00	; 0
    2972:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    2976:	fe 01       	movw	r30, r28
    2978:	eb 5b       	subi	r30, 0xBB	; 187
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	aa ef       	ldi	r26, 0xFA	; 250
    2982:	b4 e4       	ldi	r27, 0x44	; 68
    2984:	80 83       	st	Z, r24
    2986:	91 83       	std	Z+1, r25	; 0x01
    2988:	a2 83       	std	Z+2, r26	; 0x02
    298a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    298c:	8e 01       	movw	r16, r28
    298e:	0f 5b       	subi	r16, 0xBF	; 191
    2990:	1f 4f       	sbci	r17, 0xFF	; 255
    2992:	fe 01       	movw	r30, r28
    2994:	eb 5b       	subi	r30, 0xBB	; 187
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	2b ea       	ldi	r18, 0xAB	; 171
    29a2:	3a ea       	ldi	r19, 0xAA	; 170
    29a4:	4a ea       	ldi	r20, 0xAA	; 170
    29a6:	50 e4       	ldi	r21, 0x40	; 64
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	f8 01       	movw	r30, r16
    29b2:	80 83       	st	Z, r24
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	a2 83       	std	Z+2, r26	; 0x02
    29b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ba:	fe 01       	movw	r30, r28
    29bc:	ef 5b       	subi	r30, 0xBF	; 191
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	93 81       	ldd	r25, Z+3	; 0x03
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e8       	ldi	r20, 0x80	; 128
    29ce:	5f e3       	ldi	r21, 0x3F	; 63
    29d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	34 f4       	brge	.+12     	; 0x29e4 <lcd_send_cmd+0x3a4>
		__ticks = 1;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	fe 01       	movw	r30, r28
    29dc:	e0 5c       	subi	r30, 0xC0	; 192
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 83       	st	Z, r24
    29e2:	9d c0       	rjmp	.+314    	; 0x2b1e <lcd_send_cmd+0x4de>
	else if (__tmp > 255)
    29e4:	fe 01       	movw	r30, r28
    29e6:	ef 5b       	subi	r30, 0xBF	; 191
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	53 e4       	ldi	r21, 0x43	; 67
    29fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	0c f0       	brlt	.+2      	; 0x2a04 <lcd_send_cmd+0x3c4>
    2a02:	7e c0       	rjmp	.+252    	; 0x2b00 <lcd_send_cmd+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    2a04:	fe 01       	movw	r30, r28
    2a06:	eb 5b       	subi	r30, 0xBB	; 187
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	4a e7       	ldi	r20, 0x7A	; 122
    2a18:	54 e4       	ldi	r21, 0x44	; 68
    2a1a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	8c af       	std	Y+60, r24	; 0x3c
    2a24:	9d af       	std	Y+61, r25	; 0x3d
    2a26:	ae af       	std	Y+62, r26	; 0x3e
    2a28:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2a:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a2c:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a30:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4a e7       	ldi	r20, 0x7A	; 122
    2a38:	55 e4       	ldi	r21, 0x45	; 69
    2a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	88 af       	std	Y+56, r24	; 0x38
    2a44:	99 af       	std	Y+57, r25	; 0x39
    2a46:	aa af       	std	Y+58, r26	; 0x3a
    2a48:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2a4a:	68 ad       	ldd	r22, Y+56	; 0x38
    2a4c:	79 ad       	ldd	r23, Y+57	; 0x39
    2a4e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a50:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e8       	ldi	r20, 0x80	; 128
    2a58:	5f e3       	ldi	r21, 0x3F	; 63
    2a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a5e:	88 23       	and	r24, r24
    2a60:	2c f4       	brge	.+10     	; 0x2a6c <lcd_send_cmd+0x42c>
		__ticks = 1;
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	9f ab       	std	Y+55, r25	; 0x37
    2a68:	8e ab       	std	Y+54, r24	; 0x36
    2a6a:	3f c0       	rjmp	.+126    	; 0x2aea <lcd_send_cmd+0x4aa>
	else if (__tmp > 65535)
    2a6c:	68 ad       	ldd	r22, Y+56	; 0x38
    2a6e:	79 ad       	ldd	r23, Y+57	; 0x39
    2a70:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a72:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	3f ef       	ldi	r19, 0xFF	; 255
    2a78:	4f e7       	ldi	r20, 0x7F	; 127
    2a7a:	57 e4       	ldi	r21, 0x47	; 71
    2a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a80:	18 16       	cp	r1, r24
    2a82:	4c f5       	brge	.+82     	; 0x2ad6 <lcd_send_cmd+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a84:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a86:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a88:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e2       	ldi	r20, 0x20	; 32
    2a92:	51 e4       	ldi	r21, 0x41	; 65
    2a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	9f ab       	std	Y+55, r25	; 0x37
    2aaa:	8e ab       	std	Y+54, r24	; 0x36
    2aac:	0f c0       	rjmp	.+30     	; 0x2acc <lcd_send_cmd+0x48c>
    2aae:	80 e9       	ldi	r24, 0x90	; 144
    2ab0:	91 e0       	ldi	r25, 0x01	; 1
    2ab2:	9d ab       	std	Y+53, r25	; 0x35
    2ab4:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ab6:	8c a9       	ldd	r24, Y+52	; 0x34
    2ab8:	9d a9       	ldd	r25, Y+53	; 0x35
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <lcd_send_cmd+0x47a>
    2abe:	9d ab       	std	Y+53, r25	; 0x35
    2ac0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac2:	8e a9       	ldd	r24, Y+54	; 0x36
    2ac4:	9f a9       	ldd	r25, Y+55	; 0x37
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	9f ab       	std	Y+55, r25	; 0x37
    2aca:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2acc:	8e a9       	ldd	r24, Y+54	; 0x36
    2ace:	9f a9       	ldd	r25, Y+55	; 0x37
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	69 f7       	brne	.-38     	; 0x2aae <lcd_send_cmd+0x46e>
    2ad4:	2d c0       	rjmp	.+90     	; 0x2b30 <lcd_send_cmd+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad6:	68 ad       	ldd	r22, Y+56	; 0x38
    2ad8:	79 ad       	ldd	r23, Y+57	; 0x39
    2ada:	8a ad       	ldd	r24, Y+58	; 0x3a
    2adc:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	9f ab       	std	Y+55, r25	; 0x37
    2ae8:	8e ab       	std	Y+54, r24	; 0x36
    2aea:	8e a9       	ldd	r24, Y+54	; 0x36
    2aec:	9f a9       	ldd	r25, Y+55	; 0x37
    2aee:	9b ab       	std	Y+51, r25	; 0x33
    2af0:	8a ab       	std	Y+50, r24	; 0x32
    2af2:	8a a9       	ldd	r24, Y+50	; 0x32
    2af4:	9b a9       	ldd	r25, Y+51	; 0x33
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <lcd_send_cmd+0x4b6>
    2afa:	9b ab       	std	Y+51, r25	; 0x33
    2afc:	8a ab       	std	Y+50, r24	; 0x32
    2afe:	18 c0       	rjmp	.+48     	; 0x2b30 <lcd_send_cmd+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b00:	fe 01       	movw	r30, r28
    2b02:	ef 5b       	subi	r30, 0xBF	; 191
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	60 81       	ld	r22, Z
    2b08:	71 81       	ldd	r23, Z+1	; 0x01
    2b0a:	82 81       	ldd	r24, Z+2	; 0x02
    2b0c:	93 81       	ldd	r25, Z+3	; 0x03
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	fe 01       	movw	r30, r28
    2b18:	e0 5c       	subi	r30, 0xC0	; 192
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 83       	st	Z, r24
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e0 5c       	subi	r30, 0xC0	; 192
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	80 81       	ld	r24, Z
    2b26:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b28:	89 a9       	ldd	r24, Y+49	; 0x31
    2b2a:	8a 95       	dec	r24
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <lcd_send_cmd+0x4ea>
    2b2e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2000);

	if (GET_BIT(cmd, 0)) {DIO_WRITE(D4, HIGH);}else {DIO_WRITE(D4, LOW);}
    2b30:	fe 01       	movw	r30, r28
    2b32:	ef 59       	subi	r30, 0x9F	; 159
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 81       	ld	r24, Z
    2b38:	88 2f       	mov	r24, r24
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	81 70       	andi	r24, 0x01	; 1
    2b3e:	90 70       	andi	r25, 0x00	; 0
    2b40:	88 23       	and	r24, r24
    2b42:	29 f0       	breq	.+10     	; 0x2b4e <lcd_send_cmd+0x50e>
    2b44:	84 e0       	ldi	r24, 0x04	; 4
    2b46:	61 e0       	ldi	r22, 0x01	; 1
    2b48:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    2b4c:	04 c0       	rjmp	.+8      	; 0x2b56 <lcd_send_cmd+0x516>
    2b4e:	84 e0       	ldi	r24, 0x04	; 4
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(cmd, 1)) {DIO_WRITE(D5, HIGH);}else {DIO_WRITE(D5, LOW);}
    2b56:	fe 01       	movw	r30, r28
    2b58:	ef 59       	subi	r30, 0x9F	; 159
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	80 81       	ld	r24, Z
    2b5e:	86 95       	lsr	r24
    2b60:	88 2f       	mov	r24, r24
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	81 70       	andi	r24, 0x01	; 1
    2b66:	90 70       	andi	r25, 0x00	; 0
    2b68:	88 23       	and	r24, r24
    2b6a:	29 f0       	breq	.+10     	; 0x2b76 <lcd_send_cmd+0x536>
    2b6c:	85 e0       	ldi	r24, 0x05	; 5
    2b6e:	61 e0       	ldi	r22, 0x01	; 1
    2b70:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    2b74:	04 c0       	rjmp	.+8      	; 0x2b7e <lcd_send_cmd+0x53e>
    2b76:	85 e0       	ldi	r24, 0x05	; 5
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(cmd, 2)) {DIO_WRITE(D6, HIGH);}else {DIO_WRITE(D6, LOW);}
    2b7e:	fe 01       	movw	r30, r28
    2b80:	ef 59       	subi	r30, 0x9F	; 159
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	86 95       	lsr	r24
    2b88:	86 95       	lsr	r24
    2b8a:	88 2f       	mov	r24, r24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	81 70       	andi	r24, 0x01	; 1
    2b90:	90 70       	andi	r25, 0x00	; 0
    2b92:	88 23       	and	r24, r24
    2b94:	29 f0       	breq	.+10     	; 0x2ba0 <lcd_send_cmd+0x560>
    2b96:	86 e0       	ldi	r24, 0x06	; 6
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    2b9e:	04 c0       	rjmp	.+8      	; 0x2ba8 <lcd_send_cmd+0x568>
    2ba0:	86 e0       	ldi	r24, 0x06	; 6
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	if (GET_BIT(cmd, 3)) {DIO_WRITE(D7, HIGH);}else {DIO_WRITE(D7, LOW);}
    2ba8:	fe 01       	movw	r30, r28
    2baa:	ef 59       	subi	r30, 0x9F	; 159
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	86 95       	lsr	r24
    2bb2:	86 95       	lsr	r24
    2bb4:	86 95       	lsr	r24
    2bb6:	88 2f       	mov	r24, r24
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	81 70       	andi	r24, 0x01	; 1
    2bbc:	90 70       	andi	r25, 0x00	; 0
    2bbe:	88 23       	and	r24, r24
    2bc0:	29 f0       	breq	.+10     	; 0x2bcc <lcd_send_cmd+0x58c>
    2bc2:	87 e0       	ldi	r24, 0x07	; 7
    2bc4:	61 e0       	ldi	r22, 0x01	; 1
    2bc6:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    2bca:	04 c0       	rjmp	.+8      	; 0x2bd4 <lcd_send_cmd+0x594>
    2bcc:	87 e0       	ldi	r24, 0x07	; 7
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
	DIO_WRITE(E, HIGH);
    2bd4:	8b e0       	ldi	r24, 0x0B	; 11
    2bd6:	61 e0       	ldi	r22, 0x01	; 1
    2bd8:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	a0 e2       	ldi	r26, 0x20	; 32
    2be2:	b1 e4       	ldi	r27, 0x41	; 65
    2be4:	8d a7       	std	Y+45, r24	; 0x2d
    2be6:	9e a7       	std	Y+46, r25	; 0x2e
    2be8:	af a7       	std	Y+47, r26	; 0x2f
    2bea:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bec:	6d a5       	ldd	r22, Y+45	; 0x2d
    2bee:	7e a5       	ldd	r23, Y+46	; 0x2e
    2bf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bf2:	98 a9       	ldd	r25, Y+48	; 0x30
    2bf4:	2b ea       	ldi	r18, 0xAB	; 171
    2bf6:	3a ea       	ldi	r19, 0xAA	; 170
    2bf8:	4a ea       	ldi	r20, 0xAA	; 170
    2bfa:	50 e4       	ldi	r21, 0x40	; 64
    2bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	89 a7       	std	Y+41, r24	; 0x29
    2c06:	9a a7       	std	Y+42, r25	; 0x2a
    2c08:	ab a7       	std	Y+43, r26	; 0x2b
    2c0a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2c0c:	69 a5       	ldd	r22, Y+41	; 0x29
    2c0e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c10:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c12:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e8       	ldi	r20, 0x80	; 128
    2c1a:	5f e3       	ldi	r21, 0x3F	; 63
    2c1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c20:	88 23       	and	r24, r24
    2c22:	1c f4       	brge	.+6      	; 0x2c2a <lcd_send_cmd+0x5ea>
		__ticks = 1;
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	88 a7       	std	Y+40, r24	; 0x28
    2c28:	91 c0       	rjmp	.+290    	; 0x2d4c <lcd_send_cmd+0x70c>
	else if (__tmp > 255)
    2c2a:	69 a5       	ldd	r22, Y+41	; 0x29
    2c2c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c30:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4f e7       	ldi	r20, 0x7F	; 127
    2c38:	53 e4       	ldi	r21, 0x43	; 67
    2c3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3e:	18 16       	cp	r1, r24
    2c40:	0c f0       	brlt	.+2      	; 0x2c44 <lcd_send_cmd+0x604>
    2c42:	7b c0       	rjmp	.+246    	; 0x2d3a <lcd_send_cmd+0x6fa>
	{
		_delay_ms(__us / 1000.0);
    2c44:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c46:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a e7       	ldi	r20, 0x7A	; 122
    2c52:	54 e4       	ldi	r21, 0x44	; 68
    2c54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	8c a3       	std	Y+36, r24	; 0x24
    2c5e:	9d a3       	std	Y+37, r25	; 0x25
    2c60:	ae a3       	std	Y+38, r26	; 0x26
    2c62:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c64:	6c a1       	ldd	r22, Y+36	; 0x24
    2c66:	7d a1       	ldd	r23, Y+37	; 0x25
    2c68:	8e a1       	ldd	r24, Y+38	; 0x26
    2c6a:	9f a1       	ldd	r25, Y+39	; 0x27
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	4a e7       	ldi	r20, 0x7A	; 122
    2c72:	55 e4       	ldi	r21, 0x45	; 69
    2c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	88 a3       	std	Y+32, r24	; 0x20
    2c7e:	99 a3       	std	Y+33, r25	; 0x21
    2c80:	aa a3       	std	Y+34, r26	; 0x22
    2c82:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2c84:	68 a1       	ldd	r22, Y+32	; 0x20
    2c86:	79 a1       	ldd	r23, Y+33	; 0x21
    2c88:	8a a1       	ldd	r24, Y+34	; 0x22
    2c8a:	9b a1       	ldd	r25, Y+35	; 0x23
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e8       	ldi	r20, 0x80	; 128
    2c92:	5f e3       	ldi	r21, 0x3F	; 63
    2c94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c98:	88 23       	and	r24, r24
    2c9a:	2c f4       	brge	.+10     	; 0x2ca6 <lcd_send_cmd+0x666>
		__ticks = 1;
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	9f 8f       	std	Y+31, r25	; 0x1f
    2ca2:	8e 8f       	std	Y+30, r24	; 0x1e
    2ca4:	3f c0       	rjmp	.+126    	; 0x2d24 <lcd_send_cmd+0x6e4>
	else if (__tmp > 65535)
    2ca6:	68 a1       	ldd	r22, Y+32	; 0x20
    2ca8:	79 a1       	ldd	r23, Y+33	; 0x21
    2caa:	8a a1       	ldd	r24, Y+34	; 0x22
    2cac:	9b a1       	ldd	r25, Y+35	; 0x23
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	3f ef       	ldi	r19, 0xFF	; 255
    2cb2:	4f e7       	ldi	r20, 0x7F	; 127
    2cb4:	57 e4       	ldi	r21, 0x47	; 71
    2cb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cba:	18 16       	cp	r1, r24
    2cbc:	4c f5       	brge	.+82     	; 0x2d10 <lcd_send_cmd+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbe:	6c a1       	ldd	r22, Y+36	; 0x24
    2cc0:	7d a1       	ldd	r23, Y+37	; 0x25
    2cc2:	8e a1       	ldd	r24, Y+38	; 0x26
    2cc4:	9f a1       	ldd	r25, Y+39	; 0x27
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e2       	ldi	r20, 0x20	; 32
    2ccc:	51 e4       	ldi	r21, 0x41	; 65
    2cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	9f 8f       	std	Y+31, r25	; 0x1f
    2ce4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ce6:	0f c0       	rjmp	.+30     	; 0x2d06 <lcd_send_cmd+0x6c6>
    2ce8:	80 e9       	ldi	r24, 0x90	; 144
    2cea:	91 e0       	ldi	r25, 0x01	; 1
    2cec:	9d 8f       	std	Y+29, r25	; 0x1d
    2cee:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cf0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cf2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	f1 f7       	brne	.-4      	; 0x2cf4 <lcd_send_cmd+0x6b4>
    2cf8:	9d 8f       	std	Y+29, r25	; 0x1d
    2cfa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cfe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	9f 8f       	std	Y+31, r25	; 0x1f
    2d04:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d08:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	69 f7       	brne	.-38     	; 0x2ce8 <lcd_send_cmd+0x6a8>
    2d0e:	24 c0       	rjmp	.+72     	; 0x2d58 <lcd_send_cmd+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d10:	68 a1       	ldd	r22, Y+32	; 0x20
    2d12:	79 a1       	ldd	r23, Y+33	; 0x21
    2d14:	8a a1       	ldd	r24, Y+34	; 0x22
    2d16:	9b a1       	ldd	r25, Y+35	; 0x23
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9f 8f       	std	Y+31, r25	; 0x1f
    2d22:	8e 8f       	std	Y+30, r24	; 0x1e
    2d24:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d26:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d28:	9b 8f       	std	Y+27, r25	; 0x1b
    2d2a:	8a 8f       	std	Y+26, r24	; 0x1a
    2d2c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d2e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	f1 f7       	brne	.-4      	; 0x2d30 <lcd_send_cmd+0x6f0>
    2d34:	9b 8f       	std	Y+27, r25	; 0x1b
    2d36:	8a 8f       	std	Y+26, r24	; 0x1a
    2d38:	0f c0       	rjmp	.+30     	; 0x2d58 <lcd_send_cmd+0x718>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d3a:	69 a5       	ldd	r22, Y+41	; 0x29
    2d3c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d40:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	88 a7       	std	Y+40, r24	; 0x28
    2d4c:	88 a5       	ldd	r24, Y+40	; 0x28
    2d4e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d50:	89 8d       	ldd	r24, Y+25	; 0x19
    2d52:	8a 95       	dec	r24
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <lcd_send_cmd+0x712>
    2d56:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_WRITE(E, LOW);
    2d58:	8b e0       	ldi	r24, 0x0B	; 11
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_WRITE>
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	aa ef       	ldi	r26, 0xFA	; 250
    2d66:	b4 e4       	ldi	r27, 0x44	; 68
    2d68:	8d 8b       	std	Y+21, r24	; 0x15
    2d6a:	9e 8b       	std	Y+22, r25	; 0x16
    2d6c:	af 8b       	std	Y+23, r26	; 0x17
    2d6e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d70:	6d 89       	ldd	r22, Y+21	; 0x15
    2d72:	7e 89       	ldd	r23, Y+22	; 0x16
    2d74:	8f 89       	ldd	r24, Y+23	; 0x17
    2d76:	98 8d       	ldd	r25, Y+24	; 0x18
    2d78:	2b ea       	ldi	r18, 0xAB	; 171
    2d7a:	3a ea       	ldi	r19, 0xAA	; 170
    2d7c:	4a ea       	ldi	r20, 0xAA	; 170
    2d7e:	50 e4       	ldi	r21, 0x40	; 64
    2d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	89 8b       	std	Y+17, r24	; 0x11
    2d8a:	9a 8b       	std	Y+18, r25	; 0x12
    2d8c:	ab 8b       	std	Y+19, r26	; 0x13
    2d8e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d90:	69 89       	ldd	r22, Y+17	; 0x11
    2d92:	7a 89       	ldd	r23, Y+18	; 0x12
    2d94:	8b 89       	ldd	r24, Y+19	; 0x13
    2d96:	9c 89       	ldd	r25, Y+20	; 0x14
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	40 e8       	ldi	r20, 0x80	; 128
    2d9e:	5f e3       	ldi	r21, 0x3F	; 63
    2da0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da4:	88 23       	and	r24, r24
    2da6:	1c f4       	brge	.+6      	; 0x2dae <lcd_send_cmd+0x76e>
		__ticks = 1;
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	88 8b       	std	Y+16, r24	; 0x10
    2dac:	91 c0       	rjmp	.+290    	; 0x2ed0 <lcd_send_cmd+0x890>
	else if (__tmp > 255)
    2dae:	69 89       	ldd	r22, Y+17	; 0x11
    2db0:	7a 89       	ldd	r23, Y+18	; 0x12
    2db2:	8b 89       	ldd	r24, Y+19	; 0x13
    2db4:	9c 89       	ldd	r25, Y+20	; 0x14
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	4f e7       	ldi	r20, 0x7F	; 127
    2dbc:	53 e4       	ldi	r21, 0x43	; 67
    2dbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc2:	18 16       	cp	r1, r24
    2dc4:	0c f0       	brlt	.+2      	; 0x2dc8 <lcd_send_cmd+0x788>
    2dc6:	7b c0       	rjmp	.+246    	; 0x2ebe <lcd_send_cmd+0x87e>
	{
		_delay_ms(__us / 1000.0);
    2dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dca:	7e 89       	ldd	r23, Y+22	; 0x16
    2dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dce:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	4a e7       	ldi	r20, 0x7A	; 122
    2dd6:	54 e4       	ldi	r21, 0x44	; 68
    2dd8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	8c 87       	std	Y+12, r24	; 0x0c
    2de2:	9d 87       	std	Y+13, r25	; 0x0d
    2de4:	ae 87       	std	Y+14, r26	; 0x0e
    2de6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2dea:	7d 85       	ldd	r23, Y+13	; 0x0d
    2dec:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dee:	9f 85       	ldd	r25, Y+15	; 0x0f
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	4a e7       	ldi	r20, 0x7A	; 122
    2df6:	55 e4       	ldi	r21, 0x45	; 69
    2df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	88 87       	std	Y+8, r24	; 0x08
    2e02:	99 87       	std	Y+9, r25	; 0x09
    2e04:	aa 87       	std	Y+10, r26	; 0x0a
    2e06:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e08:	68 85       	ldd	r22, Y+8	; 0x08
    2e0a:	79 85       	ldd	r23, Y+9	; 0x09
    2e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e8       	ldi	r20, 0x80	; 128
    2e16:	5f e3       	ldi	r21, 0x3F	; 63
    2e18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e1c:	88 23       	and	r24, r24
    2e1e:	2c f4       	brge	.+10     	; 0x2e2a <lcd_send_cmd+0x7ea>
		__ticks = 1;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	9f 83       	std	Y+7, r25	; 0x07
    2e26:	8e 83       	std	Y+6, r24	; 0x06
    2e28:	3f c0       	rjmp	.+126    	; 0x2ea8 <lcd_send_cmd+0x868>
	else if (__tmp > 65535)
    2e2a:	68 85       	ldd	r22, Y+8	; 0x08
    2e2c:	79 85       	ldd	r23, Y+9	; 0x09
    2e2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e30:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	3f ef       	ldi	r19, 0xFF	; 255
    2e36:	4f e7       	ldi	r20, 0x7F	; 127
    2e38:	57 e4       	ldi	r21, 0x47	; 71
    2e3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e3e:	18 16       	cp	r1, r24
    2e40:	4c f5       	brge	.+82     	; 0x2e94 <lcd_send_cmd+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e42:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e44:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e46:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e48:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e2       	ldi	r20, 0x20	; 32
    2e50:	51 e4       	ldi	r21, 0x41	; 65
    2e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	9f 83       	std	Y+7, r25	; 0x07
    2e68:	8e 83       	std	Y+6, r24	; 0x06
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <lcd_send_cmd+0x84a>
    2e6c:	80 e9       	ldi	r24, 0x90	; 144
    2e6e:	91 e0       	ldi	r25, 0x01	; 1
    2e70:	9d 83       	std	Y+5, r25	; 0x05
    2e72:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e74:	8c 81       	ldd	r24, Y+4	; 0x04
    2e76:	9d 81       	ldd	r25, Y+5	; 0x05
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <lcd_send_cmd+0x838>
    2e7c:	9d 83       	std	Y+5, r25	; 0x05
    2e7e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e80:	8e 81       	ldd	r24, Y+6	; 0x06
    2e82:	9f 81       	ldd	r25, Y+7	; 0x07
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	9f 83       	std	Y+7, r25	; 0x07
    2e88:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	69 f7       	brne	.-38     	; 0x2e6c <lcd_send_cmd+0x82c>
    2e92:	24 c0       	rjmp	.+72     	; 0x2edc <lcd_send_cmd+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e94:	68 85       	ldd	r22, Y+8	; 0x08
    2e96:	79 85       	ldd	r23, Y+9	; 0x09
    2e98:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	9f 83       	std	Y+7, r25	; 0x07
    2ea6:	8e 83       	std	Y+6, r24	; 0x06
    2ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    2eac:	9b 83       	std	Y+3, r25	; 0x03
    2eae:	8a 83       	std	Y+2, r24	; 0x02
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <lcd_send_cmd+0x874>
    2eb8:	9b 83       	std	Y+3, r25	; 0x03
    2eba:	8a 83       	std	Y+2, r24	; 0x02
    2ebc:	0f c0       	rjmp	.+30     	; 0x2edc <lcd_send_cmd+0x89c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ebe:	69 89       	ldd	r22, Y+17	; 0x11
    2ec0:	7a 89       	ldd	r23, Y+18	; 0x12
    2ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	88 8b       	std	Y+16, r24	; 0x10
    2ed0:	88 89       	ldd	r24, Y+16	; 0x10
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	8a 95       	dec	r24
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <lcd_send_cmd+0x896>
    2eda:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);

}
    2edc:	cf 59       	subi	r28, 0x9F	; 159
    2ede:	df 4f       	sbci	r29, 0xFF	; 255
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	f8 94       	cli
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	cd bf       	out	0x3d, r28	; 61
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	1f 91       	pop	r17
    2ef0:	0f 91       	pop	r16
    2ef2:	08 95       	ret

00002ef4 <lcd_init>:
void lcd_init(void) {
    2ef4:	df 93       	push	r29
    2ef6:	cf 93       	push	r28
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    2efc:	2e 97       	sbiw	r28, 0x0e	; 14
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	a0 ea       	ldi	r26, 0xA0	; 160
    2f0e:	b1 e4       	ldi	r27, 0x41	; 65
    2f10:	8b 87       	std	Y+11, r24	; 0x0b
    2f12:	9c 87       	std	Y+12, r25	; 0x0c
    2f14:	ad 87       	std	Y+13, r26	; 0x0d
    2f16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	4a e7       	ldi	r20, 0x7A	; 122
    2f26:	55 e4       	ldi	r21, 0x45	; 69
    2f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	8f 83       	std	Y+7, r24	; 0x07
    2f32:	98 87       	std	Y+8, r25	; 0x08
    2f34:	a9 87       	std	Y+9, r26	; 0x09
    2f36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f38:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3a:	78 85       	ldd	r23, Y+8	; 0x08
    2f3c:	89 85       	ldd	r24, Y+9	; 0x09
    2f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	40 e8       	ldi	r20, 0x80	; 128
    2f46:	5f e3       	ldi	r21, 0x3F	; 63
    2f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f4c:	88 23       	and	r24, r24
    2f4e:	2c f4       	brge	.+10     	; 0x2f5a <lcd_init+0x66>
		__ticks = 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	9e 83       	std	Y+6, r25	; 0x06
    2f56:	8d 83       	std	Y+5, r24	; 0x05
    2f58:	3f c0       	rjmp	.+126    	; 0x2fd8 <lcd_init+0xe4>
	else if (__tmp > 65535)
    2f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5c:	78 85       	ldd	r23, Y+8	; 0x08
    2f5e:	89 85       	ldd	r24, Y+9	; 0x09
    2f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	3f ef       	ldi	r19, 0xFF	; 255
    2f66:	4f e7       	ldi	r20, 0x7F	; 127
    2f68:	57 e4       	ldi	r21, 0x47	; 71
    2f6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f6e:	18 16       	cp	r1, r24
    2f70:	4c f5       	brge	.+82     	; 0x2fc4 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e2       	ldi	r20, 0x20	; 32
    2f80:	51 e4       	ldi	r21, 0x41	; 65
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	9e 83       	std	Y+6, r25	; 0x06
    2f98:	8d 83       	std	Y+5, r24	; 0x05
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <lcd_init+0xc6>
    2f9c:	80 e9       	ldi	r24, 0x90	; 144
    2f9e:	91 e0       	ldi	r25, 0x01	; 1
    2fa0:	9c 83       	std	Y+4, r25	; 0x04
    2fa2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <lcd_init+0xb4>
    2fac:	9c 83       	std	Y+4, r25	; 0x04
    2fae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	9e 83       	std	Y+6, r25	; 0x06
    2fb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fba:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	69 f7       	brne	.-38     	; 0x2f9c <lcd_init+0xa8>
    2fc2:	14 c0       	rjmp	.+40     	; 0x2fec <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc6:	78 85       	ldd	r23, Y+8	; 0x08
    2fc8:	89 85       	ldd	r24, Y+9	; 0x09
    2fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9e 83       	std	Y+6, r25	; 0x06
    2fd6:	8d 83       	std	Y+5, r24	; 0x05
    2fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fda:	9e 81       	ldd	r25, Y+6	; 0x06
    2fdc:	9a 83       	std	Y+2, r25	; 0x02
    2fde:	89 83       	std	Y+1, r24	; 0x01
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <lcd_init+0xf0>
    2fe8:	9a 83       	std	Y+2, r25	; 0x02
    2fea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	lcd_send_cmd(0x33);
    2fec:	83 e3       	ldi	r24, 0x33	; 51
    2fee:	0e 94 20 13 	call	0x2640	; 0x2640 <lcd_send_cmd>
	lcd_send_cmd(0x32); //send for 4 bit initialization of lcd
    2ff2:	82 e3       	ldi	r24, 0x32	; 50
    2ff4:	0e 94 20 13 	call	0x2640	; 0x2640 <lcd_send_cmd>
	lcd_send_cmd(0x28); //select 4 bit mode, 5*7 dots
    2ff8:	88 e2       	ldi	r24, 0x28	; 40
    2ffa:	0e 94 20 13 	call	0x2640	; 0x2640 <lcd_send_cmd>
	lcd_send_cmd(0x0f); //display on, cursor blinking
    2ffe:	8f e0       	ldi	r24, 0x0F	; 15
    3000:	0e 94 20 13 	call	0x2640	; 0x2640 <lcd_send_cmd>
	lcd_send_cmd(0x06); //entry mode increment cursor to right
    3004:	86 e0       	ldi	r24, 0x06	; 6
    3006:	0e 94 20 13 	call	0x2640	; 0x2640 <lcd_send_cmd>
	lcd_send_cmd(0x01); //clear display
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	0e 94 20 13 	call	0x2640	; 0x2640 <lcd_send_cmd>
}
    3010:	2e 96       	adiw	r28, 0x0e	; 14
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	cf 91       	pop	r28
    301e:	df 91       	pop	r29
    3020:	08 95       	ret

00003022 <lcd_send_str>:
void lcd_send_str(char *string) {
    3022:	df 93       	push	r29
    3024:	cf 93       	push	r28
    3026:	00 d0       	rcall	.+0      	; 0x3028 <lcd_send_str+0x6>
    3028:	00 d0       	rcall	.+0      	; 0x302a <lcd_send_str+0x8>
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	9c 83       	std	Y+4, r25	; 0x04
    3030:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;string[i]!=0;i++)
    3032:	1a 82       	std	Y+2, r1	; 0x02
    3034:	19 82       	std	Y+1, r1	; 0x01
    3036:	0f c0       	rjmp	.+30     	; 0x3056 <lcd_send_str+0x34>
		lcd_send_ch(string[i]);
    3038:	29 81       	ldd	r18, Y+1	; 0x01
    303a:	3a 81       	ldd	r19, Y+2	; 0x02
    303c:	8b 81       	ldd	r24, Y+3	; 0x03
    303e:	9c 81       	ldd	r25, Y+4	; 0x04
    3040:	fc 01       	movw	r30, r24
    3042:	e2 0f       	add	r30, r18
    3044:	f3 1f       	adc	r31, r19
    3046:	80 81       	ld	r24, Z
    3048:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <lcd_send_ch>
	lcd_send_cmd(0x06); //entry mode increment cursor to right
	lcd_send_cmd(0x01); //clear display
}
void lcd_send_str(char *string) {
	int i;
	for(i=0;string[i]!=0;i++)
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	9a 81       	ldd	r25, Y+2	; 0x02
    3050:	01 96       	adiw	r24, 0x01	; 1
    3052:	9a 83       	std	Y+2, r25	; 0x02
    3054:	89 83       	std	Y+1, r24	; 0x01
    3056:	29 81       	ldd	r18, Y+1	; 0x01
    3058:	3a 81       	ldd	r19, Y+2	; 0x02
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	9c 81       	ldd	r25, Y+4	; 0x04
    305e:	fc 01       	movw	r30, r24
    3060:	e2 0f       	add	r30, r18
    3062:	f3 1f       	adc	r31, r19
    3064:	80 81       	ld	r24, Z
    3066:	88 23       	and	r24, r24
    3068:	39 f7       	brne	.-50     	; 0x3038 <lcd_send_str+0x16>
		lcd_send_ch(string[i]);
}
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <Cursor_pos>:
void Cursor_pos(unsigned char x_pos, unsigned char y_pos){
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	00 d0       	rcall	.+0      	; 0x307e <Cursor_pos+0x6>
    307e:	00 d0       	rcall	.+0      	; 0x3080 <Cursor_pos+0x8>
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	8b 83       	std	Y+3, r24	; 0x03
    3086:	6c 83       	std	Y+4, r22	; 0x04
	int add = 0;
    3088:	1a 82       	std	Y+2, r1	; 0x02
    308a:	19 82       	std	Y+1, r1	; 0x01
	if(x_pos == 0)
    308c:	8b 81       	ldd	r24, Y+3	; 0x03
    308e:	88 23       	and	r24, r24
    3090:	29 f4       	brne	.+10     	; 0x309c <Cursor_pos+0x24>
		add = 0x80;
    3092:	80 e8       	ldi	r24, 0x80	; 128
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	9a 83       	std	Y+2, r25	; 0x02
    3098:	89 83       	std	Y+1, r24	; 0x01
    309a:	07 c0       	rjmp	.+14     	; 0x30aa <Cursor_pos+0x32>
	else if(x_pos == 1)
    309c:	8b 81       	ldd	r24, Y+3	; 0x03
    309e:	81 30       	cpi	r24, 0x01	; 1
    30a0:	21 f4       	brne	.+8      	; 0x30aa <Cursor_pos+0x32>
		add = 0xc0;
    30a2:	80 ec       	ldi	r24, 0xC0	; 192
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	9a 83       	std	Y+2, r25	; 0x02
    30a8:	89 83       	std	Y+1, r24	; 0x01
	if(y_pos < 16)
    30aa:	8c 81       	ldd	r24, Y+4	; 0x04
    30ac:	80 31       	cpi	r24, 0x10	; 16
    30ae:	48 f4       	brcc	.+18     	; 0x30c2 <Cursor_pos+0x4a>
		add += y_pos;
    30b0:	8c 81       	ldd	r24, Y+4	; 0x04
    30b2:	28 2f       	mov	r18, r24
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ba:	82 0f       	add	r24, r18
    30bc:	93 1f       	adc	r25, r19
    30be:	9a 83       	std	Y+2, r25	; 0x02
    30c0:	89 83       	std	Y+1, r24	; 0x01
	lcd_send_cmd(add);
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	0e 94 20 13 	call	0x2640	; 0x2640 <lcd_send_cmd>
}
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	cf 91       	pop	r28
    30d2:	df 91       	pop	r29
    30d4:	08 95       	ret

000030d6 <lcd_clear>:
void lcd_clear (void)								/* LCD clear function */
{
    30d6:	df 93       	push	r29
    30d8:	cf 93       	push	r28
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
	lcd_send_cmd (0x01);								/* Clear LCD command */
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	0e 94 20 13 	call	0x2640	; 0x2640 <lcd_send_cmd>
	lcd_send_cmd (0x80);								/* 8 is for first line and 0 is for 0th position */
    30e4:	80 e8       	ldi	r24, 0x80	; 128
    30e6:	0e 94 20 13 	call	0x2640	; 0x2640 <lcd_send_cmd>
}
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <main>:
#define F_CPU 16000000UL
uint8t fir_raise, fir_fall, sec_raise, high, period;
long freq;
float duty_cycle;
char frequency[14], duty[7];
int main() {
    30f0:	cf 92       	push	r12
    30f2:	df 92       	push	r13
    30f4:	ef 92       	push	r14
    30f6:	ff 92       	push	r15
    30f8:	0f 93       	push	r16
    30fa:	1f 93       	push	r17
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
	dio_init();
    3104:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <dio_init>
	lcd_init();
    3108:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <lcd_init>
	lcd_send_cmd(0x80); //moves the cursor to start from first row
    310c:	80 e8       	ldi	r24, 0x80	; 128
    310e:	0e 94 20 13 	call	0x2640	; 0x2640 <lcd_send_cmd>
	lcd_send_str("Freq=");
    3112:	80 e6       	ldi	r24, 0x60	; 96
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	0e 94 11 18 	call	0x3022	; 0x3022 <lcd_send_str>
	lcd_send_cmd(0xC0); //moves the cursor to the second row
    311a:	80 ec       	ldi	r24, 0xC0	; 192
    311c:	0e 94 20 13 	call	0x2640	; 0x2640 <lcd_send_cmd>
	lcd_send_str("Duty=");
    3120:	86 e6       	ldi	r24, 0x66	; 102
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	0e 94 11 18 	call	0x3022	; 0x3022 <lcd_send_str>
	Cursor_pos(0, 6);
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	66 e0       	ldi	r22, 0x06	; 6
    312c:	0e 94 3c 18 	call	0x3078	; 0x3078 <Cursor_pos>
	Timer1_init();
    3130:	0e 94 7c 07 	call	0xef8	; 0xef8 <Timer1_init>
	Timer_PWM();
    3134:	0e 94 c2 07 	call	0xf84	; 0xf84 <Timer_PWM>
	while (1) {

		Freq_Duty(fir_raise, fir_fall, sec_raise, high, period, &freq, &duty_cycle);
    3138:	80 91 b8 01 	lds	r24, 0x01B8
    313c:	90 91 b9 01 	lds	r25, 0x01B9
    3140:	20 91 b2 01 	lds	r18, 0x01B2
    3144:	30 91 b3 01 	lds	r19, 0x01B3
    3148:	40 91 b4 01 	lds	r20, 0x01B4
    314c:	50 91 b5 01 	lds	r21, 0x01B5
    3150:	e0 91 b0 01 	lds	r30, 0x01B0
    3154:	f0 91 b1 01 	lds	r31, 0x01B1
    3158:	a0 91 b6 01 	lds	r26, 0x01B6
    315c:	b0 91 b7 01 	lds	r27, 0x01B7
    3160:	0f 2e       	mov	r0, r31
    3162:	fc ea       	ldi	r31, 0xAC	; 172
    3164:	ef 2e       	mov	r14, r31
    3166:	f1 e0       	ldi	r31, 0x01	; 1
    3168:	ff 2e       	mov	r15, r31
    316a:	f0 2d       	mov	r31, r0
    316c:	0f 2e       	mov	r0, r31
    316e:	f1 ec       	ldi	r31, 0xC1	; 193
    3170:	cf 2e       	mov	r12, r31
    3172:	f1 e0       	ldi	r31, 0x01	; 1
    3174:	df 2e       	mov	r13, r31
    3176:	f0 2d       	mov	r31, r0
    3178:	b9 01       	movw	r22, r18
    317a:	9f 01       	movw	r18, r30
    317c:	8d 01       	movw	r16, r26
    317e:	0e 94 cc 09 	call	0x1398	; 0x1398 <Freq_Duty>
		ltoa(freq, frequency, 10);
    3182:	80 91 ac 01 	lds	r24, 0x01AC
    3186:	90 91 ad 01 	lds	r25, 0x01AD
    318a:	a0 91 ae 01 	lds	r26, 0x01AE
    318e:	b0 91 af 01 	lds	r27, 0x01AF
    3192:	2e e9       	ldi	r18, 0x9E	; 158
    3194:	31 e0       	ldi	r19, 0x01	; 1
    3196:	bc 01       	movw	r22, r24
    3198:	cd 01       	movw	r24, r26
    319a:	a9 01       	movw	r20, r18
    319c:	2a e0       	ldi	r18, 0x0A	; 10
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	0e 94 38 07 	call	0xe70	; 0xe70 <ltoa>
		itoa((int) duty_cycle, duty, 10);
    31a4:	80 91 c1 01 	lds	r24, 0x01C1
    31a8:	90 91 c2 01 	lds	r25, 0x01C2
    31ac:	a0 91 c3 01 	lds	r26, 0x01C3
    31b0:	b0 91 c4 01 	lds	r27, 0x01C4
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	2a eb       	ldi	r18, 0xBA	; 186
    31c2:	31 e0       	ldi	r19, 0x01	; 1
    31c4:	b9 01       	movw	r22, r18
    31c6:	4a e0       	ldi	r20, 0x0A	; 10
    31c8:	50 e0       	ldi	r21, 0x00	; 0
    31ca:	0e 94 17 07 	call	0xe2e	; 0xe2e <itoa>

		lcd_send_str(frequency);
    31ce:	8e e9       	ldi	r24, 0x9E	; 158
    31d0:	91 e0       	ldi	r25, 0x01	; 1
    31d2:	0e 94 11 18 	call	0x3022	; 0x3022 <lcd_send_str>
		lcd_send_str(" Hz");
    31d6:	8c e6       	ldi	r24, 0x6C	; 108
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	0e 94 11 18 	call	0x3022	; 0x3022 <lcd_send_str>
		lcd_send_cmd(0xC0); //moves the cursor to the second row
    31de:	80 ec       	ldi	r24, 0xC0	; 192
    31e0:	0e 94 20 13 	call	0x2640	; 0x2640 <lcd_send_cmd>
		Cursor_pos(0, 6);
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	66 e0       	ldi	r22, 0x06	; 6
    31e8:	0e 94 3c 18 	call	0x3078	; 0x3078 <Cursor_pos>
		lcd_send_str(duty);
    31ec:	8a eb       	ldi	r24, 0xBA	; 186
    31ee:	91 e0       	ldi	r25, 0x01	; 1
    31f0:	0e 94 11 18 	call	0x3022	; 0x3022 <lcd_send_str>
		lcd_send_str(" %");
    31f4:	80 e7       	ldi	r24, 0x70	; 112
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	0e 94 11 18 	call	0x3022	; 0x3022 <lcd_send_str>
    31fc:	9d cf       	rjmp	.-198    	; 0x3138 <main+0x48>

000031fe <__udivmodsi4>:
    31fe:	a1 e2       	ldi	r26, 0x21	; 33
    3200:	1a 2e       	mov	r1, r26
    3202:	aa 1b       	sub	r26, r26
    3204:	bb 1b       	sub	r27, r27
    3206:	fd 01       	movw	r30, r26
    3208:	0d c0       	rjmp	.+26     	; 0x3224 <__udivmodsi4_ep>

0000320a <__udivmodsi4_loop>:
    320a:	aa 1f       	adc	r26, r26
    320c:	bb 1f       	adc	r27, r27
    320e:	ee 1f       	adc	r30, r30
    3210:	ff 1f       	adc	r31, r31
    3212:	a2 17       	cp	r26, r18
    3214:	b3 07       	cpc	r27, r19
    3216:	e4 07       	cpc	r30, r20
    3218:	f5 07       	cpc	r31, r21
    321a:	20 f0       	brcs	.+8      	; 0x3224 <__udivmodsi4_ep>
    321c:	a2 1b       	sub	r26, r18
    321e:	b3 0b       	sbc	r27, r19
    3220:	e4 0b       	sbc	r30, r20
    3222:	f5 0b       	sbc	r31, r21

00003224 <__udivmodsi4_ep>:
    3224:	66 1f       	adc	r22, r22
    3226:	77 1f       	adc	r23, r23
    3228:	88 1f       	adc	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	1a 94       	dec	r1
    322e:	69 f7       	brne	.-38     	; 0x320a <__udivmodsi4_loop>
    3230:	60 95       	com	r22
    3232:	70 95       	com	r23
    3234:	80 95       	com	r24
    3236:	90 95       	com	r25
    3238:	9b 01       	movw	r18, r22
    323a:	ac 01       	movw	r20, r24
    323c:	bd 01       	movw	r22, r26
    323e:	cf 01       	movw	r24, r30
    3240:	08 95       	ret

00003242 <__prologue_saves__>:
    3242:	2f 92       	push	r2
    3244:	3f 92       	push	r3
    3246:	4f 92       	push	r4
    3248:	5f 92       	push	r5
    324a:	6f 92       	push	r6
    324c:	7f 92       	push	r7
    324e:	8f 92       	push	r8
    3250:	9f 92       	push	r9
    3252:	af 92       	push	r10
    3254:	bf 92       	push	r11
    3256:	cf 92       	push	r12
    3258:	df 92       	push	r13
    325a:	ef 92       	push	r14
    325c:	ff 92       	push	r15
    325e:	0f 93       	push	r16
    3260:	1f 93       	push	r17
    3262:	cf 93       	push	r28
    3264:	df 93       	push	r29
    3266:	cd b7       	in	r28, 0x3d	; 61
    3268:	de b7       	in	r29, 0x3e	; 62
    326a:	ca 1b       	sub	r28, r26
    326c:	db 0b       	sbc	r29, r27
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	de bf       	out	0x3e, r29	; 62
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	cd bf       	out	0x3d, r28	; 61
    3278:	09 94       	ijmp

0000327a <__epilogue_restores__>:
    327a:	2a 88       	ldd	r2, Y+18	; 0x12
    327c:	39 88       	ldd	r3, Y+17	; 0x11
    327e:	48 88       	ldd	r4, Y+16	; 0x10
    3280:	5f 84       	ldd	r5, Y+15	; 0x0f
    3282:	6e 84       	ldd	r6, Y+14	; 0x0e
    3284:	7d 84       	ldd	r7, Y+13	; 0x0d
    3286:	8c 84       	ldd	r8, Y+12	; 0x0c
    3288:	9b 84       	ldd	r9, Y+11	; 0x0b
    328a:	aa 84       	ldd	r10, Y+10	; 0x0a
    328c:	b9 84       	ldd	r11, Y+9	; 0x09
    328e:	c8 84       	ldd	r12, Y+8	; 0x08
    3290:	df 80       	ldd	r13, Y+7	; 0x07
    3292:	ee 80       	ldd	r14, Y+6	; 0x06
    3294:	fd 80       	ldd	r15, Y+5	; 0x05
    3296:	0c 81       	ldd	r16, Y+4	; 0x04
    3298:	1b 81       	ldd	r17, Y+3	; 0x03
    329a:	aa 81       	ldd	r26, Y+2	; 0x02
    329c:	b9 81       	ldd	r27, Y+1	; 0x01
    329e:	ce 0f       	add	r28, r30
    32a0:	d1 1d       	adc	r29, r1
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	ed 01       	movw	r28, r26
    32ae:	08 95       	ret

000032b0 <__udivmodhi4>:
    32b0:	aa 1b       	sub	r26, r26
    32b2:	bb 1b       	sub	r27, r27
    32b4:	51 e1       	ldi	r21, 0x11	; 17
    32b6:	07 c0       	rjmp	.+14     	; 0x32c6 <__udivmodhi4_ep>

000032b8 <__udivmodhi4_loop>:
    32b8:	aa 1f       	adc	r26, r26
    32ba:	bb 1f       	adc	r27, r27
    32bc:	a6 17       	cp	r26, r22
    32be:	b7 07       	cpc	r27, r23
    32c0:	10 f0       	brcs	.+4      	; 0x32c6 <__udivmodhi4_ep>
    32c2:	a6 1b       	sub	r26, r22
    32c4:	b7 0b       	sbc	r27, r23

000032c6 <__udivmodhi4_ep>:
    32c6:	88 1f       	adc	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	5a 95       	dec	r21
    32cc:	a9 f7       	brne	.-22     	; 0x32b8 <__udivmodhi4_loop>
    32ce:	80 95       	com	r24
    32d0:	90 95       	com	r25
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	08 95       	ret

000032d8 <_exit>:
    32d8:	f8 94       	cli

000032da <__stop_program>:
    32da:	ff cf       	rjmp	.-2      	; 0x32da <__stop_program>
