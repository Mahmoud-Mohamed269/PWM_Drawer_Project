
PWM_Drawer_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ce0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000342  00800060  00003ce0  00003d74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008003a2  008003a2  000040b6  2**0
                  ALLOC
  3 .stab         00002f10  00000000  00000000  000040b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000180d  00000000  00000000  00006fc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_1>
       8:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_2>
       c:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <main>
      8a:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4b 1e 	jmp	0x3c96	; 0x3c96 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4b 1e 	jmp	0x3c96	; 0x3c96 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4b 1e 	jmp	0x3c96	; 0x3c96 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4b 1e 	jmp	0x3c96	; 0x3c96 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4b 1e 	jmp	0x3c96	; 0x3c96 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4f 1e 	jmp	0x3c9e	; 0x3c9e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 58       	subi	r30, 0x8C	; 140
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <itoa>:
     e2e:	fb 01       	movw	r30, r22
     e30:	9f 01       	movw	r18, r30
     e32:	e8 94       	clt
     e34:	42 30       	cpi	r20, 0x02	; 2
     e36:	c4 f0       	brlt	.+48     	; 0xe68 <itoa+0x3a>
     e38:	45 32       	cpi	r20, 0x25	; 37
     e3a:	b4 f4       	brge	.+44     	; 0xe68 <itoa+0x3a>
     e3c:	4a 30       	cpi	r20, 0x0A	; 10
     e3e:	29 f4       	brne	.+10     	; 0xe4a <itoa+0x1c>
     e40:	97 fb       	bst	r25, 7
     e42:	1e f4       	brtc	.+6      	; 0xe4a <itoa+0x1c>
     e44:	90 95       	com	r25
     e46:	81 95       	neg	r24
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	64 2f       	mov	r22, r20
     e4c:	77 27       	eor	r23, r23
     e4e:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <__udivmodhi4>
     e52:	80 5d       	subi	r24, 0xD0	; 208
     e54:	8a 33       	cpi	r24, 0x3A	; 58
     e56:	0c f0       	brlt	.+2      	; 0xe5a <itoa+0x2c>
     e58:	89 5d       	subi	r24, 0xD9	; 217
     e5a:	81 93       	st	Z+, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	a1 f7       	brne	.-24     	; 0xe4a <itoa+0x1c>
     e62:	16 f4       	brtc	.+4      	; 0xe68 <itoa+0x3a>
     e64:	5d e2       	ldi	r21, 0x2D	; 45
     e66:	51 93       	st	Z+, r21
     e68:	10 82       	st	Z, r1
     e6a:	c9 01       	movw	r24, r18
     e6c:	0c 94 38 07 	jmp	0xe70	; 0xe70 <strrev>

00000e70 <strrev>:
     e70:	dc 01       	movw	r26, r24
     e72:	fc 01       	movw	r30, r24
     e74:	67 2f       	mov	r22, r23
     e76:	71 91       	ld	r23, Z+
     e78:	77 23       	and	r23, r23
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <strrev+0x4>
     e7c:	32 97       	sbiw	r30, 0x02	; 2
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <strrev+0x18>
     e80:	7c 91       	ld	r23, X
     e82:	6d 93       	st	X+, r22
     e84:	70 83       	st	Z, r23
     e86:	62 91       	ld	r22, -Z
     e88:	ae 17       	cp	r26, r30
     e8a:	bf 07       	cpc	r27, r31
     e8c:	c8 f3       	brcs	.-14     	; 0xe80 <strrev+0x10>
     e8e:	08 95       	ret

00000e90 <Timer1_init>:
 *
 *  Created on: Oct 15, 2021
 *      Author: Mahmoud
 */
#include "Timer1.h"
void Timer1_init(){
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
#elif TIMER1_MODE == TIMER1_PWM_PHASE_CORRECT_10
	SET_BIT(TCCR1A, WGM10);
	SET_BIT(TCCR1A, WGM11);
	CLR_BIT(TCCR1A, WGM12);
#elif TIMER1_MODE == TIMER1_CTC
	CLR_BIT(TCCR1A, WGM10);
     e98:	af e4       	ldi	r26, 0x4F	; 79
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ef e4       	ldi	r30, 0x4F	; 79
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8e 7f       	andi	r24, 0xFE	; 254
     ea4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11);
     ea6:	af e4       	ldi	r26, 0x4F	; 79
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ef e4       	ldi	r30, 0x4F	; 79
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8d 7f       	andi	r24, 0xFD	; 253
     eb2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM12);
     eb4:	af e4       	ldi	r26, 0x4F	; 79
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ef e4       	ldi	r30, 0x4F	; 79
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	88 60       	ori	r24, 0x08	; 8
     ec0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
	SET_BIT(TCCR1A, WGM12);
#endif

#if TIMER1_COMPARE_OUTPUT == COM_OUT_DIS
	CLR_BIT(TCCR1A, COM1A0);
     ec2:	af e4       	ldi	r26, 0x4F	; 79
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	ef e4       	ldi	r30, 0x4F	; 79
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	8f 7b       	andi	r24, 0xBF	; 191
     ece:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A1);
     ed0:	af e4       	ldi	r26, 0x4F	; 79
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ef e4       	ldi	r30, 0x4F	; 79
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8f 77       	andi	r24, 0x7F	; 127
     edc:	8c 93       	st	X, r24
#if TIMO_PRES == TIMO_NO_CLK
	CLR_BIT(TCCR1, CS10);
	CLR_BIT(TCCR1, CS11);
	CLR_BIT(TCCR1, CS12);
#elif TIMO_PRES == TIMO_NO_PRES
	SET_BIT(TCCR1A, 0);
     ede:	af e4       	ldi	r26, 0x4F	; 79
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ef e4       	ldi	r30, 0x4F	; 79
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	81 60       	ori	r24, 0x01	; 1
     eea:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, 1);
     eec:	af e4       	ldi	r26, 0x4F	; 79
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ef e4       	ldi	r30, 0x4F	; 79
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8d 7f       	andi	r24, 0xFD	; 253
     ef8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, 2);
     efa:	af e4       	ldi	r26, 0x4F	; 79
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ef e4       	ldi	r30, 0x4F	; 79
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8b 7f       	andi	r24, 0xFB	; 251
     f06:	8c 93       	st	X, r24
#elif TIMO_PRES == TIMO_1024_PRES
	SET_BIT(TCCR1A, 0);
	CLR_BIT(TCCR1A, 1);
	SET_BIT(TCCR1A, 2);
#endif
}
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <Timer_PWM>:
void Timer_PWM(void){
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	TCCR1A |= (1 << COM1B1) | (1 << WGM11) | (1 << WGM10);
     f16:	af e4       	ldi	r26, 0x4F	; 79
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ef e4       	ldi	r30, 0x4F	; 79
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	83 62       	ori	r24, 0x23	; 35
     f22:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS10) | (1 << WGM12);
     f24:	ae e4       	ldi	r26, 0x4E	; 78
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ee e4       	ldi	r30, 0x4E	; 78
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	89 60       	ori	r24, 0x09	; 9
     f30:	8c 93       	st	X, r24
	OCR1A = 800;
     f32:	ea e4       	ldi	r30, 0x4A	; 74
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 e2       	ldi	r24, 0x20	; 32
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	80 83       	st	Z, r24
	OCR1B = 0;
     f3e:	e8 e4       	ldi	r30, 0x48	; 72
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	11 82       	std	Z+1, r1	; 0x01
     f44:	10 82       	st	Z, r1
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <init_interrupt>:
 *  Created on: Oct 1, 2021
 *      Author: LENOVOOOO
 */
#include "../External_Interupts/Ex_Int.h"

void init_interrupt(){
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
#if EXTI_INT0 == ENABLED
	GICR |= (1<<INT0);
     f54:	ab e5       	ldi	r26, 0x5B	; 91
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e5       	ldi	r30, 0x5B	; 91
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 64       	ori	r24, 0x40	; 64
     f60:	8c 93       	st	X, r24
#if EXTI_INT0_EDGE == LOW_LEVEL
	MCUCR &= ~(1<<ISC01);
	MCUCR &= ~(1<<ISC00);

#elif EXTI_INT0_EDGE == BOTH_EDGES
	MCUCR &= ~(1<<ISC01);
     f62:	a5 e5       	ldi	r26, 0x55	; 85
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e5 e5       	ldi	r30, 0x55	; 85
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8d 7f       	andi	r24, 0xFD	; 253
     f6e:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC00);
     f70:	a5 e5       	ldi	r26, 0x55	; 85
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e5 e5       	ldi	r30, 0x55	; 85
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	81 60       	ori	r24, 0x01	; 1
     f7c:	8c 93       	st	X, r24
#endif

#if EXTI_INT1 == ENABLED
	GICR |= (1<<INT0);
#else
	GICR &= ~(1<<INT0);
     f7e:	ab e5       	ldi	r26, 0x5B	; 91
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	eb e5       	ldi	r30, 0x5B	; 91
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 7b       	andi	r24, 0xBF	; 191
     f8a:	8c 93       	st	X, r24
#if EXTI_INT1_EDGE == LOW_LEVEL
	MCUCR &= ~(1<<ISC01);
	MCUCR &= ~(1<<ISC00);

#elif EXTI_INT1_EDGE == BOTH_EDGES
	MCUCR &= ~(1<<ISC01);
     f8c:	a5 e5       	ldi	r26, 0x55	; 85
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e5       	ldi	r30, 0x55	; 85
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8d 7f       	andi	r24, 0xFD	; 253
     f98:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC00);
     f9a:	a5 e5       	ldi	r26, 0x55	; 85
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e5 e5       	ldi	r30, 0x55	; 85
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	81 60       	ori	r24, 0x01	; 1
     fa6:	8c 93       	st	X, r24
#endif

#if EXTI_INT2 == ENABLED
	GICR |= (1<<INT0);
#else
	GICR &= ~(1<<INT0);
     fa8:	ab e5       	ldi	r26, 0x5B	; 91
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	eb e5       	ldi	r30, 0x5B	; 91
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 7b       	andi	r24, 0xBF	; 191
     fb4:	8c 93       	st	X, r24
#if EXTI_INT2_EDGE == LOW_LEVEL
	MCUCR &= ~(1<<ISC01);
	MCUCR &= ~(1<<ISC00);

#elif EXTI_INT2_EDGE == BOTH_EDGES
	MCUCR &= ~(1<<ISC01);
     fb6:	a5 e5       	ldi	r26, 0x55	; 85
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e5 e5       	ldi	r30, 0x55	; 85
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8d 7f       	andi	r24, 0xFD	; 253
     fc2:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC00);
     fc4:	a5 e5       	ldi	r26, 0x55	; 85
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e5       	ldi	r30, 0x55	; 85
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	8c 93       	st	X, r24
	MCUCR & = (1<<ISC00);
#elif EXTI_INT2_EDGE == RAISING_EDGE
	MCUCR | = ~(1<<ISC01);
	MCUCR | = (1<<ISC00);
#endif
}
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <init_int0>:

void init_int0(){
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT0); //Enable Interrupt 0
     fe0:	ab e5       	ldi	r26, 0x5B	; 91
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	eb e5       	ldi	r30, 0x5B	; 91
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	80 64       	ori	r24, 0x40	; 64
     fec:	8c 93       	st	X, r24
	//Make interrupt at any logical change
	SET_BIT(MCUCR,ISC00);
     fee:	a5 e5       	ldi	r26, 0x55	; 85
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e5 e5       	ldi	r30, 0x55	; 85
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC01);
     ffc:	a5 e5       	ldi	r26, 0x55	; 85
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e5 e5       	ldi	r30, 0x55	; 85
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8d 7f       	andi	r24, 0xFD	; 253
    1008:	8c 93       	st	X, r24
}
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <__vector_1>:

ISR(INT0_vect){
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
	p1();
    103a:	e0 91 a2 03 	lds	r30, 0x03A2
    103e:	f0 91 a3 03 	lds	r31, 0x03A3
    1042:	09 95       	icall
}
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <__vector_2>:
ISR(INT1_vect){
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	2f 93       	push	r18
    1076:	3f 93       	push	r19
    1078:	4f 93       	push	r20
    107a:	5f 93       	push	r21
    107c:	6f 93       	push	r22
    107e:	7f 93       	push	r23
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	af 93       	push	r26
    1086:	bf 93       	push	r27
    1088:	ef 93       	push	r30
    108a:	ff 93       	push	r31
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
	p1();
    1094:	e0 91 a2 03 	lds	r30, 0x03A2
    1098:	f0 91 a3 03 	lds	r31, 0x03A3
    109c:	09 95       	icall
}
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	ff 91       	pop	r31
    10a4:	ef 91       	pop	r30
    10a6:	bf 91       	pop	r27
    10a8:	af 91       	pop	r26
    10aa:	9f 91       	pop	r25
    10ac:	8f 91       	pop	r24
    10ae:	7f 91       	pop	r23
    10b0:	6f 91       	pop	r22
    10b2:	5f 91       	pop	r21
    10b4:	4f 91       	pop	r20
    10b6:	3f 91       	pop	r19
    10b8:	2f 91       	pop	r18
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f 90       	pop	r0
    10c0:	1f 90       	pop	r1
    10c2:	18 95       	reti

000010c4 <__vector_3>:
ISR(INT2_vect){
    10c4:	1f 92       	push	r1
    10c6:	0f 92       	push	r0
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	2f 93       	push	r18
    10d0:	3f 93       	push	r19
    10d2:	4f 93       	push	r20
    10d4:	5f 93       	push	r21
    10d6:	6f 93       	push	r22
    10d8:	7f 93       	push	r23
    10da:	8f 93       	push	r24
    10dc:	9f 93       	push	r25
    10de:	af 93       	push	r26
    10e0:	bf 93       	push	r27
    10e2:	ef 93       	push	r30
    10e4:	ff 93       	push	r31
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	p1();
    10ee:	e0 91 a2 03 	lds	r30, 0x03A2
    10f2:	f0 91 a3 03 	lds	r31, 0x03A3
    10f6:	09 95       	icall
}
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <set_cb_int0>:
void set_cb_int0(void(*p2)()){
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <set_cb_int0+0x6>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	9a 83       	std	Y+2, r25	; 0x02
    112a:	89 83       	std	Y+1, r24	; 0x01
	p1 = p2;
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	9a 81       	ldd	r25, Y+2	; 0x02
    1130:	90 93 a3 03 	sts	0x03A3, r25
    1134:	80 93 a2 03 	sts	0x03A2, r24
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <set_cb_int1>:
void set_cb_int1(void(*p2)()){
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <set_cb_int1+0x6>
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	89 83       	std	Y+1, r24	; 0x01
	p1 = p2;
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	90 93 a3 03 	sts	0x03A3, r25
    1158:	80 93 a2 03 	sts	0x03A2, r24
}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <set_cb_int2>:
void set_cb_int2(void(*p2)()){
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <set_cb_int2+0x6>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
	p1 = p2;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	90 93 a3 03 	sts	0x03A3, r25
    117c:	80 93 a2 03 	sts	0x03A2, r24
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <DIO_WRITE>:
//2->PORTC
//3->PORTD
#include "DIO.h"
extern pin_config_type pin_configs[];
extern int n;
void DIO_WRITE(uint8 channel, uint8 state) {
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <DIO_WRITE+0x6>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <DIO_WRITE+0x8>
    1192:	00 d0       	rcall	.+0      	; 0x1194 <DIO_WRITE+0xa>
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	8b 83       	std	Y+3, r24	; 0x03
    119a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 port_v = channel / 8;
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	86 95       	lsr	r24
    11a0:	86 95       	lsr	r24
    11a2:	86 95       	lsr	r24
    11a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pin_num = channel % 8;
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	87 70       	andi	r24, 0x07	; 7
    11aa:	89 83       	std	Y+1, r24	; 0x01
	switch (port_v) {
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3e 83       	std	Y+6, r19	; 0x06
    11b4:	2d 83       	std	Y+5, r18	; 0x05
    11b6:	8d 81       	ldd	r24, Y+5	; 0x05
    11b8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	91 05       	cpc	r25, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <DIO_WRITE+0x38>
    11c0:	43 c0       	rjmp	.+134    	; 0x1248 <DIO_WRITE+0xbe>
    11c2:	2d 81       	ldd	r18, Y+5	; 0x05
    11c4:	3e 81       	ldd	r19, Y+6	; 0x06
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <DIO_WRITE+0x4c>
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	71 f0       	breq	.+28     	; 0x11f0 <DIO_WRITE+0x66>
    11d4:	bc c0       	rjmp	.+376    	; 0x134e <DIO_WRITE+0x1c4>
    11d6:	2d 81       	ldd	r18, Y+5	; 0x05
    11d8:	3e 81       	ldd	r19, Y+6	; 0x06
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	09 f4       	brne	.+2      	; 0x11e2 <DIO_WRITE+0x58>
    11e0:	5f c0       	rjmp	.+190    	; 0x12a0 <DIO_WRITE+0x116>
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	9e 81       	ldd	r25, Y+6	; 0x06
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	91 05       	cpc	r25, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <DIO_WRITE+0x64>
    11ec:	85 c0       	rjmp	.+266    	; 0x12f8 <DIO_WRITE+0x16e>
    11ee:	af c0       	rjmp	.+350    	; 0x134e <DIO_WRITE+0x1c4>
	case 0:
		if (state == 1)
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	a1 f4       	brne	.+40     	; 0x121e <DIO_WRITE+0x94>
			SET_BIT(PORTA, pin_num);
    11f6:	ab e3       	ldi	r26, 0x3B	; 59
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	eb e3       	ldi	r30, 0x3B	; 59
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_WRITE+0x8a>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <DIO_WRITE+0x86>
    1218:	84 2b       	or	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	98 c0       	rjmp	.+304    	; 0x134e <DIO_WRITE+0x1c4>
		else
			CLR_BIT(PORTA, pin_num);
    121e:	ab e3       	ldi	r26, 0x3B	; 59
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	eb e3       	ldi	r30, 0x3B	; 59
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <DIO_WRITE+0xb2>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <DIO_WRITE+0xae>
    1240:	80 95       	com	r24
    1242:	84 23       	and	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	83 c0       	rjmp	.+262    	; 0x134e <DIO_WRITE+0x1c4>
		break;
	case 1:
		if (state == 1)
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	a1 f4       	brne	.+40     	; 0x1276 <DIO_WRITE+0xec>
			SET_BIT(PORTB, pin_num);
    124e:	a8 e3       	ldi	r26, 0x38	; 56
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e8 e3       	ldi	r30, 0x38	; 56
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_WRITE+0xe2>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_WRITE+0xde>
    1270:	84 2b       	or	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	6c c0       	rjmp	.+216    	; 0x134e <DIO_WRITE+0x1c4>
		else
			CLR_BIT(PORTB, pin_num);
    1276:	a8 e3       	ldi	r26, 0x38	; 56
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e8 e3       	ldi	r30, 0x38	; 56
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_WRITE+0x10a>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_WRITE+0x106>
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	57 c0       	rjmp	.+174    	; 0x134e <DIO_WRITE+0x1c4>
		break;
	case 2:
		if (state == 1)
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	a1 f4       	brne	.+40     	; 0x12ce <DIO_WRITE+0x144>
			SET_BIT(PORTC, pin_num);
    12a6:	a5 e3       	ldi	r26, 0x35	; 53
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e5 e3       	ldi	r30, 0x35	; 53
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_WRITE+0x13a>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_WRITE+0x136>
    12c8:	84 2b       	or	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	40 c0       	rjmp	.+128    	; 0x134e <DIO_WRITE+0x1c4>
		else
			CLR_BIT(PORTC, pin_num);
    12ce:	a5 e3       	ldi	r26, 0x35	; 53
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e5 e3       	ldi	r30, 0x35	; 53
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_WRITE+0x162>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_WRITE+0x15e>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	2b c0       	rjmp	.+86     	; 0x134e <DIO_WRITE+0x1c4>
		break;
	case 3:
		if (state == 1)
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	a1 f4       	brne	.+40     	; 0x1326 <DIO_WRITE+0x19c>
			SET_BIT(PORTD, pin_num);
    12fe:	a2 e3       	ldi	r26, 0x32	; 50
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e2 e3       	ldi	r30, 0x32	; 50
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_WRITE+0x192>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_WRITE+0x18e>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	14 c0       	rjmp	.+40     	; 0x134e <DIO_WRITE+0x1c4>
		else
			CLR_BIT(PORTD, pin_num);
    1326:	a2 e3       	ldi	r26, 0x32	; 50
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e2 e3       	ldi	r30, 0x32	; 50
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_WRITE+0x1ba>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_WRITE+0x1b6>
    1348:	80 95       	com	r24
    134a:	84 23       	and	r24, r20
    134c:	8c 93       	st	X, r24
		break;
	}
}
    134e:	26 96       	adiw	r28, 0x06	; 6
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <DIO_READ>:
state_type DIO_READ(uint8 channel) {
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <DIO_READ+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <DIO_READ+0x8>
    1368:	00 d0       	rcall	.+0      	; 0x136a <DIO_READ+0xa>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	8c 83       	std	Y+4, r24	; 0x04
	Dio_port_type port_v = channel / 8;
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	86 95       	lsr	r24
    1374:	86 95       	lsr	r24
    1376:	86 95       	lsr	r24
    1378:	8b 83       	std	Y+3, r24	; 0x03
	Dio_pin_type pin_num = channel % 8;
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	87 70       	andi	r24, 0x07	; 7
    137e:	8a 83       	std	Y+2, r24	; 0x02
	state_type state = 0;
    1380:	19 82       	std	Y+1, r1	; 0x01
	switch (port_v) {
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	3e 83       	std	Y+6, r19	; 0x06
    138a:	2d 83       	std	Y+5, r18	; 0x05
    138c:	4d 81       	ldd	r20, Y+5	; 0x05
    138e:	5e 81       	ldd	r21, Y+6	; 0x06
    1390:	41 30       	cpi	r20, 0x01	; 1
    1392:	51 05       	cpc	r21, r1
    1394:	41 f1       	breq	.+80     	; 0x13e6 <DIO_READ+0x86>
    1396:	8d 81       	ldd	r24, Y+5	; 0x05
    1398:	9e 81       	ldd	r25, Y+6	; 0x06
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	91 05       	cpc	r25, r1
    139e:	34 f4       	brge	.+12     	; 0x13ac <DIO_READ+0x4c>
    13a0:	2d 81       	ldd	r18, Y+5	; 0x05
    13a2:	3e 81       	ldd	r19, Y+6	; 0x06
    13a4:	21 15       	cp	r18, r1
    13a6:	31 05       	cpc	r19, r1
    13a8:	61 f0       	breq	.+24     	; 0x13c2 <DIO_READ+0x62>
    13aa:	53 c0       	rjmp	.+166    	; 0x1452 <DIO_READ+0xf2>
    13ac:	4d 81       	ldd	r20, Y+5	; 0x05
    13ae:	5e 81       	ldd	r21, Y+6	; 0x06
    13b0:	42 30       	cpi	r20, 0x02	; 2
    13b2:	51 05       	cpc	r21, r1
    13b4:	51 f1       	breq	.+84     	; 0x140a <DIO_READ+0xaa>
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	83 30       	cpi	r24, 0x03	; 3
    13bc:	91 05       	cpc	r25, r1
    13be:	b9 f1       	breq	.+110    	; 0x142e <DIO_READ+0xce>
    13c0:	48 c0       	rjmp	.+144    	; 0x1452 <DIO_READ+0xf2>
	case 0:
		state = GET_BIT(PINA, pin_num);
    13c2:	e9 e3       	ldi	r30, 0x39	; 57
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	88 2f       	mov	r24, r24
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a9 01       	movw	r20, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_READ+0x7a>
    13d6:	55 95       	asr	r21
    13d8:	47 95       	ror	r20
    13da:	8a 95       	dec	r24
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_READ+0x76>
    13de:	ca 01       	movw	r24, r20
    13e0:	81 70       	andi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	38 c0       	rjmp	.+112    	; 0x1456 <DIO_READ+0xf6>
		break;
	case 1:
		state = GET_BIT(PINB, pin_num);
    13e6:	e6 e3       	ldi	r30, 0x36	; 54
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_READ+0x9e>
    13fa:	55 95       	asr	r21
    13fc:	47 95       	ror	r20
    13fe:	8a 95       	dec	r24
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_READ+0x9a>
    1402:	ca 01       	movw	r24, r20
    1404:	81 70       	andi	r24, 0x01	; 1
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	26 c0       	rjmp	.+76     	; 0x1456 <DIO_READ+0xf6>
		break;
	case 2:
		state = GET_BIT(PINC, pin_num);
    140a:	e3 e3       	ldi	r30, 0x33	; 51
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	a9 01       	movw	r20, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_READ+0xc2>
    141e:	55 95       	asr	r21
    1420:	47 95       	ror	r20
    1422:	8a 95       	dec	r24
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_READ+0xbe>
    1426:	ca 01       	movw	r24, r20
    1428:	81 70       	andi	r24, 0x01	; 1
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	14 c0       	rjmp	.+40     	; 0x1456 <DIO_READ+0xf6>
		break;
	case 3:
		state = GET_BIT(PIND, pin_num);
    142e:	e0 e3       	ldi	r30, 0x30	; 48
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a9 01       	movw	r20, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_READ+0xe6>
    1442:	55 95       	asr	r21
    1444:	47 95       	ror	r20
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_READ+0xe2>
    144a:	ca 01       	movw	r24, r20
    144c:	81 70       	andi	r24, 0x01	; 1
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_READ+0xf6>
		break;
	default:
		state = -1;
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    1456:	89 81       	ldd	r24, Y+1	; 0x01
}
    1458:	26 96       	adiw	r28, 0x06	; 6
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <dio_init>:

void dio_init(void) {
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <dio_init+0x6>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <dio_init+0x8>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
	int i;
	for (i = 0; i < n; i++) {
    1476:	1a 82       	std	Y+2, r1	; 0x02
    1478:	19 82       	std	Y+1, r1	; 0x01
    147a:	57 c1       	rjmp	.+686    	; 0x172a <dio_init+0x2c0>
		switch (pin_configs[i].port) {
    147c:	29 81       	ldd	r18, Y+1	; 0x01
    147e:	3a 81       	ldd	r19, Y+2	; 0x02
    1480:	c9 01       	movw	r24, r18
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	82 0f       	add	r24, r18
    1488:	93 1f       	adc	r25, r19
    148a:	fc 01       	movw	r30, r24
    148c:	ec 58       	subi	r30, 0x8C	; 140
    148e:	fe 4f       	sbci	r31, 0xFE	; 254
    1490:	80 81       	ld	r24, Z
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3c 83       	std	Y+4, r19	; 0x04
    1498:	2b 83       	std	Y+3, r18	; 0x03
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	9c 81       	ldd	r25, Y+4	; 0x04
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	91 05       	cpc	r25, r1
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <dio_init+0x3c>
    14a4:	61 c0       	rjmp	.+194    	; 0x1568 <dio_init+0xfe>
    14a6:	2b 81       	ldd	r18, Y+3	; 0x03
    14a8:	3c 81       	ldd	r19, Y+4	; 0x04
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	2c f4       	brge	.+10     	; 0x14ba <dio_init+0x50>
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	71 f0       	breq	.+28     	; 0x14d4 <dio_init+0x6a>
    14b8:	33 c1       	rjmp	.+614    	; 0x1720 <dio_init+0x2b6>
    14ba:	2b 81       	ldd	r18, Y+3	; 0x03
    14bc:	3c 81       	ldd	r19, Y+4	; 0x04
    14be:	22 30       	cpi	r18, 0x02	; 2
    14c0:	31 05       	cpc	r19, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <dio_init+0x5c>
    14c4:	9b c0       	rjmp	.+310    	; 0x15fc <dio_init+0x192>
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	83 30       	cpi	r24, 0x03	; 3
    14cc:	91 05       	cpc	r25, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <dio_init+0x68>
    14d0:	df c0       	rjmp	.+446    	; 0x1690 <dio_init+0x226>
    14d2:	26 c1       	rjmp	.+588    	; 0x1720 <dio_init+0x2b6>
		case DIO_PORTA:
			if (pin_configs[i].dir == OUTPUT)
    14d4:	29 81       	ldd	r18, Y+1	; 0x01
    14d6:	3a 81       	ldd	r19, Y+2	; 0x02
    14d8:	c9 01       	movw	r24, r18
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	82 0f       	add	r24, r18
    14e0:	93 1f       	adc	r25, r19
    14e2:	fc 01       	movw	r30, r24
    14e4:	ea 58       	subi	r30, 0x8A	; 138
    14e6:	fe 4f       	sbci	r31, 0xFE	; 254
    14e8:	80 81       	ld	r24, Z
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	f1 f4       	brne	.+60     	; 0x152a <dio_init+0xc0>
				SET_BIT(DDRA, pin_configs[i].pin);
    14ee:	aa e3       	ldi	r26, 0x3A	; 58
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ea e3       	ldi	r30, 0x3A	; 58
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	29 81       	ldd	r18, Y+1	; 0x01
    14fc:	3a 81       	ldd	r19, Y+2	; 0x02
    14fe:	c9 01       	movw	r24, r18
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	82 0f       	add	r24, r18
    1506:	93 1f       	adc	r25, r19
    1508:	fc 01       	movw	r30, r24
    150a:	eb 58       	subi	r30, 0x8B	; 139
    150c:	fe 4f       	sbci	r31, 0xFE	; 254
    150e:	80 81       	ld	r24, Z
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <dio_init+0xb6>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <dio_init+0xb2>
    1524:	84 2b       	or	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	fb c0       	rjmp	.+502    	; 0x1720 <dio_init+0x2b6>
			else
				CLR_BIT(DDRA, pin_configs[i].pin);
    152a:	aa e3       	ldi	r26, 0x3A	; 58
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ea e3       	ldi	r30, 0x3A	; 58
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	29 81       	ldd	r18, Y+1	; 0x01
    1538:	3a 81       	ldd	r19, Y+2	; 0x02
    153a:	c9 01       	movw	r24, r18
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	82 0f       	add	r24, r18
    1542:	93 1f       	adc	r25, r19
    1544:	fc 01       	movw	r30, r24
    1546:	eb 58       	subi	r30, 0x8B	; 139
    1548:	fe 4f       	sbci	r31, 0xFE	; 254
    154a:	80 81       	ld	r24, Z
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <dio_init+0xf2>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <dio_init+0xee>
    1560:	80 95       	com	r24
    1562:	84 23       	and	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	dc c0       	rjmp	.+440    	; 0x1720 <dio_init+0x2b6>
			break;
		case DIO_PORTB:
			if (pin_configs[i].dir == OUTPUT)
    1568:	29 81       	ldd	r18, Y+1	; 0x01
    156a:	3a 81       	ldd	r19, Y+2	; 0x02
    156c:	c9 01       	movw	r24, r18
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	82 0f       	add	r24, r18
    1574:	93 1f       	adc	r25, r19
    1576:	fc 01       	movw	r30, r24
    1578:	ea 58       	subi	r30, 0x8A	; 138
    157a:	fe 4f       	sbci	r31, 0xFE	; 254
    157c:	80 81       	ld	r24, Z
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	f1 f4       	brne	.+60     	; 0x15be <dio_init+0x154>
				SET_BIT(DDRB, pin_configs[i].pin);
    1582:	a7 e3       	ldi	r26, 0x37	; 55
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e7 e3       	ldi	r30, 0x37	; 55
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	29 81       	ldd	r18, Y+1	; 0x01
    1590:	3a 81       	ldd	r19, Y+2	; 0x02
    1592:	c9 01       	movw	r24, r18
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	82 0f       	add	r24, r18
    159a:	93 1f       	adc	r25, r19
    159c:	fc 01       	movw	r30, r24
    159e:	eb 58       	subi	r30, 0x8B	; 139
    15a0:	fe 4f       	sbci	r31, 0xFE	; 254
    15a2:	80 81       	ld	r24, Z
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <dio_init+0x14a>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <dio_init+0x146>
    15b8:	84 2b       	or	r24, r20
    15ba:	8c 93       	st	X, r24
    15bc:	b1 c0       	rjmp	.+354    	; 0x1720 <dio_init+0x2b6>
			else
				CLR_BIT(DDRB, pin_configs[i].pin);
    15be:	a7 e3       	ldi	r26, 0x37	; 55
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e7 e3       	ldi	r30, 0x37	; 55
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	29 81       	ldd	r18, Y+1	; 0x01
    15cc:	3a 81       	ldd	r19, Y+2	; 0x02
    15ce:	c9 01       	movw	r24, r18
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	82 0f       	add	r24, r18
    15d6:	93 1f       	adc	r25, r19
    15d8:	fc 01       	movw	r30, r24
    15da:	eb 58       	subi	r30, 0x8B	; 139
    15dc:	fe 4f       	sbci	r31, 0xFE	; 254
    15de:	80 81       	ld	r24, Z
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <dio_init+0x186>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <dio_init+0x182>
    15f4:	80 95       	com	r24
    15f6:	84 23       	and	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	92 c0       	rjmp	.+292    	; 0x1720 <dio_init+0x2b6>
			break;
		case DIO_PORTC:
			if (pin_configs[i].dir == OUTPUT)
    15fc:	29 81       	ldd	r18, Y+1	; 0x01
    15fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1600:	c9 01       	movw	r24, r18
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	82 0f       	add	r24, r18
    1608:	93 1f       	adc	r25, r19
    160a:	fc 01       	movw	r30, r24
    160c:	ea 58       	subi	r30, 0x8A	; 138
    160e:	fe 4f       	sbci	r31, 0xFE	; 254
    1610:	80 81       	ld	r24, Z
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	f1 f4       	brne	.+60     	; 0x1652 <dio_init+0x1e8>
				SET_BIT(DDRC, pin_configs[i].pin);
    1616:	a4 e3       	ldi	r26, 0x34	; 52
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e4 e3       	ldi	r30, 0x34	; 52
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	29 81       	ldd	r18, Y+1	; 0x01
    1624:	3a 81       	ldd	r19, Y+2	; 0x02
    1626:	c9 01       	movw	r24, r18
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	82 0f       	add	r24, r18
    162e:	93 1f       	adc	r25, r19
    1630:	fc 01       	movw	r30, r24
    1632:	eb 58       	subi	r30, 0x8B	; 139
    1634:	fe 4f       	sbci	r31, 0xFE	; 254
    1636:	80 81       	ld	r24, Z
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <dio_init+0x1de>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <dio_init+0x1da>
    164c:	84 2b       	or	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	67 c0       	rjmp	.+206    	; 0x1720 <dio_init+0x2b6>
			else
				CLR_BIT(DDRC, pin_configs[i].pin);
    1652:	a4 e3       	ldi	r26, 0x34	; 52
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e4 e3       	ldi	r30, 0x34	; 52
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	29 81       	ldd	r18, Y+1	; 0x01
    1660:	3a 81       	ldd	r19, Y+2	; 0x02
    1662:	c9 01       	movw	r24, r18
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	82 0f       	add	r24, r18
    166a:	93 1f       	adc	r25, r19
    166c:	fc 01       	movw	r30, r24
    166e:	eb 58       	subi	r30, 0x8B	; 139
    1670:	fe 4f       	sbci	r31, 0xFE	; 254
    1672:	80 81       	ld	r24, Z
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <dio_init+0x21a>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <dio_init+0x216>
    1688:	80 95       	com	r24
    168a:	84 23       	and	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	48 c0       	rjmp	.+144    	; 0x1720 <dio_init+0x2b6>
			break;
		case DIO_PORTD:
			if (pin_configs[i].dir == OUTPUT)
    1690:	29 81       	ldd	r18, Y+1	; 0x01
    1692:	3a 81       	ldd	r19, Y+2	; 0x02
    1694:	c9 01       	movw	r24, r18
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	82 0f       	add	r24, r18
    169c:	93 1f       	adc	r25, r19
    169e:	fc 01       	movw	r30, r24
    16a0:	ea 58       	subi	r30, 0x8A	; 138
    16a2:	fe 4f       	sbci	r31, 0xFE	; 254
    16a4:	80 81       	ld	r24, Z
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	f1 f4       	brne	.+60     	; 0x16e6 <dio_init+0x27c>
				SET_BIT(DDRD, pin_configs[i].pin);
    16aa:	a1 e3       	ldi	r26, 0x31	; 49
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e1 e3       	ldi	r30, 0x31	; 49
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	29 81       	ldd	r18, Y+1	; 0x01
    16b8:	3a 81       	ldd	r19, Y+2	; 0x02
    16ba:	c9 01       	movw	r24, r18
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	82 0f       	add	r24, r18
    16c2:	93 1f       	adc	r25, r19
    16c4:	fc 01       	movw	r30, r24
    16c6:	eb 58       	subi	r30, 0x8B	; 139
    16c8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ca:	80 81       	ld	r24, Z
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <dio_init+0x272>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <dio_init+0x26e>
    16e0:	84 2b       	or	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	1d c0       	rjmp	.+58     	; 0x1720 <dio_init+0x2b6>
			else
				CLR_BIT(DDRD, pin_configs[i].pin);
    16e6:	a1 e3       	ldi	r26, 0x31	; 49
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e1 e3       	ldi	r30, 0x31	; 49
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	29 81       	ldd	r18, Y+1	; 0x01
    16f4:	3a 81       	ldd	r19, Y+2	; 0x02
    16f6:	c9 01       	movw	r24, r18
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	82 0f       	add	r24, r18
    16fe:	93 1f       	adc	r25, r19
    1700:	fc 01       	movw	r30, r24
    1702:	eb 58       	subi	r30, 0x8B	; 139
    1704:	fe 4f       	sbci	r31, 0xFE	; 254
    1706:	80 81       	ld	r24, Z
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <dio_init+0x2ac>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	2a 95       	dec	r18
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <dio_init+0x2a8>
    171a:	80 95       	com	r24
    171c:	84 23       	and	r24, r20
    171e:	8c 93       	st	X, r24
	return state;
}

void dio_init(void) {
	int i;
	for (i = 0; i < n; i++) {
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	9a 81       	ldd	r25, Y+2	; 0x02
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	9a 83       	std	Y+2, r25	; 0x02
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	20 91 aa 01 	lds	r18, 0x01AA
    172e:	30 91 ab 01 	lds	r19, 0x01AB
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	82 17       	cp	r24, r18
    1738:	93 07       	cpc	r25, r19
    173a:	0c f4       	brge	.+2      	; 0x173e <dio_init+0x2d4>
    173c:	9f ce       	rjmp	.-706    	; 0x147c <dio_init+0x12>
			break;
		default:
			break;
		}
	}
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <lcd_send_ch>:
 *  Created on: Sep 24, 2021
 *      Author: LENOVOOOO
 */
#include "lcd.h"

void lcd_send_ch(unsigned char data) {
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	c1 56       	subi	r28, 0x61	; 97
    175a:	d0 40       	sbci	r29, 0x00	; 0
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	fe 01       	movw	r30, r28
    1768:	ef 59       	subi	r30, 0x9F	; 159
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	80 83       	st	Z, r24
	DIO_WRITE(RS, HIGH);
    176e:	89 e0       	ldi	r24, 0x09	; 9
    1770:	61 e0       	ldi	r22, 0x01	; 1
    1772:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	DIO_WRITE(RW, LOW);
    1776:	8a e0       	ldi	r24, 0x0A	; 10
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(data, 4)) {DIO_WRITE(D4, HIGH);}else{DIO_WRITE(D4, LOW);}
    177e:	fe 01       	movw	r30, r28
    1780:	ef 59       	subi	r30, 0x9F	; 159
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	80 81       	ld	r24, Z
    1786:	82 95       	swap	r24
    1788:	8f 70       	andi	r24, 0x0F	; 15
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	81 70       	andi	r24, 0x01	; 1
    1790:	90 70       	andi	r25, 0x00	; 0
    1792:	88 23       	and	r24, r24
    1794:	29 f0       	breq	.+10     	; 0x17a0 <lcd_send_ch+0x54>
    1796:	84 e0       	ldi	r24, 0x04	; 4
    1798:	61 e0       	ldi	r22, 0x01	; 1
    179a:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    179e:	04 c0       	rjmp	.+8      	; 0x17a8 <lcd_send_ch+0x5c>
    17a0:	84 e0       	ldi	r24, 0x04	; 4
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(data, 5)) {DIO_WRITE(D5, HIGH);}else {DIO_WRITE(D5, LOW);}
    17a8:	fe 01       	movw	r30, r28
    17aa:	ef 59       	subi	r30, 0x9F	; 159
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	80 81       	ld	r24, Z
    17b0:	82 95       	swap	r24
    17b2:	86 95       	lsr	r24
    17b4:	87 70       	andi	r24, 0x07	; 7
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	81 70       	andi	r24, 0x01	; 1
    17bc:	90 70       	andi	r25, 0x00	; 0
    17be:	88 23       	and	r24, r24
    17c0:	29 f0       	breq	.+10     	; 0x17cc <lcd_send_ch+0x80>
    17c2:	85 e0       	ldi	r24, 0x05	; 5
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <lcd_send_ch+0x88>
    17cc:	85 e0       	ldi	r24, 0x05	; 5
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(data, 6)) {DIO_WRITE(D6, HIGH);}else {DIO_WRITE(D6, LOW);}
    17d4:	fe 01       	movw	r30, r28
    17d6:	ef 59       	subi	r30, 0x9F	; 159
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 81       	ld	r24, Z
    17dc:	82 95       	swap	r24
    17de:	86 95       	lsr	r24
    17e0:	86 95       	lsr	r24
    17e2:	83 70       	andi	r24, 0x03	; 3
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	81 70       	andi	r24, 0x01	; 1
    17ea:	90 70       	andi	r25, 0x00	; 0
    17ec:	88 23       	and	r24, r24
    17ee:	29 f0       	breq	.+10     	; 0x17fa <lcd_send_ch+0xae>
    17f0:	86 e0       	ldi	r24, 0x06	; 6
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    17f8:	04 c0       	rjmp	.+8      	; 0x1802 <lcd_send_ch+0xb6>
    17fa:	86 e0       	ldi	r24, 0x06	; 6
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(data, 7)) {DIO_WRITE(D7, HIGH);}else {DIO_WRITE(D7, LOW);}
    1802:	fe 01       	movw	r30, r28
    1804:	ef 59       	subi	r30, 0x9F	; 159
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	80 81       	ld	r24, Z
    180a:	88 23       	and	r24, r24
    180c:	2c f4       	brge	.+10     	; 0x1818 <lcd_send_ch+0xcc>
    180e:	87 e0       	ldi	r24, 0x07	; 7
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    1816:	04 c0       	rjmp	.+8      	; 0x1820 <lcd_send_ch+0xd4>
    1818:	87 e0       	ldi	r24, 0x07	; 7
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	DIO_WRITE(E, HIGH);
    1820:	8b e0       	ldi	r24, 0x0B	; 11
    1822:	61 e0       	ldi	r22, 0x01	; 1
    1824:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    1828:	fe 01       	movw	r30, r28
    182a:	e3 5a       	subi	r30, 0xA3	; 163
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a0 e2       	ldi	r26, 0x20	; 32
    1834:	b1 e4       	ldi	r27, 0x41	; 65
    1836:	80 83       	st	Z, r24
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	a2 83       	std	Z+2, r26	; 0x02
    183c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    183e:	8e 01       	movw	r16, r28
    1840:	07 5a       	subi	r16, 0xA7	; 167
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	fe 01       	movw	r30, r28
    1846:	e3 5a       	subi	r30, 0xA3	; 163
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	2b ea       	ldi	r18, 0xAB	; 171
    1854:	3a ea       	ldi	r19, 0xAA	; 170
    1856:	4a ea       	ldi	r20, 0xAA	; 170
    1858:	50 e4       	ldi	r21, 0x40	; 64
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	f8 01       	movw	r30, r16
    1864:	80 83       	st	Z, r24
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	a2 83       	std	Z+2, r26	; 0x02
    186a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    186c:	fe 01       	movw	r30, r28
    186e:	e7 5a       	subi	r30, 0xA7	; 167
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e8       	ldi	r20, 0x80	; 128
    1880:	5f e3       	ldi	r21, 0x3F	; 63
    1882:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1886:	88 23       	and	r24, r24
    1888:	34 f4       	brge	.+12     	; 0x1896 <lcd_send_ch+0x14a>
		__ticks = 1;
    188a:	fe 01       	movw	r30, r28
    188c:	e8 5a       	subi	r30, 0xA8	; 168
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	80 83       	st	Z, r24
    1894:	e0 c0       	rjmp	.+448    	; 0x1a56 <lcd_send_ch+0x30a>
	else if (__tmp > 255)
    1896:	fe 01       	movw	r30, r28
    1898:	e7 5a       	subi	r30, 0xA7	; 167
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	60 81       	ld	r22, Z
    189e:	71 81       	ldd	r23, Z+1	; 0x01
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	4f e7       	ldi	r20, 0x7F	; 127
    18aa:	53 e4       	ldi	r21, 0x43	; 67
    18ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18b0:	18 16       	cp	r1, r24
    18b2:	0c f0       	brlt	.+2      	; 0x18b6 <lcd_send_ch+0x16a>
    18b4:	c0 c0       	rjmp	.+384    	; 0x1a36 <lcd_send_ch+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    18b6:	fe 01       	movw	r30, r28
    18b8:	e3 5a       	subi	r30, 0xA3	; 163
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	60 81       	ld	r22, Z
    18be:	71 81       	ldd	r23, Z+1	; 0x01
    18c0:	82 81       	ldd	r24, Z+2	; 0x02
    18c2:	93 81       	ldd	r25, Z+3	; 0x03
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	4a e7       	ldi	r20, 0x7A	; 122
    18ca:	54 e4       	ldi	r21, 0x44	; 68
    18cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	fe 01       	movw	r30, r28
    18d6:	ec 5a       	subi	r30, 0xAC	; 172
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 83       	st	Z, r24
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	a2 83       	std	Z+2, r26	; 0x02
    18e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e2:	8e 01       	movw	r16, r28
    18e4:	00 5b       	subi	r16, 0xB0	; 176
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
    18e8:	fe 01       	movw	r30, r28
    18ea:	ec 5a       	subi	r30, 0xAC	; 172
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	60 81       	ld	r22, Z
    18f0:	71 81       	ldd	r23, Z+1	; 0x01
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	93 81       	ldd	r25, Z+3	; 0x03
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	4a e7       	ldi	r20, 0x7A	; 122
    18fc:	55 e4       	ldi	r21, 0x45	; 69
    18fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	f8 01       	movw	r30, r16
    1908:	80 83       	st	Z, r24
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	a2 83       	std	Z+2, r26	; 0x02
    190e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1910:	fe 01       	movw	r30, r28
    1912:	e0 5b       	subi	r30, 0xB0	; 176
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    192a:	88 23       	and	r24, r24
    192c:	44 f4       	brge	.+16     	; 0x193e <lcd_send_ch+0x1f2>
		__ticks = 1;
    192e:	fe 01       	movw	r30, r28
    1930:	e2 5b       	subi	r30, 0xB2	; 178
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	80 83       	st	Z, r24
    193c:	64 c0       	rjmp	.+200    	; 0x1a06 <lcd_send_ch+0x2ba>
	else if (__tmp > 65535)
    193e:	fe 01       	movw	r30, r28
    1940:	e0 5b       	subi	r30, 0xB0	; 176
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	60 81       	ld	r22, Z
    1946:	71 81       	ldd	r23, Z+1	; 0x01
    1948:	82 81       	ldd	r24, Z+2	; 0x02
    194a:	93 81       	ldd	r25, Z+3	; 0x03
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	3f ef       	ldi	r19, 0xFF	; 255
    1950:	4f e7       	ldi	r20, 0x7F	; 127
    1952:	57 e4       	ldi	r21, 0x47	; 71
    1954:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1958:	18 16       	cp	r1, r24
    195a:	0c f0       	brlt	.+2      	; 0x195e <lcd_send_ch+0x212>
    195c:	43 c0       	rjmp	.+134    	; 0x19e4 <lcd_send_ch+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195e:	fe 01       	movw	r30, r28
    1960:	ec 5a       	subi	r30, 0xAC	; 172
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e2       	ldi	r20, 0x20	; 32
    1972:	51 e4       	ldi	r21, 0x41	; 65
    1974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	8e 01       	movw	r16, r28
    197e:	02 5b       	subi	r16, 0xB2	; 178
    1980:	1f 4f       	sbci	r17, 0xFF	; 255
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	f8 01       	movw	r30, r16
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	80 83       	st	Z, r24
    1994:	1f c0       	rjmp	.+62     	; 0x19d4 <lcd_send_ch+0x288>
    1996:	fe 01       	movw	r30, r28
    1998:	e4 5b       	subi	r30, 0xB4	; 180
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 e9       	ldi	r24, 0x90	; 144
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19a4:	fe 01       	movw	r30, r28
    19a6:	e4 5b       	subi	r30, 0xB4	; 180
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	f1 f7       	brne	.-4      	; 0x19ae <lcd_send_ch+0x262>
    19b2:	fe 01       	movw	r30, r28
    19b4:	e4 5b       	subi	r30, 0xB4	; 180
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19bc:	de 01       	movw	r26, r28
    19be:	a2 5b       	subi	r26, 0xB2	; 178
    19c0:	bf 4f       	sbci	r27, 0xFF	; 255
    19c2:	fe 01       	movw	r30, r28
    19c4:	e2 5b       	subi	r30, 0xB2	; 178
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	11 96       	adiw	r26, 0x01	; 1
    19d0:	9c 93       	st	X, r25
    19d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d4:	fe 01       	movw	r30, r28
    19d6:	e2 5b       	subi	r30, 0xB2	; 178
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	d1 f6       	brne	.-76     	; 0x1996 <lcd_send_ch+0x24a>
    19e2:	4b c0       	rjmp	.+150    	; 0x1a7a <lcd_send_ch+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e4:	8e 01       	movw	r16, r28
    19e6:	02 5b       	subi	r16, 0xB2	; 178
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	fe 01       	movw	r30, r28
    19ec:	e0 5b       	subi	r30, 0xB0	; 176
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	60 81       	ld	r22, Z
    19f2:	71 81       	ldd	r23, Z+1	; 0x01
    19f4:	82 81       	ldd	r24, Z+2	; 0x02
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	f8 01       	movw	r30, r16
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	80 83       	st	Z, r24
    1a06:	de 01       	movw	r26, r28
    1a08:	a6 5b       	subi	r26, 0xB6	; 182
    1a0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e2 5b       	subi	r30, 0xB2	; 178
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	11 96       	adiw	r26, 0x01	; 1
    1a18:	9c 93       	st	X, r25
    1a1a:	8e 93       	st	-X, r24
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e6 5b       	subi	r30, 0xB6	; 182
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	91 81       	ldd	r25, Z+1	; 0x01
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <lcd_send_ch+0x2da>
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e6 5b       	subi	r30, 0xB6	; 182
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
    1a34:	22 c0       	rjmp	.+68     	; 0x1a7a <lcd_send_ch+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a36:	8e 01       	movw	r16, r28
    1a38:	08 5a       	subi	r16, 0xA8	; 168
    1a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e7 5a       	subi	r30, 0xA7	; 167
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	93 81       	ldd	r25, Z+3	; 0x03
    1a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	f8 01       	movw	r30, r16
    1a54:	80 83       	st	Z, r24
    1a56:	de 01       	movw	r26, r28
    1a58:	a7 5b       	subi	r26, 0xB7	; 183
    1a5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e8 5a       	subi	r30, 0xA8	; 168
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	80 81       	ld	r24, Z
    1a64:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a66:	fe 01       	movw	r30, r28
    1a68:	e7 5b       	subi	r30, 0xB7	; 183
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8a 95       	dec	r24
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <lcd_send_ch+0x322>
    1a72:	fe 01       	movw	r30, r28
    1a74:	e7 5b       	subi	r30, 0xB7	; 183
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	80 83       	st	Z, r24
	_delay_us(10);
	DIO_WRITE(E, LOW);
    1a7a:	8b e0       	ldi	r24, 0x0B	; 11
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    1a82:	fe 01       	movw	r30, r28
    1a84:	eb 5b       	subi	r30, 0xBB	; 187
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a8 e4       	ldi	r26, 0x48	; 72
    1a8e:	b3 e4       	ldi	r27, 0x43	; 67
    1a90:	80 83       	st	Z, r24
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	a2 83       	std	Z+2, r26	; 0x02
    1a96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a98:	8e 01       	movw	r16, r28
    1a9a:	0f 5b       	subi	r16, 0xBF	; 191
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	eb 5b       	subi	r30, 0xBB	; 187
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	2b ea       	ldi	r18, 0xAB	; 171
    1aae:	3a ea       	ldi	r19, 0xAA	; 170
    1ab0:	4a ea       	ldi	r20, 0xAA	; 170
    1ab2:	50 e4       	ldi	r21, 0x40	; 64
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	f8 01       	movw	r30, r16
    1abe:	80 83       	st	Z, r24
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	a2 83       	std	Z+2, r26	; 0x02
    1ac4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ef 5b       	subi	r30, 0xBF	; 191
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	60 81       	ld	r22, Z
    1ace:	71 81       	ldd	r23, Z+1	; 0x01
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e8       	ldi	r20, 0x80	; 128
    1ada:	5f e3       	ldi	r21, 0x3F	; 63
    1adc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae0:	88 23       	and	r24, r24
    1ae2:	34 f4       	brge	.+12     	; 0x1af0 <lcd_send_ch+0x3a4>
		__ticks = 1;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e0 5c       	subi	r30, 0xC0	; 192
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 83       	st	Z, r24
    1aee:	9d c0       	rjmp	.+314    	; 0x1c2a <lcd_send_ch+0x4de>
	else if (__tmp > 255)
    1af0:	fe 01       	movw	r30, r28
    1af2:	ef 5b       	subi	r30, 0xBF	; 191
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	60 81       	ld	r22, Z
    1af8:	71 81       	ldd	r23, Z+1	; 0x01
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	53 e4       	ldi	r21, 0x43	; 67
    1b06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <lcd_send_ch+0x3c4>
    1b0e:	7e c0       	rjmp	.+252    	; 0x1c0c <lcd_send_ch+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    1b10:	fe 01       	movw	r30, r28
    1b12:	eb 5b       	subi	r30, 0xBB	; 187
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a e7       	ldi	r20, 0x7A	; 122
    1b24:	54 e4       	ldi	r21, 0x44	; 68
    1b26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	8c af       	std	Y+60, r24	; 0x3c
    1b30:	9d af       	std	Y+61, r25	; 0x3d
    1b32:	ae af       	std	Y+62, r26	; 0x3e
    1b34:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b38:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a e7       	ldi	r20, 0x7A	; 122
    1b44:	55 e4       	ldi	r21, 0x45	; 69
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	88 af       	std	Y+56, r24	; 0x38
    1b50:	99 af       	std	Y+57, r25	; 0x39
    1b52:	aa af       	std	Y+58, r26	; 0x3a
    1b54:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1b56:	68 ad       	ldd	r22, Y+56	; 0x38
    1b58:	79 ad       	ldd	r23, Y+57	; 0x39
    1b5a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b5c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	5f e3       	ldi	r21, 0x3F	; 63
    1b66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	2c f4       	brge	.+10     	; 0x1b78 <lcd_send_ch+0x42c>
		__ticks = 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9f ab       	std	Y+55, r25	; 0x37
    1b74:	8e ab       	std	Y+54, r24	; 0x36
    1b76:	3f c0       	rjmp	.+126    	; 0x1bf6 <lcd_send_ch+0x4aa>
	else if (__tmp > 65535)
    1b78:	68 ad       	ldd	r22, Y+56	; 0x38
    1b7a:	79 ad       	ldd	r23, Y+57	; 0x39
    1b7c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b7e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	4c f5       	brge	.+82     	; 0x1be2 <lcd_send_ch+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b90:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b92:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b94:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b96:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e2       	ldi	r20, 0x20	; 32
    1b9e:	51 e4       	ldi	r21, 0x41	; 65
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9f ab       	std	Y+55, r25	; 0x37
    1bb6:	8e ab       	std	Y+54, r24	; 0x36
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <lcd_send_ch+0x48c>
    1bba:	80 e9       	ldi	r24, 0x90	; 144
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	9d ab       	std	Y+53, r25	; 0x35
    1bc0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bc2:	8c a9       	ldd	r24, Y+52	; 0x34
    1bc4:	9d a9       	ldd	r25, Y+53	; 0x35
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <lcd_send_ch+0x47a>
    1bca:	9d ab       	std	Y+53, r25	; 0x35
    1bcc:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bce:	8e a9       	ldd	r24, Y+54	; 0x36
    1bd0:	9f a9       	ldd	r25, Y+55	; 0x37
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9f ab       	std	Y+55, r25	; 0x37
    1bd6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd8:	8e a9       	ldd	r24, Y+54	; 0x36
    1bda:	9f a9       	ldd	r25, Y+55	; 0x37
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	69 f7       	brne	.-38     	; 0x1bba <lcd_send_ch+0x46e>
    1be0:	2d c0       	rjmp	.+90     	; 0x1c3c <lcd_send_ch+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be2:	68 ad       	ldd	r22, Y+56	; 0x38
    1be4:	79 ad       	ldd	r23, Y+57	; 0x39
    1be6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1be8:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9f ab       	std	Y+55, r25	; 0x37
    1bf4:	8e ab       	std	Y+54, r24	; 0x36
    1bf6:	8e a9       	ldd	r24, Y+54	; 0x36
    1bf8:	9f a9       	ldd	r25, Y+55	; 0x37
    1bfa:	9b ab       	std	Y+51, r25	; 0x33
    1bfc:	8a ab       	std	Y+50, r24	; 0x32
    1bfe:	8a a9       	ldd	r24, Y+50	; 0x32
    1c00:	9b a9       	ldd	r25, Y+51	; 0x33
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <lcd_send_ch+0x4b6>
    1c06:	9b ab       	std	Y+51, r25	; 0x33
    1c08:	8a ab       	std	Y+50, r24	; 0x32
    1c0a:	18 c0       	rjmp	.+48     	; 0x1c3c <lcd_send_ch+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	ef 5b       	subi	r30, 0xBF	; 191
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	60 81       	ld	r22, Z
    1c14:	71 81       	ldd	r23, Z+1	; 0x01
    1c16:	82 81       	ldd	r24, Z+2	; 0x02
    1c18:	93 81       	ldd	r25, Z+3	; 0x03
    1c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	fe 01       	movw	r30, r28
    1c24:	e0 5c       	subi	r30, 0xC0	; 192
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	80 83       	st	Z, r24
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e0 5c       	subi	r30, 0xC0	; 192
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	80 81       	ld	r24, Z
    1c32:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c34:	89 a9       	ldd	r24, Y+49	; 0x31
    1c36:	8a 95       	dec	r24
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <lcd_send_ch+0x4ea>
    1c3a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	if (GET_BIT(data, 0)) {DIO_WRITE(D4, HIGH);}else {DIO_WRITE(D4, LOW);}
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	ef 59       	subi	r30, 0x9F	; 159
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 81       	ld	r24, Z
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	81 70       	andi	r24, 0x01	; 1
    1c4a:	90 70       	andi	r25, 0x00	; 0
    1c4c:	88 23       	and	r24, r24
    1c4e:	29 f0       	breq	.+10     	; 0x1c5a <lcd_send_ch+0x50e>
    1c50:	84 e0       	ldi	r24, 0x04	; 4
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <lcd_send_ch+0x516>
    1c5a:	84 e0       	ldi	r24, 0x04	; 4
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(data, 1)) {DIO_WRITE(D5, HIGH);}else {DIO_WRITE(D5, LOW);}
    1c62:	fe 01       	movw	r30, r28
    1c64:	ef 59       	subi	r30, 0x9F	; 159
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	80 81       	ld	r24, Z
    1c6a:	86 95       	lsr	r24
    1c6c:	88 2f       	mov	r24, r24
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	81 70       	andi	r24, 0x01	; 1
    1c72:	90 70       	andi	r25, 0x00	; 0
    1c74:	88 23       	and	r24, r24
    1c76:	29 f0       	breq	.+10     	; 0x1c82 <lcd_send_ch+0x536>
    1c78:	85 e0       	ldi	r24, 0x05	; 5
    1c7a:	61 e0       	ldi	r22, 0x01	; 1
    1c7c:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    1c80:	04 c0       	rjmp	.+8      	; 0x1c8a <lcd_send_ch+0x53e>
    1c82:	85 e0       	ldi	r24, 0x05	; 5
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(data, 2)) {DIO_WRITE(D6, HIGH);}else {DIO_WRITE(D6, LOW);}
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	ef 59       	subi	r30, 0x9F	; 159
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	86 95       	lsr	r24
    1c94:	86 95       	lsr	r24
    1c96:	88 2f       	mov	r24, r24
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	81 70       	andi	r24, 0x01	; 1
    1c9c:	90 70       	andi	r25, 0x00	; 0
    1c9e:	88 23       	and	r24, r24
    1ca0:	29 f0       	breq	.+10     	; 0x1cac <lcd_send_ch+0x560>
    1ca2:	86 e0       	ldi	r24, 0x06	; 6
    1ca4:	61 e0       	ldi	r22, 0x01	; 1
    1ca6:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    1caa:	04 c0       	rjmp	.+8      	; 0x1cb4 <lcd_send_ch+0x568>
    1cac:	86 e0       	ldi	r24, 0x06	; 6
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(data, 3)) {DIO_WRITE(D7, HIGH);}else {DIO_WRITE(D7, LOW);}
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	ef 59       	subi	r30, 0x9F	; 159
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	80 81       	ld	r24, Z
    1cbc:	86 95       	lsr	r24
    1cbe:	86 95       	lsr	r24
    1cc0:	86 95       	lsr	r24
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	81 70       	andi	r24, 0x01	; 1
    1cc8:	90 70       	andi	r25, 0x00	; 0
    1cca:	88 23       	and	r24, r24
    1ccc:	29 f0       	breq	.+10     	; 0x1cd8 <lcd_send_ch+0x58c>
    1cce:	87 e0       	ldi	r24, 0x07	; 7
    1cd0:	61 e0       	ldi	r22, 0x01	; 1
    1cd2:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <lcd_send_ch+0x594>
    1cd8:	87 e0       	ldi	r24, 0x07	; 7
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	DIO_WRITE(E, HIGH);
    1ce0:	8b e0       	ldi	r24, 0x0B	; 11
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	a0 e2       	ldi	r26, 0x20	; 32
    1cee:	b1 e4       	ldi	r27, 0x41	; 65
    1cf0:	8d a7       	std	Y+45, r24	; 0x2d
    1cf2:	9e a7       	std	Y+46, r25	; 0x2e
    1cf4:	af a7       	std	Y+47, r26	; 0x2f
    1cf6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cf8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cfa:	7e a5       	ldd	r23, Y+46	; 0x2e
    1cfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cfe:	98 a9       	ldd	r25, Y+48	; 0x30
    1d00:	2b ea       	ldi	r18, 0xAB	; 171
    1d02:	3a ea       	ldi	r19, 0xAA	; 170
    1d04:	4a ea       	ldi	r20, 0xAA	; 170
    1d06:	50 e4       	ldi	r21, 0x40	; 64
    1d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	89 a7       	std	Y+41, r24	; 0x29
    1d12:	9a a7       	std	Y+42, r25	; 0x2a
    1d14:	ab a7       	std	Y+43, r26	; 0x2b
    1d16:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1d18:	69 a5       	ldd	r22, Y+41	; 0x29
    1d1a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e8       	ldi	r20, 0x80	; 128
    1d26:	5f e3       	ldi	r21, 0x3F	; 63
    1d28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d2c:	88 23       	and	r24, r24
    1d2e:	1c f4       	brge	.+6      	; 0x1d36 <lcd_send_ch+0x5ea>
		__ticks = 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	88 a7       	std	Y+40, r24	; 0x28
    1d34:	91 c0       	rjmp	.+290    	; 0x1e58 <lcd_send_ch+0x70c>
	else if (__tmp > 255)
    1d36:	69 a5       	ldd	r22, Y+41	; 0x29
    1d38:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	53 e4       	ldi	r21, 0x43	; 67
    1d46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	0c f0       	brlt	.+2      	; 0x1d50 <lcd_send_ch+0x604>
    1d4e:	7b c0       	rjmp	.+246    	; 0x1e46 <lcd_send_ch+0x6fa>
	{
		_delay_ms(__us / 1000.0);
    1d50:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d52:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d56:	98 a9       	ldd	r25, Y+48	; 0x30
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	4a e7       	ldi	r20, 0x7A	; 122
    1d5e:	54 e4       	ldi	r21, 0x44	; 68
    1d60:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	8c a3       	std	Y+36, r24	; 0x24
    1d6a:	9d a3       	std	Y+37, r25	; 0x25
    1d6c:	ae a3       	std	Y+38, r26	; 0x26
    1d6e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d70:	6c a1       	ldd	r22, Y+36	; 0x24
    1d72:	7d a1       	ldd	r23, Y+37	; 0x25
    1d74:	8e a1       	ldd	r24, Y+38	; 0x26
    1d76:	9f a1       	ldd	r25, Y+39	; 0x27
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	4a e7       	ldi	r20, 0x7A	; 122
    1d7e:	55 e4       	ldi	r21, 0x45	; 69
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	88 a3       	std	Y+32, r24	; 0x20
    1d8a:	99 a3       	std	Y+33, r25	; 0x21
    1d8c:	aa a3       	std	Y+34, r26	; 0x22
    1d8e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1d90:	68 a1       	ldd	r22, Y+32	; 0x20
    1d92:	79 a1       	ldd	r23, Y+33	; 0x21
    1d94:	8a a1       	ldd	r24, Y+34	; 0x22
    1d96:	9b a1       	ldd	r25, Y+35	; 0x23
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e8       	ldi	r20, 0x80	; 128
    1d9e:	5f e3       	ldi	r21, 0x3F	; 63
    1da0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da4:	88 23       	and	r24, r24
    1da6:	2c f4       	brge	.+10     	; 0x1db2 <lcd_send_ch+0x666>
		__ticks = 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	9f 8f       	std	Y+31, r25	; 0x1f
    1dae:	8e 8f       	std	Y+30, r24	; 0x1e
    1db0:	3f c0       	rjmp	.+126    	; 0x1e30 <lcd_send_ch+0x6e4>
	else if (__tmp > 65535)
    1db2:	68 a1       	ldd	r22, Y+32	; 0x20
    1db4:	79 a1       	ldd	r23, Y+33	; 0x21
    1db6:	8a a1       	ldd	r24, Y+34	; 0x22
    1db8:	9b a1       	ldd	r25, Y+35	; 0x23
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	3f ef       	ldi	r19, 0xFF	; 255
    1dbe:	4f e7       	ldi	r20, 0x7F	; 127
    1dc0:	57 e4       	ldi	r21, 0x47	; 71
    1dc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dc6:	18 16       	cp	r1, r24
    1dc8:	4c f5       	brge	.+82     	; 0x1e1c <lcd_send_ch+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dca:	6c a1       	ldd	r22, Y+36	; 0x24
    1dcc:	7d a1       	ldd	r23, Y+37	; 0x25
    1dce:	8e a1       	ldd	r24, Y+38	; 0x26
    1dd0:	9f a1       	ldd	r25, Y+39	; 0x27
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e2       	ldi	r20, 0x20	; 32
    1dd8:	51 e4       	ldi	r21, 0x41	; 65
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9f 8f       	std	Y+31, r25	; 0x1f
    1df0:	8e 8f       	std	Y+30, r24	; 0x1e
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <lcd_send_ch+0x6c6>
    1df4:	80 e9       	ldi	r24, 0x90	; 144
    1df6:	91 e0       	ldi	r25, 0x01	; 1
    1df8:	9d 8f       	std	Y+29, r25	; 0x1d
    1dfa:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dfc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dfe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <lcd_send_ch+0x6b4>
    1e04:	9d 8f       	std	Y+29, r25	; 0x1d
    1e06:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e0a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	9f 8f       	std	Y+31, r25	; 0x1f
    1e10:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e14:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	69 f7       	brne	.-38     	; 0x1df4 <lcd_send_ch+0x6a8>
    1e1a:	24 c0       	rjmp	.+72     	; 0x1e64 <lcd_send_ch+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1c:	68 a1       	ldd	r22, Y+32	; 0x20
    1e1e:	79 a1       	ldd	r23, Y+33	; 0x21
    1e20:	8a a1       	ldd	r24, Y+34	; 0x22
    1e22:	9b a1       	ldd	r25, Y+35	; 0x23
    1e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	9f 8f       	std	Y+31, r25	; 0x1f
    1e2e:	8e 8f       	std	Y+30, r24	; 0x1e
    1e30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e34:	9b 8f       	std	Y+27, r25	; 0x1b
    1e36:	8a 8f       	std	Y+26, r24	; 0x1a
    1e38:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e3a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <lcd_send_ch+0x6f0>
    1e40:	9b 8f       	std	Y+27, r25	; 0x1b
    1e42:	8a 8f       	std	Y+26, r24	; 0x1a
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <lcd_send_ch+0x718>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e46:	69 a5       	ldd	r22, Y+41	; 0x29
    1e48:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	88 a7       	std	Y+40, r24	; 0x28
    1e58:	88 a5       	ldd	r24, Y+40	; 0x28
    1e5a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e5c:	89 8d       	ldd	r24, Y+25	; 0x19
    1e5e:	8a 95       	dec	r24
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <lcd_send_ch+0x712>
    1e62:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_WRITE(E, LOW);
    1e64:	8b e0       	ldi	r24, 0x0B	; 11
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a8 e4       	ldi	r26, 0x48	; 72
    1e72:	b3 e4       	ldi	r27, 0x43	; 67
    1e74:	8d 8b       	std	Y+21, r24	; 0x15
    1e76:	9e 8b       	std	Y+22, r25	; 0x16
    1e78:	af 8b       	std	Y+23, r26	; 0x17
    1e7a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e80:	8f 89       	ldd	r24, Y+23	; 0x17
    1e82:	98 8d       	ldd	r25, Y+24	; 0x18
    1e84:	2b ea       	ldi	r18, 0xAB	; 171
    1e86:	3a ea       	ldi	r19, 0xAA	; 170
    1e88:	4a ea       	ldi	r20, 0xAA	; 170
    1e8a:	50 e4       	ldi	r21, 0x40	; 64
    1e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	89 8b       	std	Y+17, r24	; 0x11
    1e96:	9a 8b       	std	Y+18, r25	; 0x12
    1e98:	ab 8b       	std	Y+19, r26	; 0x13
    1e9a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e9c:	69 89       	ldd	r22, Y+17	; 0x11
    1e9e:	7a 89       	ldd	r23, Y+18	; 0x12
    1ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e8       	ldi	r20, 0x80	; 128
    1eaa:	5f e3       	ldi	r21, 0x3F	; 63
    1eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb0:	88 23       	and	r24, r24
    1eb2:	1c f4       	brge	.+6      	; 0x1eba <lcd_send_ch+0x76e>
		__ticks = 1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	88 8b       	std	Y+16, r24	; 0x10
    1eb8:	91 c0       	rjmp	.+290    	; 0x1fdc <lcd_send_ch+0x890>
	else if (__tmp > 255)
    1eba:	69 89       	ldd	r22, Y+17	; 0x11
    1ebc:	7a 89       	ldd	r23, Y+18	; 0x12
    1ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	53 e4       	ldi	r21, 0x43	; 67
    1eca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	0c f0       	brlt	.+2      	; 0x1ed4 <lcd_send_ch+0x788>
    1ed2:	7b c0       	rjmp	.+246    	; 0x1fca <lcd_send_ch+0x87e>
	{
		_delay_ms(__us / 1000.0);
    1ed4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eda:	98 8d       	ldd	r25, Y+24	; 0x18
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	4a e7       	ldi	r20, 0x7A	; 122
    1ee2:	54 e4       	ldi	r21, 0x44	; 68
    1ee4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	8c 87       	std	Y+12, r24	; 0x0c
    1eee:	9d 87       	std	Y+13, r25	; 0x0d
    1ef0:	ae 87       	std	Y+14, r26	; 0x0e
    1ef2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ef6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ef8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1efa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	4a e7       	ldi	r20, 0x7A	; 122
    1f02:	55 e4       	ldi	r21, 0x45	; 69
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	88 87       	std	Y+8, r24	; 0x08
    1f0e:	99 87       	std	Y+9, r25	; 0x09
    1f10:	aa 87       	std	Y+10, r26	; 0x0a
    1f12:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f14:	68 85       	ldd	r22, Y+8	; 0x08
    1f16:	79 85       	ldd	r23, Y+9	; 0x09
    1f18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e8       	ldi	r20, 0x80	; 128
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <lcd_send_ch+0x7ea>
		__ticks = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9f 83       	std	Y+7, r25	; 0x07
    1f32:	8e 83       	std	Y+6, r24	; 0x06
    1f34:	3f c0       	rjmp	.+126    	; 0x1fb4 <lcd_send_ch+0x868>
	else if (__tmp > 65535)
    1f36:	68 85       	ldd	r22, Y+8	; 0x08
    1f38:	79 85       	ldd	r23, Y+9	; 0x09
    1f3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	3f ef       	ldi	r19, 0xFF	; 255
    1f42:	4f e7       	ldi	r20, 0x7F	; 127
    1f44:	57 e4       	ldi	r21, 0x47	; 71
    1f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4a:	18 16       	cp	r1, r24
    1f4c:	4c f5       	brge	.+82     	; 0x1fa0 <lcd_send_ch+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f50:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f52:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f54:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e2       	ldi	r20, 0x20	; 32
    1f5c:	51 e4       	ldi	r21, 0x41	; 65
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9f 83       	std	Y+7, r25	; 0x07
    1f74:	8e 83       	std	Y+6, r24	; 0x06
    1f76:	0f c0       	rjmp	.+30     	; 0x1f96 <lcd_send_ch+0x84a>
    1f78:	80 e9       	ldi	r24, 0x90	; 144
    1f7a:	91 e0       	ldi	r25, 0x01	; 1
    1f7c:	9d 83       	std	Y+5, r25	; 0x05
    1f7e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f80:	8c 81       	ldd	r24, Y+4	; 0x04
    1f82:	9d 81       	ldd	r25, Y+5	; 0x05
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <lcd_send_ch+0x838>
    1f88:	9d 83       	std	Y+5, r25	; 0x05
    1f8a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	9f 83       	std	Y+7, r25	; 0x07
    1f94:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f96:	8e 81       	ldd	r24, Y+6	; 0x06
    1f98:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	69 f7       	brne	.-38     	; 0x1f78 <lcd_send_ch+0x82c>
    1f9e:	24 c0       	rjmp	.+72     	; 0x1fe8 <lcd_send_ch+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa0:	68 85       	ldd	r22, Y+8	; 0x08
    1fa2:	79 85       	ldd	r23, Y+9	; 0x09
    1fa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	9f 83       	std	Y+7, r25	; 0x07
    1fb2:	8e 83       	std	Y+6, r24	; 0x06
    1fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb8:	9b 83       	std	Y+3, r25	; 0x03
    1fba:	8a 83       	std	Y+2, r24	; 0x02
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <lcd_send_ch+0x874>
    1fc4:	9b 83       	std	Y+3, r25	; 0x03
    1fc6:	8a 83       	std	Y+2, r24	; 0x02
    1fc8:	0f c0       	rjmp	.+30     	; 0x1fe8 <lcd_send_ch+0x89c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fca:	69 89       	ldd	r22, Y+17	; 0x11
    1fcc:	7a 89       	ldd	r23, Y+18	; 0x12
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	88 8b       	std	Y+16, r24	; 0x10
    1fdc:	88 89       	ldd	r24, Y+16	; 0x10
    1fde:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	8a 95       	dec	r24
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <lcd_send_ch+0x896>
    1fe6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);

}
    1fe8:	cf 59       	subi	r28, 0x9F	; 159
    1fea:	df 4f       	sbci	r29, 0xFF	; 255
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	1f 91       	pop	r17
    1ffc:	0f 91       	pop	r16
    1ffe:	08 95       	ret

00002000 <lcd_send_cmd>:
void lcd_send_cmd(unsigned char cmd) {
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	c1 56       	subi	r28, 0x61	; 97
    200e:	d0 40       	sbci	r29, 0x00	; 0
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	fe 01       	movw	r30, r28
    201c:	ef 59       	subi	r30, 0x9F	; 159
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	80 83       	st	Z, r24
	DIO_WRITE(RS, LOW);
    2022:	89 e0       	ldi	r24, 0x09	; 9
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	DIO_WRITE(RW, LOW);
    202a:	8a e0       	ldi	r24, 0x0A	; 10
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>

	if (GET_BIT(cmd, 4)) {DIO_WRITE(D4, HIGH);}else {DIO_WRITE(D4, LOW);}
    2032:	fe 01       	movw	r30, r28
    2034:	ef 59       	subi	r30, 0x9F	; 159
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	82 95       	swap	r24
    203c:	8f 70       	andi	r24, 0x0F	; 15
    203e:	88 2f       	mov	r24, r24
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	81 70       	andi	r24, 0x01	; 1
    2044:	90 70       	andi	r25, 0x00	; 0
    2046:	88 23       	and	r24, r24
    2048:	29 f0       	breq	.+10     	; 0x2054 <lcd_send_cmd+0x54>
    204a:	84 e0       	ldi	r24, 0x04	; 4
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    2052:	04 c0       	rjmp	.+8      	; 0x205c <lcd_send_cmd+0x5c>
    2054:	84 e0       	ldi	r24, 0x04	; 4
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(cmd, 5)) {DIO_WRITE(D5, HIGH);}else {DIO_WRITE(D5, LOW);}
    205c:	fe 01       	movw	r30, r28
    205e:	ef 59       	subi	r30, 0x9F	; 159
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 81       	ld	r24, Z
    2064:	82 95       	swap	r24
    2066:	86 95       	lsr	r24
    2068:	87 70       	andi	r24, 0x07	; 7
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	81 70       	andi	r24, 0x01	; 1
    2070:	90 70       	andi	r25, 0x00	; 0
    2072:	88 23       	and	r24, r24
    2074:	29 f0       	breq	.+10     	; 0x2080 <lcd_send_cmd+0x80>
    2076:	85 e0       	ldi	r24, 0x05	; 5
    2078:	61 e0       	ldi	r22, 0x01	; 1
    207a:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <lcd_send_cmd+0x88>
    2080:	85 e0       	ldi	r24, 0x05	; 5
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(cmd, 6)) {DIO_WRITE(D6, HIGH);}else {DIO_WRITE(D6, LOW);}
    2088:	fe 01       	movw	r30, r28
    208a:	ef 59       	subi	r30, 0x9F	; 159
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	80 81       	ld	r24, Z
    2090:	82 95       	swap	r24
    2092:	86 95       	lsr	r24
    2094:	86 95       	lsr	r24
    2096:	83 70       	andi	r24, 0x03	; 3
    2098:	88 2f       	mov	r24, r24
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	81 70       	andi	r24, 0x01	; 1
    209e:	90 70       	andi	r25, 0x00	; 0
    20a0:	88 23       	and	r24, r24
    20a2:	29 f0       	breq	.+10     	; 0x20ae <lcd_send_cmd+0xae>
    20a4:	86 e0       	ldi	r24, 0x06	; 6
    20a6:	61 e0       	ldi	r22, 0x01	; 1
    20a8:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    20ac:	04 c0       	rjmp	.+8      	; 0x20b6 <lcd_send_cmd+0xb6>
    20ae:	86 e0       	ldi	r24, 0x06	; 6
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(cmd, 7)) {DIO_WRITE(D7, HIGH);}else {DIO_WRITE(D7, LOW);}
    20b6:	fe 01       	movw	r30, r28
    20b8:	ef 59       	subi	r30, 0x9F	; 159
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	88 23       	and	r24, r24
    20c0:	2c f4       	brge	.+10     	; 0x20cc <lcd_send_cmd+0xcc>
    20c2:	87 e0       	ldi	r24, 0x07	; 7
    20c4:	61 e0       	ldi	r22, 0x01	; 1
    20c6:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    20ca:	04 c0       	rjmp	.+8      	; 0x20d4 <lcd_send_cmd+0xd4>
    20cc:	87 e0       	ldi	r24, 0x07	; 7
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	DIO_WRITE(E, HIGH);
    20d4:	8b e0       	ldi	r24, 0x0B	; 11
    20d6:	61 e0       	ldi	r22, 0x01	; 1
    20d8:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    20dc:	fe 01       	movw	r30, r28
    20de:	e3 5a       	subi	r30, 0xA3	; 163
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e2       	ldi	r26, 0x20	; 32
    20e8:	b1 e4       	ldi	r27, 0x41	; 65
    20ea:	80 83       	st	Z, r24
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	a2 83       	std	Z+2, r26	; 0x02
    20f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20f2:	8e 01       	movw	r16, r28
    20f4:	07 5a       	subi	r16, 0xA7	; 167
    20f6:	1f 4f       	sbci	r17, 0xFF	; 255
    20f8:	fe 01       	movw	r30, r28
    20fa:	e3 5a       	subi	r30, 0xA3	; 163
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	60 81       	ld	r22, Z
    2100:	71 81       	ldd	r23, Z+1	; 0x01
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	2b ea       	ldi	r18, 0xAB	; 171
    2108:	3a ea       	ldi	r19, 0xAA	; 170
    210a:	4a ea       	ldi	r20, 0xAA	; 170
    210c:	50 e4       	ldi	r21, 0x40	; 64
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	f8 01       	movw	r30, r16
    2118:	80 83       	st	Z, r24
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	a2 83       	std	Z+2, r26	; 0x02
    211e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2120:	fe 01       	movw	r30, r28
    2122:	e7 5a       	subi	r30, 0xA7	; 167
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	60 81       	ld	r22, Z
    2128:	71 81       	ldd	r23, Z+1	; 0x01
    212a:	82 81       	ldd	r24, Z+2	; 0x02
    212c:	93 81       	ldd	r25, Z+3	; 0x03
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e8       	ldi	r20, 0x80	; 128
    2134:	5f e3       	ldi	r21, 0x3F	; 63
    2136:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213a:	88 23       	and	r24, r24
    213c:	34 f4       	brge	.+12     	; 0x214a <lcd_send_cmd+0x14a>
		__ticks = 1;
    213e:	fe 01       	movw	r30, r28
    2140:	e8 5a       	subi	r30, 0xA8	; 168
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	80 83       	st	Z, r24
    2148:	e0 c0       	rjmp	.+448    	; 0x230a <lcd_send_cmd+0x30a>
	else if (__tmp > 255)
    214a:	fe 01       	movw	r30, r28
    214c:	e7 5a       	subi	r30, 0xA7	; 167
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	4f e7       	ldi	r20, 0x7F	; 127
    215e:	53 e4       	ldi	r21, 0x43	; 67
    2160:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2164:	18 16       	cp	r1, r24
    2166:	0c f0       	brlt	.+2      	; 0x216a <lcd_send_cmd+0x16a>
    2168:	c0 c0       	rjmp	.+384    	; 0x22ea <lcd_send_cmd+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    216a:	fe 01       	movw	r30, r28
    216c:	e3 5a       	subi	r30, 0xA3	; 163
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	60 81       	ld	r22, Z
    2172:	71 81       	ldd	r23, Z+1	; 0x01
    2174:	82 81       	ldd	r24, Z+2	; 0x02
    2176:	93 81       	ldd	r25, Z+3	; 0x03
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	4a e7       	ldi	r20, 0x7A	; 122
    217e:	54 e4       	ldi	r21, 0x44	; 68
    2180:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	fe 01       	movw	r30, r28
    218a:	ec 5a       	subi	r30, 0xAC	; 172
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	80 83       	st	Z, r24
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	a2 83       	std	Z+2, r26	; 0x02
    2194:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	8e 01       	movw	r16, r28
    2198:	00 5b       	subi	r16, 0xB0	; 176
    219a:	1f 4f       	sbci	r17, 0xFF	; 255
    219c:	fe 01       	movw	r30, r28
    219e:	ec 5a       	subi	r30, 0xAC	; 172
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	60 81       	ld	r22, Z
    21a4:	71 81       	ldd	r23, Z+1	; 0x01
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	4a e7       	ldi	r20, 0x7A	; 122
    21b0:	55 e4       	ldi	r21, 0x45	; 69
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	f8 01       	movw	r30, r16
    21bc:	80 83       	st	Z, r24
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	a2 83       	std	Z+2, r26	; 0x02
    21c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21c4:	fe 01       	movw	r30, r28
    21c6:	e0 5b       	subi	r30, 0xB0	; 176
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	60 81       	ld	r22, Z
    21cc:	71 81       	ldd	r23, Z+1	; 0x01
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21de:	88 23       	and	r24, r24
    21e0:	44 f4       	brge	.+16     	; 0x21f2 <lcd_send_cmd+0x1f2>
		__ticks = 1;
    21e2:	fe 01       	movw	r30, r28
    21e4:	e2 5b       	subi	r30, 0xB2	; 178
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	80 83       	st	Z, r24
    21f0:	64 c0       	rjmp	.+200    	; 0x22ba <lcd_send_cmd+0x2ba>
	else if (__tmp > 65535)
    21f2:	fe 01       	movw	r30, r28
    21f4:	e0 5b       	subi	r30, 0xB0	; 176
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	3f ef       	ldi	r19, 0xFF	; 255
    2204:	4f e7       	ldi	r20, 0x7F	; 127
    2206:	57 e4       	ldi	r21, 0x47	; 71
    2208:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    220c:	18 16       	cp	r1, r24
    220e:	0c f0       	brlt	.+2      	; 0x2212 <lcd_send_cmd+0x212>
    2210:	43 c0       	rjmp	.+134    	; 0x2298 <lcd_send_cmd+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2212:	fe 01       	movw	r30, r28
    2214:	ec 5a       	subi	r30, 0xAC	; 172
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	60 81       	ld	r22, Z
    221a:	71 81       	ldd	r23, Z+1	; 0x01
    221c:	82 81       	ldd	r24, Z+2	; 0x02
    221e:	93 81       	ldd	r25, Z+3	; 0x03
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e2       	ldi	r20, 0x20	; 32
    2226:	51 e4       	ldi	r21, 0x41	; 65
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	8e 01       	movw	r16, r28
    2232:	02 5b       	subi	r16, 0xB2	; 178
    2234:	1f 4f       	sbci	r17, 0xFF	; 255
    2236:	bc 01       	movw	r22, r24
    2238:	cd 01       	movw	r24, r26
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	f8 01       	movw	r30, r16
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	80 83       	st	Z, r24
    2248:	1f c0       	rjmp	.+62     	; 0x2288 <lcd_send_cmd+0x288>
    224a:	fe 01       	movw	r30, r28
    224c:	e4 5b       	subi	r30, 0xB4	; 180
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 e9       	ldi	r24, 0x90	; 144
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	91 83       	std	Z+1, r25	; 0x01
    2256:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2258:	fe 01       	movw	r30, r28
    225a:	e4 5b       	subi	r30, 0xB4	; 180
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 81       	ld	r24, Z
    2260:	91 81       	ldd	r25, Z+1	; 0x01
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <lcd_send_cmd+0x262>
    2266:	fe 01       	movw	r30, r28
    2268:	e4 5b       	subi	r30, 0xB4	; 180
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2270:	de 01       	movw	r26, r28
    2272:	a2 5b       	subi	r26, 0xB2	; 178
    2274:	bf 4f       	sbci	r27, 0xFF	; 255
    2276:	fe 01       	movw	r30, r28
    2278:	e2 5b       	subi	r30, 0xB2	; 178
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	91 81       	ldd	r25, Z+1	; 0x01
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	11 96       	adiw	r26, 0x01	; 1
    2284:	9c 93       	st	X, r25
    2286:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2288:	fe 01       	movw	r30, r28
    228a:	e2 5b       	subi	r30, 0xB2	; 178
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 81       	ld	r24, Z
    2290:	91 81       	ldd	r25, Z+1	; 0x01
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	d1 f6       	brne	.-76     	; 0x224a <lcd_send_cmd+0x24a>
    2296:	4b c0       	rjmp	.+150    	; 0x232e <lcd_send_cmd+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2298:	8e 01       	movw	r16, r28
    229a:	02 5b       	subi	r16, 0xB2	; 178
    229c:	1f 4f       	sbci	r17, 0xFF	; 255
    229e:	fe 01       	movw	r30, r28
    22a0:	e0 5b       	subi	r30, 0xB0	; 176
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	60 81       	ld	r22, Z
    22a6:	71 81       	ldd	r23, Z+1	; 0x01
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	93 81       	ldd	r25, Z+3	; 0x03
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	f8 01       	movw	r30, r16
    22b6:	91 83       	std	Z+1, r25	; 0x01
    22b8:	80 83       	st	Z, r24
    22ba:	de 01       	movw	r26, r28
    22bc:	a6 5b       	subi	r26, 0xB6	; 182
    22be:	bf 4f       	sbci	r27, 0xFF	; 255
    22c0:	fe 01       	movw	r30, r28
    22c2:	e2 5b       	subi	r30, 0xB2	; 178
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	80 81       	ld	r24, Z
    22c8:	91 81       	ldd	r25, Z+1	; 0x01
    22ca:	11 96       	adiw	r26, 0x01	; 1
    22cc:	9c 93       	st	X, r25
    22ce:	8e 93       	st	-X, r24
    22d0:	fe 01       	movw	r30, r28
    22d2:	e6 5b       	subi	r30, 0xB6	; 182
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <lcd_send_cmd+0x2da>
    22de:	fe 01       	movw	r30, r28
    22e0:	e6 5b       	subi	r30, 0xB6	; 182
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
    22e8:	22 c0       	rjmp	.+68     	; 0x232e <lcd_send_cmd+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22ea:	8e 01       	movw	r16, r28
    22ec:	08 5a       	subi	r16, 0xA8	; 168
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
    22f0:	fe 01       	movw	r30, r28
    22f2:	e7 5a       	subi	r30, 0xA7	; 167
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	60 81       	ld	r22, Z
    22f8:	71 81       	ldd	r23, Z+1	; 0x01
    22fa:	82 81       	ldd	r24, Z+2	; 0x02
    22fc:	93 81       	ldd	r25, Z+3	; 0x03
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	f8 01       	movw	r30, r16
    2308:	80 83       	st	Z, r24
    230a:	de 01       	movw	r26, r28
    230c:	a7 5b       	subi	r26, 0xB7	; 183
    230e:	bf 4f       	sbci	r27, 0xFF	; 255
    2310:	fe 01       	movw	r30, r28
    2312:	e8 5a       	subi	r30, 0xA8	; 168
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 81       	ld	r24, Z
    2318:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    231a:	fe 01       	movw	r30, r28
    231c:	e7 5b       	subi	r30, 0xB7	; 183
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	80 81       	ld	r24, Z
    2322:	8a 95       	dec	r24
    2324:	f1 f7       	brne	.-4      	; 0x2322 <lcd_send_cmd+0x322>
    2326:	fe 01       	movw	r30, r28
    2328:	e7 5b       	subi	r30, 0xB7	; 183
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 83       	st	Z, r24
	_delay_us(10);
	DIO_WRITE(E, LOW);
    232e:	8b e0       	ldi	r24, 0x0B	; 11
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    2336:	fe 01       	movw	r30, r28
    2338:	eb 5b       	subi	r30, 0xBB	; 187
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	aa ef       	ldi	r26, 0xFA	; 250
    2342:	b4 e4       	ldi	r27, 0x44	; 68
    2344:	80 83       	st	Z, r24
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	a2 83       	std	Z+2, r26	; 0x02
    234a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    234c:	8e 01       	movw	r16, r28
    234e:	0f 5b       	subi	r16, 0xBF	; 191
    2350:	1f 4f       	sbci	r17, 0xFF	; 255
    2352:	fe 01       	movw	r30, r28
    2354:	eb 5b       	subi	r30, 0xBB	; 187
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	2b ea       	ldi	r18, 0xAB	; 171
    2362:	3a ea       	ldi	r19, 0xAA	; 170
    2364:	4a ea       	ldi	r20, 0xAA	; 170
    2366:	50 e4       	ldi	r21, 0x40	; 64
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	f8 01       	movw	r30, r16
    2372:	80 83       	st	Z, r24
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	a2 83       	std	Z+2, r26	; 0x02
    2378:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    237a:	fe 01       	movw	r30, r28
    237c:	ef 5b       	subi	r30, 0xBF	; 191
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e8       	ldi	r20, 0x80	; 128
    238e:	5f e3       	ldi	r21, 0x3F	; 63
    2390:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2394:	88 23       	and	r24, r24
    2396:	34 f4       	brge	.+12     	; 0x23a4 <lcd_send_cmd+0x3a4>
		__ticks = 1;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	fe 01       	movw	r30, r28
    239c:	e0 5c       	subi	r30, 0xC0	; 192
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 83       	st	Z, r24
    23a2:	9d c0       	rjmp	.+314    	; 0x24de <lcd_send_cmd+0x4de>
	else if (__tmp > 255)
    23a4:	fe 01       	movw	r30, r28
    23a6:	ef 5b       	subi	r30, 0xBF	; 191
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	60 81       	ld	r22, Z
    23ac:	71 81       	ldd	r23, Z+1	; 0x01
    23ae:	82 81       	ldd	r24, Z+2	; 0x02
    23b0:	93 81       	ldd	r25, Z+3	; 0x03
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4f e7       	ldi	r20, 0x7F	; 127
    23b8:	53 e4       	ldi	r21, 0x43	; 67
    23ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23be:	18 16       	cp	r1, r24
    23c0:	0c f0       	brlt	.+2      	; 0x23c4 <lcd_send_cmd+0x3c4>
    23c2:	7e c0       	rjmp	.+252    	; 0x24c0 <lcd_send_cmd+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    23c4:	fe 01       	movw	r30, r28
    23c6:	eb 5b       	subi	r30, 0xBB	; 187
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	60 81       	ld	r22, Z
    23cc:	71 81       	ldd	r23, Z+1	; 0x01
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	4a e7       	ldi	r20, 0x7A	; 122
    23d8:	54 e4       	ldi	r21, 0x44	; 68
    23da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	8c af       	std	Y+60, r24	; 0x3c
    23e4:	9d af       	std	Y+61, r25	; 0x3d
    23e6:	ae af       	std	Y+62, r26	; 0x3e
    23e8:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ea:	6c ad       	ldd	r22, Y+60	; 0x3c
    23ec:	7d ad       	ldd	r23, Y+61	; 0x3d
    23ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    23f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	4a e7       	ldi	r20, 0x7A	; 122
    23f8:	55 e4       	ldi	r21, 0x45	; 69
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	88 af       	std	Y+56, r24	; 0x38
    2404:	99 af       	std	Y+57, r25	; 0x39
    2406:	aa af       	std	Y+58, r26	; 0x3a
    2408:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    240a:	68 ad       	ldd	r22, Y+56	; 0x38
    240c:	79 ad       	ldd	r23, Y+57	; 0x39
    240e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2410:	9b ad       	ldd	r25, Y+59	; 0x3b
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e8       	ldi	r20, 0x80	; 128
    2418:	5f e3       	ldi	r21, 0x3F	; 63
    241a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    241e:	88 23       	and	r24, r24
    2420:	2c f4       	brge	.+10     	; 0x242c <lcd_send_cmd+0x42c>
		__ticks = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9f ab       	std	Y+55, r25	; 0x37
    2428:	8e ab       	std	Y+54, r24	; 0x36
    242a:	3f c0       	rjmp	.+126    	; 0x24aa <lcd_send_cmd+0x4aa>
	else if (__tmp > 65535)
    242c:	68 ad       	ldd	r22, Y+56	; 0x38
    242e:	79 ad       	ldd	r23, Y+57	; 0x39
    2430:	8a ad       	ldd	r24, Y+58	; 0x3a
    2432:	9b ad       	ldd	r25, Y+59	; 0x3b
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	3f ef       	ldi	r19, 0xFF	; 255
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	57 e4       	ldi	r21, 0x47	; 71
    243c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2440:	18 16       	cp	r1, r24
    2442:	4c f5       	brge	.+82     	; 0x2496 <lcd_send_cmd+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2444:	6c ad       	ldd	r22, Y+60	; 0x3c
    2446:	7d ad       	ldd	r23, Y+61	; 0x3d
    2448:	8e ad       	ldd	r24, Y+62	; 0x3e
    244a:	9f ad       	ldd	r25, Y+63	; 0x3f
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e2       	ldi	r20, 0x20	; 32
    2452:	51 e4       	ldi	r21, 0x41	; 65
    2454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9f ab       	std	Y+55, r25	; 0x37
    246a:	8e ab       	std	Y+54, r24	; 0x36
    246c:	0f c0       	rjmp	.+30     	; 0x248c <lcd_send_cmd+0x48c>
    246e:	80 e9       	ldi	r24, 0x90	; 144
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	9d ab       	std	Y+53, r25	; 0x35
    2474:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2476:	8c a9       	ldd	r24, Y+52	; 0x34
    2478:	9d a9       	ldd	r25, Y+53	; 0x35
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <lcd_send_cmd+0x47a>
    247e:	9d ab       	std	Y+53, r25	; 0x35
    2480:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2482:	8e a9       	ldd	r24, Y+54	; 0x36
    2484:	9f a9       	ldd	r25, Y+55	; 0x37
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	9f ab       	std	Y+55, r25	; 0x37
    248a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248c:	8e a9       	ldd	r24, Y+54	; 0x36
    248e:	9f a9       	ldd	r25, Y+55	; 0x37
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	69 f7       	brne	.-38     	; 0x246e <lcd_send_cmd+0x46e>
    2494:	2d c0       	rjmp	.+90     	; 0x24f0 <lcd_send_cmd+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2496:	68 ad       	ldd	r22, Y+56	; 0x38
    2498:	79 ad       	ldd	r23, Y+57	; 0x39
    249a:	8a ad       	ldd	r24, Y+58	; 0x3a
    249c:	9b ad       	ldd	r25, Y+59	; 0x3b
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9f ab       	std	Y+55, r25	; 0x37
    24a8:	8e ab       	std	Y+54, r24	; 0x36
    24aa:	8e a9       	ldd	r24, Y+54	; 0x36
    24ac:	9f a9       	ldd	r25, Y+55	; 0x37
    24ae:	9b ab       	std	Y+51, r25	; 0x33
    24b0:	8a ab       	std	Y+50, r24	; 0x32
    24b2:	8a a9       	ldd	r24, Y+50	; 0x32
    24b4:	9b a9       	ldd	r25, Y+51	; 0x33
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <lcd_send_cmd+0x4b6>
    24ba:	9b ab       	std	Y+51, r25	; 0x33
    24bc:	8a ab       	std	Y+50, r24	; 0x32
    24be:	18 c0       	rjmp	.+48     	; 0x24f0 <lcd_send_cmd+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24c0:	fe 01       	movw	r30, r28
    24c2:	ef 5b       	subi	r30, 0xBF	; 191
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	60 81       	ld	r22, Z
    24c8:	71 81       	ldd	r23, Z+1	; 0x01
    24ca:	82 81       	ldd	r24, Z+2	; 0x02
    24cc:	93 81       	ldd	r25, Z+3	; 0x03
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	fe 01       	movw	r30, r28
    24d8:	e0 5c       	subi	r30, 0xC0	; 192
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 83       	st	Z, r24
    24de:	fe 01       	movw	r30, r28
    24e0:	e0 5c       	subi	r30, 0xC0	; 192
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	80 81       	ld	r24, Z
    24e6:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24e8:	89 a9       	ldd	r24, Y+49	; 0x31
    24ea:	8a 95       	dec	r24
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <lcd_send_cmd+0x4ea>
    24ee:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(2000);

	if (GET_BIT(cmd, 0)) {DIO_WRITE(D4, HIGH);}else {DIO_WRITE(D4, LOW);}
    24f0:	fe 01       	movw	r30, r28
    24f2:	ef 59       	subi	r30, 0x9F	; 159
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	80 81       	ld	r24, Z
    24f8:	88 2f       	mov	r24, r24
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	81 70       	andi	r24, 0x01	; 1
    24fe:	90 70       	andi	r25, 0x00	; 0
    2500:	88 23       	and	r24, r24
    2502:	29 f0       	breq	.+10     	; 0x250e <lcd_send_cmd+0x50e>
    2504:	84 e0       	ldi	r24, 0x04	; 4
    2506:	61 e0       	ldi	r22, 0x01	; 1
    2508:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    250c:	04 c0       	rjmp	.+8      	; 0x2516 <lcd_send_cmd+0x516>
    250e:	84 e0       	ldi	r24, 0x04	; 4
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(cmd, 1)) {DIO_WRITE(D5, HIGH);}else {DIO_WRITE(D5, LOW);}
    2516:	fe 01       	movw	r30, r28
    2518:	ef 59       	subi	r30, 0x9F	; 159
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 81       	ld	r24, Z
    251e:	86 95       	lsr	r24
    2520:	88 2f       	mov	r24, r24
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	81 70       	andi	r24, 0x01	; 1
    2526:	90 70       	andi	r25, 0x00	; 0
    2528:	88 23       	and	r24, r24
    252a:	29 f0       	breq	.+10     	; 0x2536 <lcd_send_cmd+0x536>
    252c:	85 e0       	ldi	r24, 0x05	; 5
    252e:	61 e0       	ldi	r22, 0x01	; 1
    2530:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    2534:	04 c0       	rjmp	.+8      	; 0x253e <lcd_send_cmd+0x53e>
    2536:	85 e0       	ldi	r24, 0x05	; 5
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(cmd, 2)) {DIO_WRITE(D6, HIGH);}else {DIO_WRITE(D6, LOW);}
    253e:	fe 01       	movw	r30, r28
    2540:	ef 59       	subi	r30, 0x9F	; 159
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	80 81       	ld	r24, Z
    2546:	86 95       	lsr	r24
    2548:	86 95       	lsr	r24
    254a:	88 2f       	mov	r24, r24
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	81 70       	andi	r24, 0x01	; 1
    2550:	90 70       	andi	r25, 0x00	; 0
    2552:	88 23       	and	r24, r24
    2554:	29 f0       	breq	.+10     	; 0x2560 <lcd_send_cmd+0x560>
    2556:	86 e0       	ldi	r24, 0x06	; 6
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    255e:	04 c0       	rjmp	.+8      	; 0x2568 <lcd_send_cmd+0x568>
    2560:	86 e0       	ldi	r24, 0x06	; 6
    2562:	60 e0       	ldi	r22, 0x00	; 0
    2564:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	if (GET_BIT(cmd, 3)) {DIO_WRITE(D7, HIGH);}else {DIO_WRITE(D7, LOW);}
    2568:	fe 01       	movw	r30, r28
    256a:	ef 59       	subi	r30, 0x9F	; 159
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	86 95       	lsr	r24
    2572:	86 95       	lsr	r24
    2574:	86 95       	lsr	r24
    2576:	88 2f       	mov	r24, r24
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	81 70       	andi	r24, 0x01	; 1
    257c:	90 70       	andi	r25, 0x00	; 0
    257e:	88 23       	and	r24, r24
    2580:	29 f0       	breq	.+10     	; 0x258c <lcd_send_cmd+0x58c>
    2582:	87 e0       	ldi	r24, 0x07	; 7
    2584:	61 e0       	ldi	r22, 0x01	; 1
    2586:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    258a:	04 c0       	rjmp	.+8      	; 0x2594 <lcd_send_cmd+0x594>
    258c:	87 e0       	ldi	r24, 0x07	; 7
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
	DIO_WRITE(E, HIGH);
    2594:	8b e0       	ldi	r24, 0x0B	; 11
    2596:	61 e0       	ldi	r22, 0x01	; 1
    2598:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a0 e2       	ldi	r26, 0x20	; 32
    25a2:	b1 e4       	ldi	r27, 0x41	; 65
    25a4:	8d a7       	std	Y+45, r24	; 0x2d
    25a6:	9e a7       	std	Y+46, r25	; 0x2e
    25a8:	af a7       	std	Y+47, r26	; 0x2f
    25aa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25ac:	6d a5       	ldd	r22, Y+45	; 0x2d
    25ae:	7e a5       	ldd	r23, Y+46	; 0x2e
    25b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b2:	98 a9       	ldd	r25, Y+48	; 0x30
    25b4:	2b ea       	ldi	r18, 0xAB	; 171
    25b6:	3a ea       	ldi	r19, 0xAA	; 170
    25b8:	4a ea       	ldi	r20, 0xAA	; 170
    25ba:	50 e4       	ldi	r21, 0x40	; 64
    25bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	89 a7       	std	Y+41, r24	; 0x29
    25c6:	9a a7       	std	Y+42, r25	; 0x2a
    25c8:	ab a7       	std	Y+43, r26	; 0x2b
    25ca:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    25cc:	69 a5       	ldd	r22, Y+41	; 0x29
    25ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    25d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    25d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	5f e3       	ldi	r21, 0x3F	; 63
    25dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25e0:	88 23       	and	r24, r24
    25e2:	1c f4       	brge	.+6      	; 0x25ea <lcd_send_cmd+0x5ea>
		__ticks = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	88 a7       	std	Y+40, r24	; 0x28
    25e8:	91 c0       	rjmp	.+290    	; 0x270c <lcd_send_cmd+0x70c>
	else if (__tmp > 255)
    25ea:	69 a5       	ldd	r22, Y+41	; 0x29
    25ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    25ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    25f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	4f e7       	ldi	r20, 0x7F	; 127
    25f8:	53 e4       	ldi	r21, 0x43	; 67
    25fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25fe:	18 16       	cp	r1, r24
    2600:	0c f0       	brlt	.+2      	; 0x2604 <lcd_send_cmd+0x604>
    2602:	7b c0       	rjmp	.+246    	; 0x26fa <lcd_send_cmd+0x6fa>
	{
		_delay_ms(__us / 1000.0);
    2604:	6d a5       	ldd	r22, Y+45	; 0x2d
    2606:	7e a5       	ldd	r23, Y+46	; 0x2e
    2608:	8f a5       	ldd	r24, Y+47	; 0x2f
    260a:	98 a9       	ldd	r25, Y+48	; 0x30
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	4a e7       	ldi	r20, 0x7A	; 122
    2612:	54 e4       	ldi	r21, 0x44	; 68
    2614:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	8c a3       	std	Y+36, r24	; 0x24
    261e:	9d a3       	std	Y+37, r25	; 0x25
    2620:	ae a3       	std	Y+38, r26	; 0x26
    2622:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2624:	6c a1       	ldd	r22, Y+36	; 0x24
    2626:	7d a1       	ldd	r23, Y+37	; 0x25
    2628:	8e a1       	ldd	r24, Y+38	; 0x26
    262a:	9f a1       	ldd	r25, Y+39	; 0x27
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a e7       	ldi	r20, 0x7A	; 122
    2632:	55 e4       	ldi	r21, 0x45	; 69
    2634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	88 a3       	std	Y+32, r24	; 0x20
    263e:	99 a3       	std	Y+33, r25	; 0x21
    2640:	aa a3       	std	Y+34, r26	; 0x22
    2642:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2644:	68 a1       	ldd	r22, Y+32	; 0x20
    2646:	79 a1       	ldd	r23, Y+33	; 0x21
    2648:	8a a1       	ldd	r24, Y+34	; 0x22
    264a:	9b a1       	ldd	r25, Y+35	; 0x23
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e8       	ldi	r20, 0x80	; 128
    2652:	5f e3       	ldi	r21, 0x3F	; 63
    2654:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2658:	88 23       	and	r24, r24
    265a:	2c f4       	brge	.+10     	; 0x2666 <lcd_send_cmd+0x666>
		__ticks = 1;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	9f 8f       	std	Y+31, r25	; 0x1f
    2662:	8e 8f       	std	Y+30, r24	; 0x1e
    2664:	3f c0       	rjmp	.+126    	; 0x26e4 <lcd_send_cmd+0x6e4>
	else if (__tmp > 65535)
    2666:	68 a1       	ldd	r22, Y+32	; 0x20
    2668:	79 a1       	ldd	r23, Y+33	; 0x21
    266a:	8a a1       	ldd	r24, Y+34	; 0x22
    266c:	9b a1       	ldd	r25, Y+35	; 0x23
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	3f ef       	ldi	r19, 0xFF	; 255
    2672:	4f e7       	ldi	r20, 0x7F	; 127
    2674:	57 e4       	ldi	r21, 0x47	; 71
    2676:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    267a:	18 16       	cp	r1, r24
    267c:	4c f5       	brge	.+82     	; 0x26d0 <lcd_send_cmd+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267e:	6c a1       	ldd	r22, Y+36	; 0x24
    2680:	7d a1       	ldd	r23, Y+37	; 0x25
    2682:	8e a1       	ldd	r24, Y+38	; 0x26
    2684:	9f a1       	ldd	r25, Y+39	; 0x27
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e2       	ldi	r20, 0x20	; 32
    268c:	51 e4       	ldi	r21, 0x41	; 65
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	bc 01       	movw	r22, r24
    2698:	cd 01       	movw	r24, r26
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9f 8f       	std	Y+31, r25	; 0x1f
    26a4:	8e 8f       	std	Y+30, r24	; 0x1e
    26a6:	0f c0       	rjmp	.+30     	; 0x26c6 <lcd_send_cmd+0x6c6>
    26a8:	80 e9       	ldi	r24, 0x90	; 144
    26aa:	91 e0       	ldi	r25, 0x01	; 1
    26ac:	9d 8f       	std	Y+29, r25	; 0x1d
    26ae:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <lcd_send_cmd+0x6b4>
    26b8:	9d 8f       	std	Y+29, r25	; 0x1d
    26ba:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	9f 8f       	std	Y+31, r25	; 0x1f
    26c4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	69 f7       	brne	.-38     	; 0x26a8 <lcd_send_cmd+0x6a8>
    26ce:	24 c0       	rjmp	.+72     	; 0x2718 <lcd_send_cmd+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d0:	68 a1       	ldd	r22, Y+32	; 0x20
    26d2:	79 a1       	ldd	r23, Y+33	; 0x21
    26d4:	8a a1       	ldd	r24, Y+34	; 0x22
    26d6:	9b a1       	ldd	r25, Y+35	; 0x23
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9f 8f       	std	Y+31, r25	; 0x1f
    26e2:	8e 8f       	std	Y+30, r24	; 0x1e
    26e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26e8:	9b 8f       	std	Y+27, r25	; 0x1b
    26ea:	8a 8f       	std	Y+26, r24	; 0x1a
    26ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <lcd_send_cmd+0x6f0>
    26f4:	9b 8f       	std	Y+27, r25	; 0x1b
    26f6:	8a 8f       	std	Y+26, r24	; 0x1a
    26f8:	0f c0       	rjmp	.+30     	; 0x2718 <lcd_send_cmd+0x718>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26fa:	69 a5       	ldd	r22, Y+41	; 0x29
    26fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    26fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2700:	9c a5       	ldd	r25, Y+44	; 0x2c
    2702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	88 a7       	std	Y+40, r24	; 0x28
    270c:	88 a5       	ldd	r24, Y+40	; 0x28
    270e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2710:	89 8d       	ldd	r24, Y+25	; 0x19
    2712:	8a 95       	dec	r24
    2714:	f1 f7       	brne	.-4      	; 0x2712 <lcd_send_cmd+0x712>
    2716:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_WRITE(E, LOW);
    2718:	8b e0       	ldi	r24, 0x0B	; 11
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_WRITE>
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	aa ef       	ldi	r26, 0xFA	; 250
    2726:	b4 e4       	ldi	r27, 0x44	; 68
    2728:	8d 8b       	std	Y+21, r24	; 0x15
    272a:	9e 8b       	std	Y+22, r25	; 0x16
    272c:	af 8b       	std	Y+23, r26	; 0x17
    272e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2730:	6d 89       	ldd	r22, Y+21	; 0x15
    2732:	7e 89       	ldd	r23, Y+22	; 0x16
    2734:	8f 89       	ldd	r24, Y+23	; 0x17
    2736:	98 8d       	ldd	r25, Y+24	; 0x18
    2738:	2b ea       	ldi	r18, 0xAB	; 171
    273a:	3a ea       	ldi	r19, 0xAA	; 170
    273c:	4a ea       	ldi	r20, 0xAA	; 170
    273e:	50 e4       	ldi	r21, 0x40	; 64
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	89 8b       	std	Y+17, r24	; 0x11
    274a:	9a 8b       	std	Y+18, r25	; 0x12
    274c:	ab 8b       	std	Y+19, r26	; 0x13
    274e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2750:	69 89       	ldd	r22, Y+17	; 0x11
    2752:	7a 89       	ldd	r23, Y+18	; 0x12
    2754:	8b 89       	ldd	r24, Y+19	; 0x13
    2756:	9c 89       	ldd	r25, Y+20	; 0x14
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e8       	ldi	r20, 0x80	; 128
    275e:	5f e3       	ldi	r21, 0x3F	; 63
    2760:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2764:	88 23       	and	r24, r24
    2766:	1c f4       	brge	.+6      	; 0x276e <lcd_send_cmd+0x76e>
		__ticks = 1;
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	88 8b       	std	Y+16, r24	; 0x10
    276c:	91 c0       	rjmp	.+290    	; 0x2890 <lcd_send_cmd+0x890>
	else if (__tmp > 255)
    276e:	69 89       	ldd	r22, Y+17	; 0x11
    2770:	7a 89       	ldd	r23, Y+18	; 0x12
    2772:	8b 89       	ldd	r24, Y+19	; 0x13
    2774:	9c 89       	ldd	r25, Y+20	; 0x14
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	4f e7       	ldi	r20, 0x7F	; 127
    277c:	53 e4       	ldi	r21, 0x43	; 67
    277e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2782:	18 16       	cp	r1, r24
    2784:	0c f0       	brlt	.+2      	; 0x2788 <lcd_send_cmd+0x788>
    2786:	7b c0       	rjmp	.+246    	; 0x287e <lcd_send_cmd+0x87e>
	{
		_delay_ms(__us / 1000.0);
    2788:	6d 89       	ldd	r22, Y+21	; 0x15
    278a:	7e 89       	ldd	r23, Y+22	; 0x16
    278c:	8f 89       	ldd	r24, Y+23	; 0x17
    278e:	98 8d       	ldd	r25, Y+24	; 0x18
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	4a e7       	ldi	r20, 0x7A	; 122
    2796:	54 e4       	ldi	r21, 0x44	; 68
    2798:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	8c 87       	std	Y+12, r24	; 0x0c
    27a2:	9d 87       	std	Y+13, r25	; 0x0d
    27a4:	ae 87       	std	Y+14, r26	; 0x0e
    27a6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    27aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    27ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	4a e7       	ldi	r20, 0x7A	; 122
    27b6:	55 e4       	ldi	r21, 0x45	; 69
    27b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	88 87       	std	Y+8, r24	; 0x08
    27c2:	99 87       	std	Y+9, r25	; 0x09
    27c4:	aa 87       	std	Y+10, r26	; 0x0a
    27c6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27c8:	68 85       	ldd	r22, Y+8	; 0x08
    27ca:	79 85       	ldd	r23, Y+9	; 0x09
    27cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    27ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	40 e8       	ldi	r20, 0x80	; 128
    27d6:	5f e3       	ldi	r21, 0x3F	; 63
    27d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27dc:	88 23       	and	r24, r24
    27de:	2c f4       	brge	.+10     	; 0x27ea <lcd_send_cmd+0x7ea>
		__ticks = 1;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	9f 83       	std	Y+7, r25	; 0x07
    27e6:	8e 83       	std	Y+6, r24	; 0x06
    27e8:	3f c0       	rjmp	.+126    	; 0x2868 <lcd_send_cmd+0x868>
	else if (__tmp > 65535)
    27ea:	68 85       	ldd	r22, Y+8	; 0x08
    27ec:	79 85       	ldd	r23, Y+9	; 0x09
    27ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    27f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	3f ef       	ldi	r19, 0xFF	; 255
    27f6:	4f e7       	ldi	r20, 0x7F	; 127
    27f8:	57 e4       	ldi	r21, 0x47	; 71
    27fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27fe:	18 16       	cp	r1, r24
    2800:	4c f5       	brge	.+82     	; 0x2854 <lcd_send_cmd+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2802:	6c 85       	ldd	r22, Y+12	; 0x0c
    2804:	7d 85       	ldd	r23, Y+13	; 0x0d
    2806:	8e 85       	ldd	r24, Y+14	; 0x0e
    2808:	9f 85       	ldd	r25, Y+15	; 0x0f
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e2       	ldi	r20, 0x20	; 32
    2810:	51 e4       	ldi	r21, 0x41	; 65
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	bc 01       	movw	r22, r24
    281c:	cd 01       	movw	r24, r26
    281e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	9f 83       	std	Y+7, r25	; 0x07
    2828:	8e 83       	std	Y+6, r24	; 0x06
    282a:	0f c0       	rjmp	.+30     	; 0x284a <lcd_send_cmd+0x84a>
    282c:	80 e9       	ldi	r24, 0x90	; 144
    282e:	91 e0       	ldi	r25, 0x01	; 1
    2830:	9d 83       	std	Y+5, r25	; 0x05
    2832:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2834:	8c 81       	ldd	r24, Y+4	; 0x04
    2836:	9d 81       	ldd	r25, Y+5	; 0x05
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <lcd_send_cmd+0x838>
    283c:	9d 83       	std	Y+5, r25	; 0x05
    283e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2840:	8e 81       	ldd	r24, Y+6	; 0x06
    2842:	9f 81       	ldd	r25, Y+7	; 0x07
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	9f 83       	std	Y+7, r25	; 0x07
    2848:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284a:	8e 81       	ldd	r24, Y+6	; 0x06
    284c:	9f 81       	ldd	r25, Y+7	; 0x07
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	69 f7       	brne	.-38     	; 0x282c <lcd_send_cmd+0x82c>
    2852:	24 c0       	rjmp	.+72     	; 0x289c <lcd_send_cmd+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2854:	68 85       	ldd	r22, Y+8	; 0x08
    2856:	79 85       	ldd	r23, Y+9	; 0x09
    2858:	8a 85       	ldd	r24, Y+10	; 0x0a
    285a:	9b 85       	ldd	r25, Y+11	; 0x0b
    285c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	9f 83       	std	Y+7, r25	; 0x07
    2866:	8e 83       	std	Y+6, r24	; 0x06
    2868:	8e 81       	ldd	r24, Y+6	; 0x06
    286a:	9f 81       	ldd	r25, Y+7	; 0x07
    286c:	9b 83       	std	Y+3, r25	; 0x03
    286e:	8a 83       	std	Y+2, r24	; 0x02
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	9b 81       	ldd	r25, Y+3	; 0x03
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	f1 f7       	brne	.-4      	; 0x2874 <lcd_send_cmd+0x874>
    2878:	9b 83       	std	Y+3, r25	; 0x03
    287a:	8a 83       	std	Y+2, r24	; 0x02
    287c:	0f c0       	rjmp	.+30     	; 0x289c <lcd_send_cmd+0x89c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    287e:	69 89       	ldd	r22, Y+17	; 0x11
    2880:	7a 89       	ldd	r23, Y+18	; 0x12
    2882:	8b 89       	ldd	r24, Y+19	; 0x13
    2884:	9c 89       	ldd	r25, Y+20	; 0x14
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	88 8b       	std	Y+16, r24	; 0x10
    2890:	88 89       	ldd	r24, Y+16	; 0x10
    2892:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	8a 95       	dec	r24
    2898:	f1 f7       	brne	.-4      	; 0x2896 <lcd_send_cmd+0x896>
    289a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);

}
    289c:	cf 59       	subi	r28, 0x9F	; 159
    289e:	df 4f       	sbci	r29, 0xFF	; 255
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	1f 91       	pop	r17
    28b0:	0f 91       	pop	r16
    28b2:	08 95       	ret

000028b4 <lcd_init>:
void lcd_init(void) {
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	2e 97       	sbiw	r28, 0x0e	; 14
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	cd bf       	out	0x3d, r28	; 61
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	a0 ea       	ldi	r26, 0xA0	; 160
    28ce:	b1 e4       	ldi	r27, 0x41	; 65
    28d0:	8b 87       	std	Y+11, r24	; 0x0b
    28d2:	9c 87       	std	Y+12, r25	; 0x0c
    28d4:	ad 87       	std	Y+13, r26	; 0x0d
    28d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28da:	7c 85       	ldd	r23, Y+12	; 0x0c
    28dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28de:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4a e7       	ldi	r20, 0x7A	; 122
    28e6:	55 e4       	ldi	r21, 0x45	; 69
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	8f 83       	std	Y+7, r24	; 0x07
    28f2:	98 87       	std	Y+8, r25	; 0x08
    28f4:	a9 87       	std	Y+9, r26	; 0x09
    28f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28f8:	6f 81       	ldd	r22, Y+7	; 0x07
    28fa:	78 85       	ldd	r23, Y+8	; 0x08
    28fc:	89 85       	ldd	r24, Y+9	; 0x09
    28fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e8       	ldi	r20, 0x80	; 128
    2906:	5f e3       	ldi	r21, 0x3F	; 63
    2908:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    290c:	88 23       	and	r24, r24
    290e:	2c f4       	brge	.+10     	; 0x291a <lcd_init+0x66>
		__ticks = 1;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9e 83       	std	Y+6, r25	; 0x06
    2916:	8d 83       	std	Y+5, r24	; 0x05
    2918:	3f c0       	rjmp	.+126    	; 0x2998 <lcd_init+0xe4>
	else if (__tmp > 65535)
    291a:	6f 81       	ldd	r22, Y+7	; 0x07
    291c:	78 85       	ldd	r23, Y+8	; 0x08
    291e:	89 85       	ldd	r24, Y+9	; 0x09
    2920:	9a 85       	ldd	r25, Y+10	; 0x0a
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	3f ef       	ldi	r19, 0xFF	; 255
    2926:	4f e7       	ldi	r20, 0x7F	; 127
    2928:	57 e4       	ldi	r21, 0x47	; 71
    292a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    292e:	18 16       	cp	r1, r24
    2930:	4c f5       	brge	.+82     	; 0x2984 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2932:	6b 85       	ldd	r22, Y+11	; 0x0b
    2934:	7c 85       	ldd	r23, Y+12	; 0x0c
    2936:	8d 85       	ldd	r24, Y+13	; 0x0d
    2938:	9e 85       	ldd	r25, Y+14	; 0x0e
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e2       	ldi	r20, 0x20	; 32
    2940:	51 e4       	ldi	r21, 0x41	; 65
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
    295a:	0f c0       	rjmp	.+30     	; 0x297a <lcd_init+0xc6>
    295c:	80 e9       	ldi	r24, 0x90	; 144
    295e:	91 e0       	ldi	r25, 0x01	; 1
    2960:	9c 83       	std	Y+4, r25	; 0x04
    2962:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	9c 81       	ldd	r25, Y+4	; 0x04
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <lcd_init+0xb4>
    296c:	9c 83       	std	Y+4, r25	; 0x04
    296e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2970:	8d 81       	ldd	r24, Y+5	; 0x05
    2972:	9e 81       	ldd	r25, Y+6	; 0x06
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297a:	8d 81       	ldd	r24, Y+5	; 0x05
    297c:	9e 81       	ldd	r25, Y+6	; 0x06
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	69 f7       	brne	.-38     	; 0x295c <lcd_init+0xa8>
    2982:	14 c0       	rjmp	.+40     	; 0x29ac <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2984:	6f 81       	ldd	r22, Y+7	; 0x07
    2986:	78 85       	ldd	r23, Y+8	; 0x08
    2988:	89 85       	ldd	r24, Y+9	; 0x09
    298a:	9a 85       	ldd	r25, Y+10	; 0x0a
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	9e 83       	std	Y+6, r25	; 0x06
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	8d 81       	ldd	r24, Y+5	; 0x05
    299a:	9e 81       	ldd	r25, Y+6	; 0x06
    299c:	9a 83       	std	Y+2, r25	; 0x02
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	9a 81       	ldd	r25, Y+2	; 0x02
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <lcd_init+0xf0>
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	lcd_send_cmd(0x33);
    29ac:	83 e3       	ldi	r24, 0x33	; 51
    29ae:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_send_cmd>
	lcd_send_cmd(0x32); //send for 4 bit initialization of lcd
    29b2:	82 e3       	ldi	r24, 0x32	; 50
    29b4:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_send_cmd>
	lcd_send_cmd(0x28); //select 4 bit mode, 5*7 dots
    29b8:	88 e2       	ldi	r24, 0x28	; 40
    29ba:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_send_cmd>
	lcd_send_cmd(0x0f); //display on, cursor blinking
    29be:	8f e0       	ldi	r24, 0x0F	; 15
    29c0:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_send_cmd>
	lcd_send_cmd(0x06); //entry mode increment cursor to right
    29c4:	86 e0       	ldi	r24, 0x06	; 6
    29c6:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_send_cmd>
	lcd_send_cmd(0x01); //clear display
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_send_cmd>
}
    29d0:	2e 96       	adiw	r28, 0x0e	; 14
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <lcd_send_str>:
void lcd_send_str(char *string) {
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <lcd_send_str+0x6>
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <lcd_send_str+0x8>
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	9c 83       	std	Y+4, r25	; 0x04
    29f0:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;string[i]!=0;i++)
    29f2:	1a 82       	std	Y+2, r1	; 0x02
    29f4:	19 82       	std	Y+1, r1	; 0x01
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <lcd_send_str+0x34>
		lcd_send_ch(string[i]);
    29f8:	29 81       	ldd	r18, Y+1	; 0x01
    29fa:	3a 81       	ldd	r19, Y+2	; 0x02
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2a00:	fc 01       	movw	r30, r24
    2a02:	e2 0f       	add	r30, r18
    2a04:	f3 1f       	adc	r31, r19
    2a06:	80 81       	ld	r24, Z
    2a08:	0e 94 a6 0b 	call	0x174c	; 0x174c <lcd_send_ch>
	lcd_send_cmd(0x06); //entry mode increment cursor to right
	lcd_send_cmd(0x01); //clear display
}
void lcd_send_str(char *string) {
	int i;
	for(i=0;string[i]!=0;i++)
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a10:	01 96       	adiw	r24, 0x01	; 1
    2a12:	9a 83       	std	Y+2, r25	; 0x02
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	29 81       	ldd	r18, Y+1	; 0x01
    2a18:	3a 81       	ldd	r19, Y+2	; 0x02
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1e:	fc 01       	movw	r30, r24
    2a20:	e2 0f       	add	r30, r18
    2a22:	f3 1f       	adc	r31, r19
    2a24:	80 81       	ld	r24, Z
    2a26:	88 23       	and	r24, r24
    2a28:	39 f7       	brne	.-50     	; 0x29f8 <lcd_send_str+0x16>
		lcd_send_ch(string[i]);
}
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <Cursor_pos>:
void Cursor_pos(unsigned char x_pos, unsigned char y_pos){
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <Cursor_pos+0x6>
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <Cursor_pos+0x8>
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	8b 83       	std	Y+3, r24	; 0x03
    2a46:	6c 83       	std	Y+4, r22	; 0x04
	int add = 0;
    2a48:	1a 82       	std	Y+2, r1	; 0x02
    2a4a:	19 82       	std	Y+1, r1	; 0x01
	if(x_pos == 0)
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	88 23       	and	r24, r24
    2a50:	29 f4       	brne	.+10     	; 0x2a5c <Cursor_pos+0x24>
		add = 0x80;
    2a52:	80 e8       	ldi	r24, 0x80	; 128
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9a 83       	std	Y+2, r25	; 0x02
    2a58:	89 83       	std	Y+1, r24	; 0x01
    2a5a:	07 c0       	rjmp	.+14     	; 0x2a6a <Cursor_pos+0x32>
	else if(x_pos == 1)
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	81 30       	cpi	r24, 0x01	; 1
    2a60:	21 f4       	brne	.+8      	; 0x2a6a <Cursor_pos+0x32>
		add = 0xc0;
    2a62:	80 ec       	ldi	r24, 0xC0	; 192
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	9a 83       	std	Y+2, r25	; 0x02
    2a68:	89 83       	std	Y+1, r24	; 0x01
	if(y_pos < 16)
    2a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6c:	80 31       	cpi	r24, 0x10	; 16
    2a6e:	48 f4       	brcc	.+18     	; 0x2a82 <Cursor_pos+0x4a>
		add += y_pos;
    2a70:	8c 81       	ldd	r24, Y+4	; 0x04
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7a:	82 0f       	add	r24, r18
    2a7c:	93 1f       	adc	r25, r19
    2a7e:	9a 83       	std	Y+2, r25	; 0x02
    2a80:	89 83       	std	Y+1, r24	; 0x01
	lcd_send_cmd(add);
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_send_cmd>
}
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <GLCD_Command>:
#define RST		 PC5

#define TotalPage	 8

void GLCD_Command(char Command) /* GLCD command function */
{
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
    2a9e:	e1 97       	sbiw	r28, 0x31	; 49
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Command; /* Copy command on data pin */
    2aac:	eb e3       	ldi	r30, 0x3B	; 59
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	89 a9       	ldd	r24, Y+49	; 0x31
    2ab2:	80 83       	st	Z, r24
	Command_Port &= ~(1 << RS); /* Make RS LOW for command register*/
    2ab4:	a5 e3       	ldi	r26, 0x35	; 53
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e5 e3       	ldi	r30, 0x35	; 53
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	8e 7f       	andi	r24, 0xFE	; 254
    2ac0:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW); /* Make RW LOW for write operation */
    2ac2:	a5 e3       	ldi	r26, 0x35	; 53
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	e5 e3       	ldi	r30, 0x35	; 53
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	8d 7f       	andi	r24, 0xFD	; 253
    2ace:	8c 93       	st	X, r24
	Command_Port |= (1 << EN); /* HIGH-LOW transition on Enable */
    2ad0:	a5 e3       	ldi	r26, 0x35	; 53
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e5 e3       	ldi	r30, 0x35	; 53
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	84 60       	ori	r24, 0x04	; 4
    2adc:	8c 93       	st	X, r24
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ae4:	b0 e4       	ldi	r27, 0x40	; 64
    2ae6:	8d a7       	std	Y+45, r24	; 0x2d
    2ae8:	9e a7       	std	Y+46, r25	; 0x2e
    2aea:	af a7       	std	Y+47, r26	; 0x2f
    2aec:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aee:	6d a5       	ldd	r22, Y+45	; 0x2d
    2af0:	7e a5       	ldd	r23, Y+46	; 0x2e
    2af2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af4:	98 a9       	ldd	r25, Y+48	; 0x30
    2af6:	2b ea       	ldi	r18, 0xAB	; 171
    2af8:	3a ea       	ldi	r19, 0xAA	; 170
    2afa:	4a ea       	ldi	r20, 0xAA	; 170
    2afc:	50 e4       	ldi	r21, 0x40	; 64
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	89 a7       	std	Y+41, r24	; 0x29
    2b08:	9a a7       	std	Y+42, r25	; 0x2a
    2b0a:	ab a7       	std	Y+43, r26	; 0x2b
    2b0c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2b0e:	69 a5       	ldd	r22, Y+41	; 0x29
    2b10:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b12:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b14:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	40 e8       	ldi	r20, 0x80	; 128
    2b1c:	5f e3       	ldi	r21, 0x3F	; 63
    2b1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b22:	88 23       	and	r24, r24
    2b24:	1c f4       	brge	.+6      	; 0x2b2c <GLCD_Command+0x96>
		__ticks = 1;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	88 a7       	std	Y+40, r24	; 0x28
    2b2a:	91 c0       	rjmp	.+290    	; 0x2c4e <GLCD_Command+0x1b8>
	else if (__tmp > 255)
    2b2c:	69 a5       	ldd	r22, Y+41	; 0x29
    2b2e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b30:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b32:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	4f e7       	ldi	r20, 0x7F	; 127
    2b3a:	53 e4       	ldi	r21, 0x43	; 67
    2b3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b40:	18 16       	cp	r1, r24
    2b42:	0c f0       	brlt	.+2      	; 0x2b46 <GLCD_Command+0xb0>
    2b44:	7b c0       	rjmp	.+246    	; 0x2c3c <GLCD_Command+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    2b46:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b48:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b4c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	4a e7       	ldi	r20, 0x7A	; 122
    2b54:	54 e4       	ldi	r21, 0x44	; 68
    2b56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	8c a3       	std	Y+36, r24	; 0x24
    2b60:	9d a3       	std	Y+37, r25	; 0x25
    2b62:	ae a3       	std	Y+38, r26	; 0x26
    2b64:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b66:	6c a1       	ldd	r22, Y+36	; 0x24
    2b68:	7d a1       	ldd	r23, Y+37	; 0x25
    2b6a:	8e a1       	ldd	r24, Y+38	; 0x26
    2b6c:	9f a1       	ldd	r25, Y+39	; 0x27
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	4a e7       	ldi	r20, 0x7A	; 122
    2b74:	55 e4       	ldi	r21, 0x45	; 69
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	88 a3       	std	Y+32, r24	; 0x20
    2b80:	99 a3       	std	Y+33, r25	; 0x21
    2b82:	aa a3       	std	Y+34, r26	; 0x22
    2b84:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2b86:	68 a1       	ldd	r22, Y+32	; 0x20
    2b88:	79 a1       	ldd	r23, Y+33	; 0x21
    2b8a:	8a a1       	ldd	r24, Y+34	; 0x22
    2b8c:	9b a1       	ldd	r25, Y+35	; 0x23
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e8       	ldi	r20, 0x80	; 128
    2b94:	5f e3       	ldi	r21, 0x3F	; 63
    2b96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b9a:	88 23       	and	r24, r24
    2b9c:	2c f4       	brge	.+10     	; 0x2ba8 <GLCD_Command+0x112>
		__ticks = 1;
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	9f 8f       	std	Y+31, r25	; 0x1f
    2ba4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ba6:	3f c0       	rjmp	.+126    	; 0x2c26 <GLCD_Command+0x190>
	else if (__tmp > 65535)
    2ba8:	68 a1       	ldd	r22, Y+32	; 0x20
    2baa:	79 a1       	ldd	r23, Y+33	; 0x21
    2bac:	8a a1       	ldd	r24, Y+34	; 0x22
    2bae:	9b a1       	ldd	r25, Y+35	; 0x23
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	3f ef       	ldi	r19, 0xFF	; 255
    2bb4:	4f e7       	ldi	r20, 0x7F	; 127
    2bb6:	57 e4       	ldi	r21, 0x47	; 71
    2bb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bbc:	18 16       	cp	r1, r24
    2bbe:	4c f5       	brge	.+82     	; 0x2c12 <GLCD_Command+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc0:	6c a1       	ldd	r22, Y+36	; 0x24
    2bc2:	7d a1       	ldd	r23, Y+37	; 0x25
    2bc4:	8e a1       	ldd	r24, Y+38	; 0x26
    2bc6:	9f a1       	ldd	r25, Y+39	; 0x27
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	40 e2       	ldi	r20, 0x20	; 32
    2bce:	51 e4       	ldi	r21, 0x41	; 65
    2bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cd 01       	movw	r24, r26
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9f 8f       	std	Y+31, r25	; 0x1f
    2be6:	8e 8f       	std	Y+30, r24	; 0x1e
    2be8:	0f c0       	rjmp	.+30     	; 0x2c08 <GLCD_Command+0x172>
    2bea:	80 e9       	ldi	r24, 0x90	; 144
    2bec:	91 e0       	ldi	r25, 0x01	; 1
    2bee:	9d 8f       	std	Y+29, r25	; 0x1d
    2bf0:	8c 8f       	std	Y+28, r24	; 0x1c
    2bf2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2bf4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	f1 f7       	brne	.-4      	; 0x2bf6 <GLCD_Command+0x160>
    2bfa:	9d 8f       	std	Y+29, r25	; 0x1d
    2bfc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c00:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	9f 8f       	std	Y+31, r25	; 0x1f
    2c06:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c0a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	69 f7       	brne	.-38     	; 0x2bea <GLCD_Command+0x154>
    2c10:	24 c0       	rjmp	.+72     	; 0x2c5a <GLCD_Command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c12:	68 a1       	ldd	r22, Y+32	; 0x20
    2c14:	79 a1       	ldd	r23, Y+33	; 0x21
    2c16:	8a a1       	ldd	r24, Y+34	; 0x22
    2c18:	9b a1       	ldd	r25, Y+35	; 0x23
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9f 8f       	std	Y+31, r25	; 0x1f
    2c24:	8e 8f       	std	Y+30, r24	; 0x1e
    2c26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c28:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c2a:	9b 8f       	std	Y+27, r25	; 0x1b
    2c2c:	8a 8f       	std	Y+26, r24	; 0x1a
    2c2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c30:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <GLCD_Command+0x19c>
    2c36:	9b 8f       	std	Y+27, r25	; 0x1b
    2c38:	8a 8f       	std	Y+26, r24	; 0x1a
    2c3a:	0f c0       	rjmp	.+30     	; 0x2c5a <GLCD_Command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c3c:	69 a5       	ldd	r22, Y+41	; 0x29
    2c3e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c40:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c42:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	88 a7       	std	Y+40, r24	; 0x28
    2c4e:	88 a5       	ldd	r24, Y+40	; 0x28
    2c50:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c52:	89 8d       	ldd	r24, Y+25	; 0x19
    2c54:	8a 95       	dec	r24
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <GLCD_Command+0x1be>
    2c58:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    2c5a:	a5 e3       	ldi	r26, 0x35	; 53
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	e5 e3       	ldi	r30, 0x35	; 53
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	8b 7f       	andi	r24, 0xFB	; 251
    2c66:	8c 93       	st	X, r24
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	a0 ea       	ldi	r26, 0xA0	; 160
    2c6e:	b0 e4       	ldi	r27, 0x40	; 64
    2c70:	8d 8b       	std	Y+21, r24	; 0x15
    2c72:	9e 8b       	std	Y+22, r25	; 0x16
    2c74:	af 8b       	std	Y+23, r26	; 0x17
    2c76:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c78:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c80:	2b ea       	ldi	r18, 0xAB	; 171
    2c82:	3a ea       	ldi	r19, 0xAA	; 170
    2c84:	4a ea       	ldi	r20, 0xAA	; 170
    2c86:	50 e4       	ldi	r21, 0x40	; 64
    2c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	89 8b       	std	Y+17, r24	; 0x11
    2c92:	9a 8b       	std	Y+18, r25	; 0x12
    2c94:	ab 8b       	std	Y+19, r26	; 0x13
    2c96:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c98:	69 89       	ldd	r22, Y+17	; 0x11
    2c9a:	7a 89       	ldd	r23, Y+18	; 0x12
    2c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e8       	ldi	r20, 0x80	; 128
    2ca6:	5f e3       	ldi	r21, 0x3F	; 63
    2ca8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cac:	88 23       	and	r24, r24
    2cae:	1c f4       	brge	.+6      	; 0x2cb6 <GLCD_Command+0x220>
		__ticks = 1;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	88 8b       	std	Y+16, r24	; 0x10
    2cb4:	91 c0       	rjmp	.+290    	; 0x2dd8 <GLCD_Command+0x342>
	else if (__tmp > 255)
    2cb6:	69 89       	ldd	r22, Y+17	; 0x11
    2cb8:	7a 89       	ldd	r23, Y+18	; 0x12
    2cba:	8b 89       	ldd	r24, Y+19	; 0x13
    2cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	4f e7       	ldi	r20, 0x7F	; 127
    2cc4:	53 e4       	ldi	r21, 0x43	; 67
    2cc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cca:	18 16       	cp	r1, r24
    2ccc:	0c f0       	brlt	.+2      	; 0x2cd0 <GLCD_Command+0x23a>
    2cce:	7b c0       	rjmp	.+246    	; 0x2dc6 <GLCD_Command+0x330>
	{
		_delay_ms(__us / 1000.0);
    2cd0:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd2:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	4a e7       	ldi	r20, 0x7A	; 122
    2cde:	54 e4       	ldi	r21, 0x44	; 68
    2ce0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	8c 87       	std	Y+12, r24	; 0x0c
    2cea:	9d 87       	std	Y+13, r25	; 0x0d
    2cec:	ae 87       	std	Y+14, r26	; 0x0e
    2cee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cf2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cf4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cf6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	4a e7       	ldi	r20, 0x7A	; 122
    2cfe:	55 e4       	ldi	r21, 0x45	; 69
    2d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	88 87       	std	Y+8, r24	; 0x08
    2d0a:	99 87       	std	Y+9, r25	; 0x09
    2d0c:	aa 87       	std	Y+10, r26	; 0x0a
    2d0e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d10:	68 85       	ldd	r22, Y+8	; 0x08
    2d12:	79 85       	ldd	r23, Y+9	; 0x09
    2d14:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d16:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e8       	ldi	r20, 0x80	; 128
    2d1e:	5f e3       	ldi	r21, 0x3F	; 63
    2d20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d24:	88 23       	and	r24, r24
    2d26:	2c f4       	brge	.+10     	; 0x2d32 <GLCD_Command+0x29c>
		__ticks = 1;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9f 83       	std	Y+7, r25	; 0x07
    2d2e:	8e 83       	std	Y+6, r24	; 0x06
    2d30:	3f c0       	rjmp	.+126    	; 0x2db0 <GLCD_Command+0x31a>
	else if (__tmp > 65535)
    2d32:	68 85       	ldd	r22, Y+8	; 0x08
    2d34:	79 85       	ldd	r23, Y+9	; 0x09
    2d36:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d38:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	3f ef       	ldi	r19, 0xFF	; 255
    2d3e:	4f e7       	ldi	r20, 0x7F	; 127
    2d40:	57 e4       	ldi	r21, 0x47	; 71
    2d42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d46:	18 16       	cp	r1, r24
    2d48:	4c f5       	brge	.+82     	; 0x2d9c <GLCD_Command+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d4c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d50:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e2       	ldi	r20, 0x20	; 32
    2d58:	51 e4       	ldi	r21, 0x41	; 65
    2d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	bc 01       	movw	r22, r24
    2d64:	cd 01       	movw	r24, r26
    2d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	9f 83       	std	Y+7, r25	; 0x07
    2d70:	8e 83       	std	Y+6, r24	; 0x06
    2d72:	0f c0       	rjmp	.+30     	; 0x2d92 <GLCD_Command+0x2fc>
    2d74:	80 e9       	ldi	r24, 0x90	; 144
    2d76:	91 e0       	ldi	r25, 0x01	; 1
    2d78:	9d 83       	std	Y+5, r25	; 0x05
    2d7a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	f1 f7       	brne	.-4      	; 0x2d80 <GLCD_Command+0x2ea>
    2d84:	9d 83       	std	Y+5, r25	; 0x05
    2d86:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d88:	8e 81       	ldd	r24, Y+6	; 0x06
    2d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	9f 83       	std	Y+7, r25	; 0x07
    2d90:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d92:	8e 81       	ldd	r24, Y+6	; 0x06
    2d94:	9f 81       	ldd	r25, Y+7	; 0x07
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	69 f7       	brne	.-38     	; 0x2d74 <GLCD_Command+0x2de>
    2d9a:	24 c0       	rjmp	.+72     	; 0x2de4 <GLCD_Command+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9c:	68 85       	ldd	r22, Y+8	; 0x08
    2d9e:	79 85       	ldd	r23, Y+9	; 0x09
    2da0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2da2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	9f 83       	std	Y+7, r25	; 0x07
    2dae:	8e 83       	std	Y+6, r24	; 0x06
    2db0:	8e 81       	ldd	r24, Y+6	; 0x06
    2db2:	9f 81       	ldd	r25, Y+7	; 0x07
    2db4:	9b 83       	std	Y+3, r25	; 0x03
    2db6:	8a 83       	std	Y+2, r24	; 0x02
    2db8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dba:	9b 81       	ldd	r25, Y+3	; 0x03
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <GLCD_Command+0x326>
    2dc0:	9b 83       	std	Y+3, r25	; 0x03
    2dc2:	8a 83       	std	Y+2, r24	; 0x02
    2dc4:	0f c0       	rjmp	.+30     	; 0x2de4 <GLCD_Command+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dc6:	69 89       	ldd	r22, Y+17	; 0x11
    2dc8:	7a 89       	ldd	r23, Y+18	; 0x12
    2dca:	8b 89       	ldd	r24, Y+19	; 0x13
    2dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	88 8b       	std	Y+16, r24	; 0x10
    2dd8:	88 89       	ldd	r24, Y+16	; 0x10
    2dda:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	8a 95       	dec	r24
    2de0:	f1 f7       	brne	.-4      	; 0x2dde <GLCD_Command+0x348>
    2de2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    2de4:	e1 96       	adiw	r28, 0x31	; 49
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	f8 94       	cli
    2dea:	de bf       	out	0x3e, r29	; 62
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	cd bf       	out	0x3d, r28	; 61
    2df0:	cf 91       	pop	r28
    2df2:	df 91       	pop	r29
    2df4:	08 95       	ret

00002df6 <GLCD_Data>:

void GLCD_Data(char Data) /* GLCD data function */
{
    2df6:	df 93       	push	r29
    2df8:	cf 93       	push	r28
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	e1 97       	sbiw	r28, 0x31	; 49
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Data; /* Copy data on data pin */
    2e0c:	eb e3       	ldi	r30, 0x3B	; 59
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	89 a9       	ldd	r24, Y+49	; 0x31
    2e12:	80 83       	st	Z, r24
	Command_Port |= (1 << RS); /* Make RS HIGH for data register */
    2e14:	a5 e3       	ldi	r26, 0x35	; 53
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	e5 e3       	ldi	r30, 0x35	; 53
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	80 81       	ld	r24, Z
    2e1e:	81 60       	ori	r24, 0x01	; 1
    2e20:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW); /* Make RW LOW for write operation */
    2e22:	a5 e3       	ldi	r26, 0x35	; 53
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	e5 e3       	ldi	r30, 0x35	; 53
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	8d 7f       	andi	r24, 0xFD	; 253
    2e2e:	8c 93       	st	X, r24
	Command_Port |= (1 << EN); /* HIGH-LOW transition on Enable */
    2e30:	a5 e3       	ldi	r26, 0x35	; 53
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	e5 e3       	ldi	r30, 0x35	; 53
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	84 60       	ori	r24, 0x04	; 4
    2e3c:	8c 93       	st	X, r24
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	a0 ea       	ldi	r26, 0xA0	; 160
    2e44:	b0 e4       	ldi	r27, 0x40	; 64
    2e46:	8d a7       	std	Y+45, r24	; 0x2d
    2e48:	9e a7       	std	Y+46, r25	; 0x2e
    2e4a:	af a7       	std	Y+47, r26	; 0x2f
    2e4c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e4e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2e50:	7e a5       	ldd	r23, Y+46	; 0x2e
    2e52:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e54:	98 a9       	ldd	r25, Y+48	; 0x30
    2e56:	2b ea       	ldi	r18, 0xAB	; 171
    2e58:	3a ea       	ldi	r19, 0xAA	; 170
    2e5a:	4a ea       	ldi	r20, 0xAA	; 170
    2e5c:	50 e4       	ldi	r21, 0x40	; 64
    2e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	89 a7       	std	Y+41, r24	; 0x29
    2e68:	9a a7       	std	Y+42, r25	; 0x2a
    2e6a:	ab a7       	std	Y+43, r26	; 0x2b
    2e6c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2e6e:	69 a5       	ldd	r22, Y+41	; 0x29
    2e70:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e74:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	40 e8       	ldi	r20, 0x80	; 128
    2e7c:	5f e3       	ldi	r21, 0x3F	; 63
    2e7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e82:	88 23       	and	r24, r24
    2e84:	1c f4       	brge	.+6      	; 0x2e8c <GLCD_Data+0x96>
		__ticks = 1;
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	88 a7       	std	Y+40, r24	; 0x28
    2e8a:	91 c0       	rjmp	.+290    	; 0x2fae <GLCD_Data+0x1b8>
	else if (__tmp > 255)
    2e8c:	69 a5       	ldd	r22, Y+41	; 0x29
    2e8e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e90:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e92:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	4f e7       	ldi	r20, 0x7F	; 127
    2e9a:	53 e4       	ldi	r21, 0x43	; 67
    2e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ea0:	18 16       	cp	r1, r24
    2ea2:	0c f0       	brlt	.+2      	; 0x2ea6 <GLCD_Data+0xb0>
    2ea4:	7b c0       	rjmp	.+246    	; 0x2f9c <GLCD_Data+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    2ea6:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ea8:	7e a5       	ldd	r23, Y+46	; 0x2e
    2eaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eac:	98 a9       	ldd	r25, Y+48	; 0x30
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	4a e7       	ldi	r20, 0x7A	; 122
    2eb4:	54 e4       	ldi	r21, 0x44	; 68
    2eb6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	8c a3       	std	Y+36, r24	; 0x24
    2ec0:	9d a3       	std	Y+37, r25	; 0x25
    2ec2:	ae a3       	std	Y+38, r26	; 0x26
    2ec4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec6:	6c a1       	ldd	r22, Y+36	; 0x24
    2ec8:	7d a1       	ldd	r23, Y+37	; 0x25
    2eca:	8e a1       	ldd	r24, Y+38	; 0x26
    2ecc:	9f a1       	ldd	r25, Y+39	; 0x27
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	4a e7       	ldi	r20, 0x7A	; 122
    2ed4:	55 e4       	ldi	r21, 0x45	; 69
    2ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	88 a3       	std	Y+32, r24	; 0x20
    2ee0:	99 a3       	std	Y+33, r25	; 0x21
    2ee2:	aa a3       	std	Y+34, r26	; 0x22
    2ee4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2ee6:	68 a1       	ldd	r22, Y+32	; 0x20
    2ee8:	79 a1       	ldd	r23, Y+33	; 0x21
    2eea:	8a a1       	ldd	r24, Y+34	; 0x22
    2eec:	9b a1       	ldd	r25, Y+35	; 0x23
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e8       	ldi	r20, 0x80	; 128
    2ef4:	5f e3       	ldi	r21, 0x3F	; 63
    2ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2efa:	88 23       	and	r24, r24
    2efc:	2c f4       	brge	.+10     	; 0x2f08 <GLCD_Data+0x112>
		__ticks = 1;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	9f 8f       	std	Y+31, r25	; 0x1f
    2f04:	8e 8f       	std	Y+30, r24	; 0x1e
    2f06:	3f c0       	rjmp	.+126    	; 0x2f86 <GLCD_Data+0x190>
	else if (__tmp > 65535)
    2f08:	68 a1       	ldd	r22, Y+32	; 0x20
    2f0a:	79 a1       	ldd	r23, Y+33	; 0x21
    2f0c:	8a a1       	ldd	r24, Y+34	; 0x22
    2f0e:	9b a1       	ldd	r25, Y+35	; 0x23
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	3f ef       	ldi	r19, 0xFF	; 255
    2f14:	4f e7       	ldi	r20, 0x7F	; 127
    2f16:	57 e4       	ldi	r21, 0x47	; 71
    2f18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f1c:	18 16       	cp	r1, r24
    2f1e:	4c f5       	brge	.+82     	; 0x2f72 <GLCD_Data+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f20:	6c a1       	ldd	r22, Y+36	; 0x24
    2f22:	7d a1       	ldd	r23, Y+37	; 0x25
    2f24:	8e a1       	ldd	r24, Y+38	; 0x26
    2f26:	9f a1       	ldd	r25, Y+39	; 0x27
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e2       	ldi	r20, 0x20	; 32
    2f2e:	51 e4       	ldi	r21, 0x41	; 65
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	bc 01       	movw	r22, r24
    2f3a:	cd 01       	movw	r24, r26
    2f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	9f 8f       	std	Y+31, r25	; 0x1f
    2f46:	8e 8f       	std	Y+30, r24	; 0x1e
    2f48:	0f c0       	rjmp	.+30     	; 0x2f68 <GLCD_Data+0x172>
    2f4a:	80 e9       	ldi	r24, 0x90	; 144
    2f4c:	91 e0       	ldi	r25, 0x01	; 1
    2f4e:	9d 8f       	std	Y+29, r25	; 0x1d
    2f50:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <GLCD_Data+0x160>
    2f5a:	9d 8f       	std	Y+29, r25	; 0x1d
    2f5c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f60:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	9f 8f       	std	Y+31, r25	; 0x1f
    2f66:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	69 f7       	brne	.-38     	; 0x2f4a <GLCD_Data+0x154>
    2f70:	24 c0       	rjmp	.+72     	; 0x2fba <GLCD_Data+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f72:	68 a1       	ldd	r22, Y+32	; 0x20
    2f74:	79 a1       	ldd	r23, Y+33	; 0x21
    2f76:	8a a1       	ldd	r24, Y+34	; 0x22
    2f78:	9b a1       	ldd	r25, Y+35	; 0x23
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	9f 8f       	std	Y+31, r25	; 0x1f
    2f84:	8e 8f       	std	Y+30, r24	; 0x1e
    2f86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f88:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f8a:	9b 8f       	std	Y+27, r25	; 0x1b
    2f8c:	8a 8f       	std	Y+26, r24	; 0x1a
    2f8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f90:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <GLCD_Data+0x19c>
    2f96:	9b 8f       	std	Y+27, r25	; 0x1b
    2f98:	8a 8f       	std	Y+26, r24	; 0x1a
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <GLCD_Data+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f9c:	69 a5       	ldd	r22, Y+41	; 0x29
    2f9e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fa0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fa2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	88 a7       	std	Y+40, r24	; 0x28
    2fae:	88 a5       	ldd	r24, Y+40	; 0x28
    2fb0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fb2:	89 8d       	ldd	r24, Y+25	; 0x19
    2fb4:	8a 95       	dec	r24
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <GLCD_Data+0x1be>
    2fb8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    2fba:	a5 e3       	ldi	r26, 0x35	; 53
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	e5 e3       	ldi	r30, 0x35	; 53
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	8b 7f       	andi	r24, 0xFB	; 251
    2fc6:	8c 93       	st	X, r24
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	a0 ea       	ldi	r26, 0xA0	; 160
    2fce:	b0 e4       	ldi	r27, 0x40	; 64
    2fd0:	8d 8b       	std	Y+21, r24	; 0x15
    2fd2:	9e 8b       	std	Y+22, r25	; 0x16
    2fd4:	af 8b       	std	Y+23, r26	; 0x17
    2fd6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    2fda:	7e 89       	ldd	r23, Y+22	; 0x16
    2fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2fde:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe0:	2b ea       	ldi	r18, 0xAB	; 171
    2fe2:	3a ea       	ldi	r19, 0xAA	; 170
    2fe4:	4a ea       	ldi	r20, 0xAA	; 170
    2fe6:	50 e4       	ldi	r21, 0x40	; 64
    2fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	89 8b       	std	Y+17, r24	; 0x11
    2ff2:	9a 8b       	std	Y+18, r25	; 0x12
    2ff4:	ab 8b       	std	Y+19, r26	; 0x13
    2ff6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ff8:	69 89       	ldd	r22, Y+17	; 0x11
    2ffa:	7a 89       	ldd	r23, Y+18	; 0x12
    2ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e8       	ldi	r20, 0x80	; 128
    3006:	5f e3       	ldi	r21, 0x3F	; 63
    3008:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    300c:	88 23       	and	r24, r24
    300e:	1c f4       	brge	.+6      	; 0x3016 <GLCD_Data+0x220>
		__ticks = 1;
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	88 8b       	std	Y+16, r24	; 0x10
    3014:	91 c0       	rjmp	.+290    	; 0x3138 <GLCD_Data+0x342>
	else if (__tmp > 255)
    3016:	69 89       	ldd	r22, Y+17	; 0x11
    3018:	7a 89       	ldd	r23, Y+18	; 0x12
    301a:	8b 89       	ldd	r24, Y+19	; 0x13
    301c:	9c 89       	ldd	r25, Y+20	; 0x14
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	4f e7       	ldi	r20, 0x7F	; 127
    3024:	53 e4       	ldi	r21, 0x43	; 67
    3026:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    302a:	18 16       	cp	r1, r24
    302c:	0c f0       	brlt	.+2      	; 0x3030 <GLCD_Data+0x23a>
    302e:	7b c0       	rjmp	.+246    	; 0x3126 <GLCD_Data+0x330>
	{
		_delay_ms(__us / 1000.0);
    3030:	6d 89       	ldd	r22, Y+21	; 0x15
    3032:	7e 89       	ldd	r23, Y+22	; 0x16
    3034:	8f 89       	ldd	r24, Y+23	; 0x17
    3036:	98 8d       	ldd	r25, Y+24	; 0x18
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	4a e7       	ldi	r20, 0x7A	; 122
    303e:	54 e4       	ldi	r21, 0x44	; 68
    3040:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	8c 87       	std	Y+12, r24	; 0x0c
    304a:	9d 87       	std	Y+13, r25	; 0x0d
    304c:	ae 87       	std	Y+14, r26	; 0x0e
    304e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3050:	6c 85       	ldd	r22, Y+12	; 0x0c
    3052:	7d 85       	ldd	r23, Y+13	; 0x0d
    3054:	8e 85       	ldd	r24, Y+14	; 0x0e
    3056:	9f 85       	ldd	r25, Y+15	; 0x0f
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	4a e7       	ldi	r20, 0x7A	; 122
    305e:	55 e4       	ldi	r21, 0x45	; 69
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	88 87       	std	Y+8, r24	; 0x08
    306a:	99 87       	std	Y+9, r25	; 0x09
    306c:	aa 87       	std	Y+10, r26	; 0x0a
    306e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3070:	68 85       	ldd	r22, Y+8	; 0x08
    3072:	79 85       	ldd	r23, Y+9	; 0x09
    3074:	8a 85       	ldd	r24, Y+10	; 0x0a
    3076:	9b 85       	ldd	r25, Y+11	; 0x0b
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e8       	ldi	r20, 0x80	; 128
    307e:	5f e3       	ldi	r21, 0x3F	; 63
    3080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3084:	88 23       	and	r24, r24
    3086:	2c f4       	brge	.+10     	; 0x3092 <GLCD_Data+0x29c>
		__ticks = 1;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	9f 83       	std	Y+7, r25	; 0x07
    308e:	8e 83       	std	Y+6, r24	; 0x06
    3090:	3f c0       	rjmp	.+126    	; 0x3110 <GLCD_Data+0x31a>
	else if (__tmp > 65535)
    3092:	68 85       	ldd	r22, Y+8	; 0x08
    3094:	79 85       	ldd	r23, Y+9	; 0x09
    3096:	8a 85       	ldd	r24, Y+10	; 0x0a
    3098:	9b 85       	ldd	r25, Y+11	; 0x0b
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	3f ef       	ldi	r19, 0xFF	; 255
    309e:	4f e7       	ldi	r20, 0x7F	; 127
    30a0:	57 e4       	ldi	r21, 0x47	; 71
    30a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a6:	18 16       	cp	r1, r24
    30a8:	4c f5       	brge	.+82     	; 0x30fc <GLCD_Data+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    30ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    30ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    30b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e2       	ldi	r20, 0x20	; 32
    30b8:	51 e4       	ldi	r21, 0x41	; 65
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	bc 01       	movw	r22, r24
    30c4:	cd 01       	movw	r24, r26
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	9f 83       	std	Y+7, r25	; 0x07
    30d0:	8e 83       	std	Y+6, r24	; 0x06
    30d2:	0f c0       	rjmp	.+30     	; 0x30f2 <GLCD_Data+0x2fc>
    30d4:	80 e9       	ldi	r24, 0x90	; 144
    30d6:	91 e0       	ldi	r25, 0x01	; 1
    30d8:	9d 83       	std	Y+5, r25	; 0x05
    30da:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30dc:	8c 81       	ldd	r24, Y+4	; 0x04
    30de:	9d 81       	ldd	r25, Y+5	; 0x05
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <GLCD_Data+0x2ea>
    30e4:	9d 83       	std	Y+5, r25	; 0x05
    30e6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e8:	8e 81       	ldd	r24, Y+6	; 0x06
    30ea:	9f 81       	ldd	r25, Y+7	; 0x07
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	9f 83       	std	Y+7, r25	; 0x07
    30f0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f2:	8e 81       	ldd	r24, Y+6	; 0x06
    30f4:	9f 81       	ldd	r25, Y+7	; 0x07
    30f6:	00 97       	sbiw	r24, 0x00	; 0
    30f8:	69 f7       	brne	.-38     	; 0x30d4 <GLCD_Data+0x2de>
    30fa:	24 c0       	rjmp	.+72     	; 0x3144 <GLCD_Data+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fc:	68 85       	ldd	r22, Y+8	; 0x08
    30fe:	79 85       	ldd	r23, Y+9	; 0x09
    3100:	8a 85       	ldd	r24, Y+10	; 0x0a
    3102:	9b 85       	ldd	r25, Y+11	; 0x0b
    3104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	9f 83       	std	Y+7, r25	; 0x07
    310e:	8e 83       	std	Y+6, r24	; 0x06
    3110:	8e 81       	ldd	r24, Y+6	; 0x06
    3112:	9f 81       	ldd	r25, Y+7	; 0x07
    3114:	9b 83       	std	Y+3, r25	; 0x03
    3116:	8a 83       	std	Y+2, r24	; 0x02
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	9b 81       	ldd	r25, Y+3	; 0x03
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	f1 f7       	brne	.-4      	; 0x311c <GLCD_Data+0x326>
    3120:	9b 83       	std	Y+3, r25	; 0x03
    3122:	8a 83       	std	Y+2, r24	; 0x02
    3124:	0f c0       	rjmp	.+30     	; 0x3144 <GLCD_Data+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3126:	69 89       	ldd	r22, Y+17	; 0x11
    3128:	7a 89       	ldd	r23, Y+18	; 0x12
    312a:	8b 89       	ldd	r24, Y+19	; 0x13
    312c:	9c 89       	ldd	r25, Y+20	; 0x14
    312e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	88 8b       	std	Y+16, r24	; 0x10
    3138:	88 89       	ldd	r24, Y+16	; 0x10
    313a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	8a 95       	dec	r24
    3140:	f1 f7       	brne	.-4      	; 0x313e <GLCD_Data+0x348>
    3142:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    3144:	e1 96       	adiw	r28, 0x31	; 49
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	de bf       	out	0x3e, r29	; 62
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	cd bf       	out	0x3d, r28	; 61
    3150:	cf 91       	pop	r28
    3152:	df 91       	pop	r29
    3154:	08 95       	ret

00003156 <GLCD_Init>:

void GLCD_Init() /* GLCD initialize function */
{
    3156:	df 93       	push	r29
    3158:	cf 93       	push	r28
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	2e 97       	sbiw	r28, 0x0e	; 14
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	f8 94       	cli
    3164:	de bf       	out	0x3e, r29	; 62
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	cd bf       	out	0x3d, r28	; 61
	Data_Port_Dir = 0xFF;
    316a:	ea e3       	ldi	r30, 0x3A	; 58
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	8f ef       	ldi	r24, 0xFF	; 255
    3170:	80 83       	st	Z, r24
	Command_Port_Dir = 0xFF;
    3172:	e4 e3       	ldi	r30, 0x34	; 52
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	8f ef       	ldi	r24, 0xFF	; 255
    3178:	80 83       	st	Z, r24
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
    317a:	a5 e3       	ldi	r26, 0x35	; 53
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	e5 e3       	ldi	r30, 0x35	; 53
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	80 81       	ld	r24, Z
    3184:	88 63       	ori	r24, 0x38	; 56
    3186:	8c 93       	st	X, r24
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	a0 ea       	ldi	r26, 0xA0	; 160
    318e:	b1 e4       	ldi	r27, 0x41	; 65
    3190:	8b 87       	std	Y+11, r24	; 0x0b
    3192:	9c 87       	std	Y+12, r25	; 0x0c
    3194:	ad 87       	std	Y+13, r26	; 0x0d
    3196:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3198:	6b 85       	ldd	r22, Y+11	; 0x0b
    319a:	7c 85       	ldd	r23, Y+12	; 0x0c
    319c:	8d 85       	ldd	r24, Y+13	; 0x0d
    319e:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	4a e7       	ldi	r20, 0x7A	; 122
    31a6:	55 e4       	ldi	r21, 0x45	; 69
    31a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	8f 83       	std	Y+7, r24	; 0x07
    31b2:	98 87       	std	Y+8, r25	; 0x08
    31b4:	a9 87       	std	Y+9, r26	; 0x09
    31b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31b8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ba:	78 85       	ldd	r23, Y+8	; 0x08
    31bc:	89 85       	ldd	r24, Y+9	; 0x09
    31be:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e8       	ldi	r20, 0x80	; 128
    31c6:	5f e3       	ldi	r21, 0x3F	; 63
    31c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31cc:	88 23       	and	r24, r24
    31ce:	2c f4       	brge	.+10     	; 0x31da <GLCD_Init+0x84>
		__ticks = 1;
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	9e 83       	std	Y+6, r25	; 0x06
    31d6:	8d 83       	std	Y+5, r24	; 0x05
    31d8:	3f c0       	rjmp	.+126    	; 0x3258 <GLCD_Init+0x102>
	else if (__tmp > 65535)
    31da:	6f 81       	ldd	r22, Y+7	; 0x07
    31dc:	78 85       	ldd	r23, Y+8	; 0x08
    31de:	89 85       	ldd	r24, Y+9	; 0x09
    31e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	3f ef       	ldi	r19, 0xFF	; 255
    31e6:	4f e7       	ldi	r20, 0x7F	; 127
    31e8:	57 e4       	ldi	r21, 0x47	; 71
    31ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ee:	18 16       	cp	r1, r24
    31f0:	4c f5       	brge	.+82     	; 0x3244 <GLCD_Init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e2       	ldi	r20, 0x20	; 32
    3200:	51 e4       	ldi	r21, 0x41	; 65
    3202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	bc 01       	movw	r22, r24
    320c:	cd 01       	movw	r24, r26
    320e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	9e 83       	std	Y+6, r25	; 0x06
    3218:	8d 83       	std	Y+5, r24	; 0x05
    321a:	0f c0       	rjmp	.+30     	; 0x323a <GLCD_Init+0xe4>
    321c:	80 e9       	ldi	r24, 0x90	; 144
    321e:	91 e0       	ldi	r25, 0x01	; 1
    3220:	9c 83       	std	Y+4, r25	; 0x04
    3222:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
    3226:	9c 81       	ldd	r25, Y+4	; 0x04
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	f1 f7       	brne	.-4      	; 0x3228 <GLCD_Init+0xd2>
    322c:	9c 83       	std	Y+4, r25	; 0x04
    322e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3230:	8d 81       	ldd	r24, Y+5	; 0x05
    3232:	9e 81       	ldd	r25, Y+6	; 0x06
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	9e 83       	std	Y+6, r25	; 0x06
    3238:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323a:	8d 81       	ldd	r24, Y+5	; 0x05
    323c:	9e 81       	ldd	r25, Y+6	; 0x06
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	69 f7       	brne	.-38     	; 0x321c <GLCD_Init+0xc6>
    3242:	14 c0       	rjmp	.+40     	; 0x326c <GLCD_Init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3244:	6f 81       	ldd	r22, Y+7	; 0x07
    3246:	78 85       	ldd	r23, Y+8	; 0x08
    3248:	89 85       	ldd	r24, Y+9	; 0x09
    324a:	9a 85       	ldd	r25, Y+10	; 0x0a
    324c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	8d 81       	ldd	r24, Y+5	; 0x05
    325a:	9e 81       	ldd	r25, Y+6	; 0x06
    325c:	9a 83       	std	Y+2, r25	; 0x02
    325e:	89 83       	std	Y+1, r24	; 0x01
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	9a 81       	ldd	r25, Y+2	; 0x02
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <GLCD_Init+0x10e>
    3268:	9a 83       	std	Y+2, r25	; 0x02
    326a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	GLCD_Command(0x3E); /* Display OFF */
    326c:	8e e3       	ldi	r24, 0x3E	; 62
    326e:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
	GLCD_Command(0x40); /* Set Y address (column=0) */
    3272:	80 e4       	ldi	r24, 0x40	; 64
    3274:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
	GLCD_Command(0xB8); /* Set x address (page=0) */
    3278:	88 eb       	ldi	r24, 0xB8	; 184
    327a:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
	GLCD_Command(0xC0); /* Set z address (start line=0) */
    327e:	80 ec       	ldi	r24, 0xC0	; 192
    3280:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
	GLCD_Command(0x3F); /* Display ON */
    3284:	8f e3       	ldi	r24, 0x3F	; 63
    3286:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
}
    328a:	2e 96       	adiw	r28, 0x0e	; 14
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	08 95       	ret

0000329c <GLCD_ClearAll>:

void GLCD_ClearAll() /* GLCD all display clear function */
{
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	00 d0       	rcall	.+0      	; 0x32a2 <GLCD_ClearAll+0x6>
    32a2:	00 d0       	rcall	.+0      	; 0x32a4 <GLCD_ClearAll+0x8>
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
	int i, j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
    32a8:	a5 e3       	ldi	r26, 0x35	; 53
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	e5 e3       	ldi	r30, 0x35	; 53
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	88 61       	ori	r24, 0x18	; 24
    32b4:	8c 93       	st	X, r24
	for (i = 0; i < TotalPage; i++) {
    32b6:	1c 82       	std	Y+4, r1	; 0x04
    32b8:	1b 82       	std	Y+3, r1	; 0x03
    32ba:	19 c0       	rjmp	.+50     	; 0x32ee <GLCD_ClearAll+0x52>
		GLCD_Command((0xB8) + i);/* Increment page */
    32bc:	8b 81       	ldd	r24, Y+3	; 0x03
    32be:	88 54       	subi	r24, 0x48	; 72
    32c0:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
		for (j = 0; j < 64; j++) {
    32c4:	1a 82       	std	Y+2, r1	; 0x02
    32c6:	19 82       	std	Y+1, r1	; 0x01
    32c8:	08 c0       	rjmp	.+16     	; 0x32da <GLCD_ClearAll+0x3e>
			GLCD_Data(0); /* Write zeros to all 64 column */
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <GLCD_Data>
	int i, j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for (i = 0; i < TotalPage; i++) {
		GLCD_Command((0xB8) + i);/* Increment page */
		for (j = 0; j < 64; j++) {
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	9a 81       	ldd	r25, Y+2	; 0x02
    32d4:	01 96       	adiw	r24, 0x01	; 1
    32d6:	9a 83       	std	Y+2, r25	; 0x02
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	9a 81       	ldd	r25, Y+2	; 0x02
    32de:	80 34       	cpi	r24, 0x40	; 64
    32e0:	91 05       	cpc	r25, r1
    32e2:	9c f3       	brlt	.-26     	; 0x32ca <GLCD_ClearAll+0x2e>
void GLCD_ClearAll() /* GLCD all display clear function */
{
	int i, j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for (i = 0; i < TotalPage; i++) {
    32e4:	8b 81       	ldd	r24, Y+3	; 0x03
    32e6:	9c 81       	ldd	r25, Y+4	; 0x04
    32e8:	01 96       	adiw	r24, 0x01	; 1
    32ea:	9c 83       	std	Y+4, r25	; 0x04
    32ec:	8b 83       	std	Y+3, r24	; 0x03
    32ee:	8b 81       	ldd	r24, Y+3	; 0x03
    32f0:	9c 81       	ldd	r25, Y+4	; 0x04
    32f2:	88 30       	cpi	r24, 0x08	; 8
    32f4:	91 05       	cpc	r25, r1
    32f6:	14 f3       	brlt	.-60     	; 0x32bc <GLCD_ClearAll+0x20>
		GLCD_Command((0xB8) + i);/* Increment page */
		for (j = 0; j < 64; j++) {
			GLCD_Data(0); /* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40); /* Set Y address (column=0) */
    32f8:	80 e4       	ldi	r24, 0x40	; 64
    32fa:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
	GLCD_Command(0xB8); /* Set x address (page=0) */
    32fe:	88 eb       	ldi	r24, 0xB8	; 184
    3300:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
}
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	08 95       	ret

00003312 <GLCD_String>:

void GLCD_String(char page_no, char *str)/* GLCD string write function */
{
    3312:	0f 93       	push	r16
    3314:	1f 93       	push	r17
    3316:	df 93       	push	r29
    3318:	cf 93       	push	r28
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	2f 97       	sbiw	r28, 0x0f	; 15
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	0f be       	out	0x3f, r0	; 63
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	8d 87       	std	Y+13, r24	; 0x0d
    332c:	7f 87       	std	Y+15, r23	; 0x0f
    332e:	6e 87       	std	Y+14, r22	; 0x0e
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
    3330:	8d 85       	ldd	r24, Y+13	; 0x0d
    3332:	88 2f       	mov	r24, r24
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	88 54       	subi	r24, 0x48	; 72
    3338:	9f 4f       	sbci	r25, 0xFF	; 255
    333a:	98 87       	std	Y+8, r25	; 0x08
    333c:	8f 83       	std	Y+7, r24	; 0x07
	unsigned int Y_address = 0;
    333e:	1e 82       	std	Y+6, r1	; 0x06
    3340:	1d 82       	std	Y+5, r1	; 0x05
	float Page_inc = 0.5;
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	a0 e0       	ldi	r26, 0x00	; 0
    3348:	bf e3       	ldi	r27, 0x3F	; 63
    334a:	89 83       	std	Y+1, r24	; 0x01
    334c:	9a 83       	std	Y+2, r25	; 0x02
    334e:	ab 83       	std	Y+3, r26	; 0x03
    3350:	bc 83       	std	Y+4, r27	; 0x04

	Command_Port |= (1 << CS1); /* Select Left half of display */
    3352:	a5 e3       	ldi	r26, 0x35	; 53
    3354:	b0 e0       	ldi	r27, 0x00	; 0
    3356:	e5 e3       	ldi	r30, 0x35	; 53
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	88 60       	ori	r24, 0x08	; 8
    335e:	8c 93       	st	X, r24
	Command_Port &= ~(1 << CS2);
    3360:	a5 e3       	ldi	r26, 0x35	; 53
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	e5 e3       	ldi	r30, 0x35	; 53
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	8f 7e       	andi	r24, 0xEF	; 239
    336c:	8c 93       	st	X, r24

	GLCD_Command(Page);
    336e:	8f 81       	ldd	r24, Y+7	; 0x07
    3370:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
	for (i = 0; str[i] != 0; i++) /* Print char in string till null */
    3374:	1c 86       	std	Y+12, r1	; 0x0c
    3376:	1b 86       	std	Y+11, r1	; 0x0b
    3378:	16 c2       	rjmp	.+1068   	; 0x37a6 <GLCD_String+0x494>
	{
		if (Y_address > (1024 - (((page_no) * 128) + FontWidth)))
    337a:	8d 85       	ldd	r24, Y+13	; 0x0d
    337c:	88 2f       	mov	r24, r24
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	96 95       	lsr	r25
    3382:	98 2f       	mov	r25, r24
    3384:	88 27       	eor	r24, r24
    3386:	97 95       	ror	r25
    3388:	87 95       	ror	r24
    338a:	90 95       	com	r25
    338c:	81 95       	neg	r24
    338e:	9f 4f       	sbci	r25, 0xFF	; 255
    3390:	85 50       	subi	r24, 0x05	; 5
    3392:	9c 4f       	sbci	r25, 0xFC	; 252
    3394:	9c 01       	movw	r18, r24
    3396:	8d 81       	ldd	r24, Y+5	; 0x05
    3398:	9e 81       	ldd	r25, Y+6	; 0x06
    339a:	28 17       	cp	r18, r24
    339c:	39 07       	cpc	r19, r25
    339e:	08 f4       	brcc	.+2      	; 0x33a2 <GLCD_String+0x90>
    33a0:	0d c2       	rjmp	.+1050   	; 0x37bc <GLCD_String+0x4aa>
			break;
		if (str[i] != 32) {
    33a2:	2e 85       	ldd	r18, Y+14	; 0x0e
    33a4:	3f 85       	ldd	r19, Y+15	; 0x0f
    33a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    33a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    33aa:	f9 01       	movw	r30, r18
    33ac:	e8 0f       	add	r30, r24
    33ae:	f9 1f       	adc	r31, r25
    33b0:	80 81       	ld	r24, Z
    33b2:	80 32       	cpi	r24, 0x20	; 32
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <GLCD_String+0xa6>
    33b6:	80 c0       	rjmp	.+256    	; 0x34b8 <GLCD_String+0x1a6>
			for (column = 1; column <= FontWidth; column++) {
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	9a 87       	std	Y+10, r25	; 0x0a
    33be:	89 87       	std	Y+9, r24	; 0x09
    33c0:	75 c0       	rjmp	.+234    	; 0x34ac <GLCD_String+0x19a>
				if ((Y_address + column) == (128 * ((int) (Page_inc + 0.5)))) {
    33c2:	2d 81       	ldd	r18, Y+5	; 0x05
    33c4:	3e 81       	ldd	r19, Y+6	; 0x06
    33c6:	89 85       	ldd	r24, Y+9	; 0x09
    33c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ca:	89 01       	movw	r16, r18
    33cc:	08 0f       	add	r16, r24
    33ce:	19 1f       	adc	r17, r25
    33d0:	69 81       	ldd	r22, Y+1	; 0x01
    33d2:	7a 81       	ldd	r23, Y+2	; 0x02
    33d4:	8b 81       	ldd	r24, Y+3	; 0x03
    33d6:	9c 81       	ldd	r25, Y+4	; 0x04
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e0       	ldi	r20, 0x00	; 0
    33de:	5f e3       	ldi	r21, 0x3F	; 63
    33e0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	bc 01       	movw	r22, r24
    33ea:	cd 01       	movw	r24, r26
    33ec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	96 95       	lsr	r25
    33f6:	98 2f       	mov	r25, r24
    33f8:	88 27       	eor	r24, r24
    33fa:	97 95       	ror	r25
    33fc:	87 95       	ror	r24
    33fe:	08 17       	cp	r16, r24
    3400:	19 07       	cpc	r17, r25
    3402:	09 f0       	breq	.+2      	; 0x3406 <GLCD_String+0xf4>
    3404:	4e c0       	rjmp	.+156    	; 0x34a2 <GLCD_String+0x190>
					if (column == FontWidth)
    3406:	89 85       	ldd	r24, Y+9	; 0x09
    3408:	9a 85       	ldd	r25, Y+10	; 0x0a
    340a:	85 30       	cpi	r24, 0x05	; 5
    340c:	91 05       	cpc	r25, r1
    340e:	09 f4       	brne	.+2      	; 0x3412 <GLCD_String+0x100>
    3410:	53 c0       	rjmp	.+166    	; 0x34b8 <GLCD_String+0x1a6>
						break;
					GLCD_Command(0x40);
    3412:	80 e4       	ldi	r24, 0x40	; 64
    3414:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
					Y_address = Y_address + column;
    3418:	2d 81       	ldd	r18, Y+5	; 0x05
    341a:	3e 81       	ldd	r19, Y+6	; 0x06
    341c:	89 85       	ldd	r24, Y+9	; 0x09
    341e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3420:	82 0f       	add	r24, r18
    3422:	93 1f       	adc	r25, r19
    3424:	9e 83       	std	Y+6, r25	; 0x06
    3426:	8d 83       	std	Y+5, r24	; 0x05
					Command_Port ^= (1 << CS1);
    3428:	a5 e3       	ldi	r26, 0x35	; 53
    342a:	b0 e0       	ldi	r27, 0x00	; 0
    342c:	e5 e3       	ldi	r30, 0x35	; 53
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	90 81       	ld	r25, Z
    3432:	88 e0       	ldi	r24, 0x08	; 8
    3434:	89 27       	eor	r24, r25
    3436:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    3438:	a5 e3       	ldi	r26, 0x35	; 53
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	e5 e3       	ldi	r30, 0x35	; 53
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	90 81       	ld	r25, Z
    3442:	80 e1       	ldi	r24, 0x10	; 16
    3444:	89 27       	eor	r24, r25
    3446:	8c 93       	st	X, r24
					GLCD_Command(Page + Page_inc);
    3448:	8f 81       	ldd	r24, Y+7	; 0x07
    344a:	98 85       	ldd	r25, Y+8	; 0x08
    344c:	cc 01       	movw	r24, r24
    344e:	a0 e0       	ldi	r26, 0x00	; 0
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	bc 01       	movw	r22, r24
    3454:	cd 01       	movw	r24, r26
    3456:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	bc 01       	movw	r22, r24
    3460:	cd 01       	movw	r24, r26
    3462:	29 81       	ldd	r18, Y+1	; 0x01
    3464:	3a 81       	ldd	r19, Y+2	; 0x02
    3466:	4b 81       	ldd	r20, Y+3	; 0x03
    3468:	5c 81       	ldd	r21, Y+4	; 0x04
    346a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	bc 01       	movw	r22, r24
    3474:	cd 01       	movw	r24, r26
    3476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    3482:	69 81       	ldd	r22, Y+1	; 0x01
    3484:	7a 81       	ldd	r23, Y+2	; 0x02
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	9c 81       	ldd	r25, Y+4	; 0x04
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	40 e0       	ldi	r20, 0x00	; 0
    3490:	5f e3       	ldi	r21, 0x3F	; 63
    3492:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	89 83       	std	Y+1, r24	; 0x01
    349c:	9a 83       	std	Y+2, r25	; 0x02
    349e:	ab 83       	std	Y+3, r26	; 0x03
    34a0:	bc 83       	std	Y+4, r27	; 0x04
	for (i = 0; str[i] != 0; i++) /* Print char in string till null */
	{
		if (Y_address > (1024 - (((page_no) * 128) + FontWidth)))
			break;
		if (str[i] != 32) {
			for (column = 1; column <= FontWidth; column++) {
    34a2:	89 85       	ldd	r24, Y+9	; 0x09
    34a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a6:	01 96       	adiw	r24, 0x01	; 1
    34a8:	9a 87       	std	Y+10, r25	; 0x0a
    34aa:	89 87       	std	Y+9, r24	; 0x09
    34ac:	89 85       	ldd	r24, Y+9	; 0x09
    34ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b0:	86 30       	cpi	r24, 0x06	; 6
    34b2:	91 05       	cpc	r25, r1
    34b4:	08 f4       	brcc	.+2      	; 0x34b8 <GLCD_String+0x1a6>
    34b6:	85 cf       	rjmp	.-246    	; 0x33c2 <GLCD_String+0xb0>
					GLCD_Command(Page + Page_inc);
					Page_inc = Page_inc + 0.5;
				}
			}
		}
		if (Y_address > (1024 - (((page_no) * 128) + FontWidth)))
    34b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ba:	88 2f       	mov	r24, r24
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	96 95       	lsr	r25
    34c0:	98 2f       	mov	r25, r24
    34c2:	88 27       	eor	r24, r24
    34c4:	97 95       	ror	r25
    34c6:	87 95       	ror	r24
    34c8:	90 95       	com	r25
    34ca:	81 95       	neg	r24
    34cc:	9f 4f       	sbci	r25, 0xFF	; 255
    34ce:	85 50       	subi	r24, 0x05	; 5
    34d0:	9c 4f       	sbci	r25, 0xFC	; 252
    34d2:	9c 01       	movw	r18, r24
    34d4:	8d 81       	ldd	r24, Y+5	; 0x05
    34d6:	9e 81       	ldd	r25, Y+6	; 0x06
    34d8:	28 17       	cp	r18, r24
    34da:	39 07       	cpc	r19, r25
    34dc:	08 f4       	brcc	.+2      	; 0x34e0 <GLCD_String+0x1ce>
    34de:	6e c1       	rjmp	.+732    	; 0x37bc <GLCD_String+0x4aa>
			break;
		if ((font[((str[i] - 32) * FontWidth) + 4]) == 0 || str[i] == 32) {
    34e0:	2e 85       	ldd	r18, Y+14	; 0x0e
    34e2:	3f 85       	ldd	r19, Y+15	; 0x0f
    34e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    34e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    34e8:	f9 01       	movw	r30, r18
    34ea:	e8 0f       	add	r30, r24
    34ec:	f9 1f       	adc	r31, r25
    34ee:	80 81       	ld	r24, Z
    34f0:	28 2f       	mov	r18, r24
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	c9 01       	movw	r24, r18
    34f6:	88 0f       	add	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	82 0f       	add	r24, r18
    34fc:	93 1f       	adc	r25, r19
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	88 0f       	add	r24, r24
    3504:	99 1f       	adc	r25, r25
    3506:	88 0f       	add	r24, r24
    3508:	99 1f       	adc	r25, r25
    350a:	82 0f       	add	r24, r18
    350c:	93 1f       	adc	r25, r19
    350e:	8c 50       	subi	r24, 0x0C	; 12
    3510:	93 40       	sbci	r25, 0x03	; 3
    3512:	84 55       	subi	r24, 0x54	; 84
    3514:	9e 4f       	sbci	r25, 0xFE	; 254
    3516:	00 97       	sbiw	r24, 0x00	; 0
    3518:	59 f0       	breq	.+22     	; 0x3530 <GLCD_String+0x21e>
    351a:	2e 85       	ldd	r18, Y+14	; 0x0e
    351c:	3f 85       	ldd	r19, Y+15	; 0x0f
    351e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3520:	9c 85       	ldd	r25, Y+12	; 0x0c
    3522:	f9 01       	movw	r30, r18
    3524:	e8 0f       	add	r30, r24
    3526:	f9 1f       	adc	r31, r25
    3528:	80 81       	ld	r24, Z
    352a:	80 32       	cpi	r24, 0x20	; 32
    352c:	09 f0       	breq	.+2      	; 0x3530 <GLCD_String+0x21e>
    352e:	76 c0       	rjmp	.+236    	; 0x361c <GLCD_String+0x30a>
			for (column = 0; column < FontWidth; column++) {
    3530:	1a 86       	std	Y+10, r1	; 0x0a
    3532:	19 86       	std	Y+9, r1	; 0x09
    3534:	6c c0       	rjmp	.+216    	; 0x360e <GLCD_String+0x2fc>
				GLCD_Data(font[str[i] - 32][column]);
    3536:	2e 85       	ldd	r18, Y+14	; 0x0e
    3538:	3f 85       	ldd	r19, Y+15	; 0x0f
    353a:	8b 85       	ldd	r24, Y+11	; 0x0b
    353c:	9c 85       	ldd	r25, Y+12	; 0x0c
    353e:	f9 01       	movw	r30, r18
    3540:	e8 0f       	add	r30, r24
    3542:	f9 1f       	adc	r31, r25
    3544:	80 81       	ld	r24, Z
    3546:	88 2f       	mov	r24, r24
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	9c 01       	movw	r18, r24
    354c:	20 52       	subi	r18, 0x20	; 32
    354e:	30 40       	sbci	r19, 0x00	; 0
    3550:	49 85       	ldd	r20, Y+9	; 0x09
    3552:	5a 85       	ldd	r21, Y+10	; 0x0a
    3554:	c9 01       	movw	r24, r18
    3556:	88 0f       	add	r24, r24
    3558:	99 1f       	adc	r25, r25
    355a:	88 0f       	add	r24, r24
    355c:	99 1f       	adc	r25, r25
    355e:	82 0f       	add	r24, r18
    3560:	93 1f       	adc	r25, r19
    3562:	84 0f       	add	r24, r20
    3564:	95 1f       	adc	r25, r21
    3566:	fc 01       	movw	r30, r24
    3568:	e4 55       	subi	r30, 0x54	; 84
    356a:	fe 4f       	sbci	r31, 0xFE	; 254
    356c:	80 81       	ld	r24, Z
    356e:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <GLCD_Data>
				if ((Y_address + 1) % 64 == 0) {
    3572:	8d 81       	ldd	r24, Y+5	; 0x05
    3574:	9e 81       	ldd	r25, Y+6	; 0x06
    3576:	01 96       	adiw	r24, 0x01	; 1
    3578:	8f 73       	andi	r24, 0x3F	; 63
    357a:	90 70       	andi	r25, 0x00	; 0
    357c:	00 97       	sbiw	r24, 0x00	; 0
    357e:	e9 f5       	brne	.+122    	; 0x35fa <GLCD_String+0x2e8>
					Command_Port ^= (1 << CS1);
    3580:	a5 e3       	ldi	r26, 0x35	; 53
    3582:	b0 e0       	ldi	r27, 0x00	; 0
    3584:	e5 e3       	ldi	r30, 0x35	; 53
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	90 81       	ld	r25, Z
    358a:	88 e0       	ldi	r24, 0x08	; 8
    358c:	89 27       	eor	r24, r25
    358e:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    3590:	a5 e3       	ldi	r26, 0x35	; 53
    3592:	b0 e0       	ldi	r27, 0x00	; 0
    3594:	e5 e3       	ldi	r30, 0x35	; 53
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	90 81       	ld	r25, Z
    359a:	80 e1       	ldi	r24, 0x10	; 16
    359c:	89 27       	eor	r24, r25
    359e:	8c 93       	st	X, r24
					GLCD_Command((Page + Page_inc));
    35a0:	8f 81       	ldd	r24, Y+7	; 0x07
    35a2:	98 85       	ldd	r25, Y+8	; 0x08
    35a4:	cc 01       	movw	r24, r24
    35a6:	a0 e0       	ldi	r26, 0x00	; 0
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	bc 01       	movw	r22, r24
    35ac:	cd 01       	movw	r24, r26
    35ae:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	bc 01       	movw	r22, r24
    35b8:	cd 01       	movw	r24, r26
    35ba:	29 81       	ldd	r18, Y+1	; 0x01
    35bc:	3a 81       	ldd	r19, Y+2	; 0x02
    35be:	4b 81       	ldd	r20, Y+3	; 0x03
    35c0:	5c 81       	ldd	r21, Y+4	; 0x04
    35c2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	bc 01       	movw	r22, r24
    35cc:	cd 01       	movw	r24, r26
    35ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    35da:	69 81       	ldd	r22, Y+1	; 0x01
    35dc:	7a 81       	ldd	r23, Y+2	; 0x02
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	9c 81       	ldd	r25, Y+4	; 0x04
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 e0       	ldi	r20, 0x00	; 0
    35e8:	5f e3       	ldi	r21, 0x3F	; 63
    35ea:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	89 83       	std	Y+1, r24	; 0x01
    35f4:	9a 83       	std	Y+2, r25	; 0x02
    35f6:	ab 83       	std	Y+3, r26	; 0x03
    35f8:	bc 83       	std	Y+4, r27	; 0x04
				}
				Y_address++;
    35fa:	8d 81       	ldd	r24, Y+5	; 0x05
    35fc:	9e 81       	ldd	r25, Y+6	; 0x06
    35fe:	01 96       	adiw	r24, 0x01	; 1
    3600:	9e 83       	std	Y+6, r25	; 0x06
    3602:	8d 83       	std	Y+5, r24	; 0x05
			}
		}
		if (Y_address > (1024 - (((page_no) * 128) + FontWidth)))
			break;
		if ((font[((str[i] - 32) * FontWidth) + 4]) == 0 || str[i] == 32) {
			for (column = 0; column < FontWidth; column++) {
    3604:	89 85       	ldd	r24, Y+9	; 0x09
    3606:	9a 85       	ldd	r25, Y+10	; 0x0a
    3608:	01 96       	adiw	r24, 0x01	; 1
    360a:	9a 87       	std	Y+10, r25	; 0x0a
    360c:	89 87       	std	Y+9, r24	; 0x09
    360e:	89 85       	ldd	r24, Y+9	; 0x09
    3610:	9a 85       	ldd	r25, Y+10	; 0x0a
    3612:	85 30       	cpi	r24, 0x05	; 5
    3614:	91 05       	cpc	r25, r1
    3616:	08 f4       	brcc	.+2      	; 0x361a <GLCD_String+0x308>
    3618:	8e cf       	rjmp	.-228    	; 0x3536 <GLCD_String+0x224>
    361a:	c0 c0       	rjmp	.+384    	; 0x379c <GLCD_String+0x48a>
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
		} else {
			for (column = 0; column < FontWidth; column++) {
    361c:	1a 86       	std	Y+10, r1	; 0x0a
    361e:	19 86       	std	Y+9, r1	; 0x09
    3620:	6c c0       	rjmp	.+216    	; 0x36fa <GLCD_String+0x3e8>
				GLCD_Data(font[str[i] - 32][column]);
    3622:	2e 85       	ldd	r18, Y+14	; 0x0e
    3624:	3f 85       	ldd	r19, Y+15	; 0x0f
    3626:	8b 85       	ldd	r24, Y+11	; 0x0b
    3628:	9c 85       	ldd	r25, Y+12	; 0x0c
    362a:	f9 01       	movw	r30, r18
    362c:	e8 0f       	add	r30, r24
    362e:	f9 1f       	adc	r31, r25
    3630:	80 81       	ld	r24, Z
    3632:	88 2f       	mov	r24, r24
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	9c 01       	movw	r18, r24
    3638:	20 52       	subi	r18, 0x20	; 32
    363a:	30 40       	sbci	r19, 0x00	; 0
    363c:	49 85       	ldd	r20, Y+9	; 0x09
    363e:	5a 85       	ldd	r21, Y+10	; 0x0a
    3640:	c9 01       	movw	r24, r18
    3642:	88 0f       	add	r24, r24
    3644:	99 1f       	adc	r25, r25
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	82 0f       	add	r24, r18
    364c:	93 1f       	adc	r25, r19
    364e:	84 0f       	add	r24, r20
    3650:	95 1f       	adc	r25, r21
    3652:	fc 01       	movw	r30, r24
    3654:	e4 55       	subi	r30, 0x54	; 84
    3656:	fe 4f       	sbci	r31, 0xFE	; 254
    3658:	80 81       	ld	r24, Z
    365a:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <GLCD_Data>
				if ((Y_address + 1) % 64 == 0) {
    365e:	8d 81       	ldd	r24, Y+5	; 0x05
    3660:	9e 81       	ldd	r25, Y+6	; 0x06
    3662:	01 96       	adiw	r24, 0x01	; 1
    3664:	8f 73       	andi	r24, 0x3F	; 63
    3666:	90 70       	andi	r25, 0x00	; 0
    3668:	00 97       	sbiw	r24, 0x00	; 0
    366a:	e9 f5       	brne	.+122    	; 0x36e6 <GLCD_String+0x3d4>
					Command_Port ^= (1 << CS1);
    366c:	a5 e3       	ldi	r26, 0x35	; 53
    366e:	b0 e0       	ldi	r27, 0x00	; 0
    3670:	e5 e3       	ldi	r30, 0x35	; 53
    3672:	f0 e0       	ldi	r31, 0x00	; 0
    3674:	90 81       	ld	r25, Z
    3676:	88 e0       	ldi	r24, 0x08	; 8
    3678:	89 27       	eor	r24, r25
    367a:	8c 93       	st	X, r24
					Command_Port ^= (1 << CS2);
    367c:	a5 e3       	ldi	r26, 0x35	; 53
    367e:	b0 e0       	ldi	r27, 0x00	; 0
    3680:	e5 e3       	ldi	r30, 0x35	; 53
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	90 81       	ld	r25, Z
    3686:	80 e1       	ldi	r24, 0x10	; 16
    3688:	89 27       	eor	r24, r25
    368a:	8c 93       	st	X, r24
					GLCD_Command((Page + Page_inc));
    368c:	8f 81       	ldd	r24, Y+7	; 0x07
    368e:	98 85       	ldd	r25, Y+8	; 0x08
    3690:	cc 01       	movw	r24, r24
    3692:	a0 e0       	ldi	r26, 0x00	; 0
    3694:	b0 e0       	ldi	r27, 0x00	; 0
    3696:	bc 01       	movw	r22, r24
    3698:	cd 01       	movw	r24, r26
    369a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    369e:	dc 01       	movw	r26, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	bc 01       	movw	r22, r24
    36a4:	cd 01       	movw	r24, r26
    36a6:	29 81       	ldd	r18, Y+1	; 0x01
    36a8:	3a 81       	ldd	r19, Y+2	; 0x02
    36aa:	4b 81       	ldd	r20, Y+3	; 0x03
    36ac:	5c 81       	ldd	r21, Y+4	; 0x04
    36ae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	bc 01       	movw	r22, r24
    36b8:	cd 01       	movw	r24, r26
    36ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
    36c6:	69 81       	ldd	r22, Y+1	; 0x01
    36c8:	7a 81       	ldd	r23, Y+2	; 0x02
    36ca:	8b 81       	ldd	r24, Y+3	; 0x03
    36cc:	9c 81       	ldd	r25, Y+4	; 0x04
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e0       	ldi	r20, 0x00	; 0
    36d4:	5f e3       	ldi	r21, 0x3F	; 63
    36d6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	89 83       	std	Y+1, r24	; 0x01
    36e0:	9a 83       	std	Y+2, r25	; 0x02
    36e2:	ab 83       	std	Y+3, r26	; 0x03
    36e4:	bc 83       	std	Y+4, r27	; 0x04
				}
				Y_address++;
    36e6:	8d 81       	ldd	r24, Y+5	; 0x05
    36e8:	9e 81       	ldd	r25, Y+6	; 0x06
    36ea:	01 96       	adiw	r24, 0x01	; 1
    36ec:	9e 83       	std	Y+6, r25	; 0x06
    36ee:	8d 83       	std	Y+5, r24	; 0x05
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
		} else {
			for (column = 0; column < FontWidth; column++) {
    36f0:	89 85       	ldd	r24, Y+9	; 0x09
    36f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f4:	01 96       	adiw	r24, 0x01	; 1
    36f6:	9a 87       	std	Y+10, r25	; 0x0a
    36f8:	89 87       	std	Y+9, r24	; 0x09
    36fa:	89 85       	ldd	r24, Y+9	; 0x09
    36fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36fe:	85 30       	cpi	r24, 0x05	; 5
    3700:	91 05       	cpc	r25, r1
    3702:	08 f4       	brcc	.+2      	; 0x3706 <GLCD_String+0x3f4>
    3704:	8e cf       	rjmp	.-228    	; 0x3622 <GLCD_String+0x310>
					GLCD_Command((Page + Page_inc));
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
			GLCD_Data(0);
    3706:	80 e0       	ldi	r24, 0x00	; 0
    3708:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <GLCD_Data>
			Y_address++;
    370c:	8d 81       	ldd	r24, Y+5	; 0x05
    370e:	9e 81       	ldd	r25, Y+6	; 0x06
    3710:	01 96       	adiw	r24, 0x01	; 1
    3712:	9e 83       	std	Y+6, r25	; 0x06
    3714:	8d 83       	std	Y+5, r24	; 0x05
			if ((Y_address) % 64 == 0) {
    3716:	8d 81       	ldd	r24, Y+5	; 0x05
    3718:	9e 81       	ldd	r25, Y+6	; 0x06
    371a:	8f 73       	andi	r24, 0x3F	; 63
    371c:	90 70       	andi	r25, 0x00	; 0
    371e:	00 97       	sbiw	r24, 0x00	; 0
    3720:	e9 f5       	brne	.+122    	; 0x379c <GLCD_String+0x48a>
				Command_Port ^= (1 << CS1);
    3722:	a5 e3       	ldi	r26, 0x35	; 53
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	e5 e3       	ldi	r30, 0x35	; 53
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	90 81       	ld	r25, Z
    372c:	88 e0       	ldi	r24, 0x08	; 8
    372e:	89 27       	eor	r24, r25
    3730:	8c 93       	st	X, r24
				Command_Port ^= (1 << CS2);
    3732:	a5 e3       	ldi	r26, 0x35	; 53
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	e5 e3       	ldi	r30, 0x35	; 53
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	90 81       	ld	r25, Z
    373c:	80 e1       	ldi	r24, 0x10	; 16
    373e:	89 27       	eor	r24, r25
    3740:	8c 93       	st	X, r24
				GLCD_Command((Page + Page_inc));
    3742:	8f 81       	ldd	r24, Y+7	; 0x07
    3744:	98 85       	ldd	r25, Y+8	; 0x08
    3746:	cc 01       	movw	r24, r24
    3748:	a0 e0       	ldi	r26, 0x00	; 0
    374a:	b0 e0       	ldi	r27, 0x00	; 0
    374c:	bc 01       	movw	r22, r24
    374e:	cd 01       	movw	r24, r26
    3750:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	bc 01       	movw	r22, r24
    375a:	cd 01       	movw	r24, r26
    375c:	29 81       	ldd	r18, Y+1	; 0x01
    375e:	3a 81       	ldd	r19, Y+2	; 0x02
    3760:	4b 81       	ldd	r20, Y+3	; 0x03
    3762:	5c 81       	ldd	r21, Y+4	; 0x04
    3764:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
				Page_inc = Page_inc + 0.5;
    377c:	69 81       	ldd	r22, Y+1	; 0x01
    377e:	7a 81       	ldd	r23, Y+2	; 0x02
    3780:	8b 81       	ldd	r24, Y+3	; 0x03
    3782:	9c 81       	ldd	r25, Y+4	; 0x04
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e0       	ldi	r20, 0x00	; 0
    378a:	5f e3       	ldi	r21, 0x3F	; 63
    378c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	89 83       	std	Y+1, r24	; 0x01
    3796:	9a 83       	std	Y+2, r25	; 0x02
    3798:	ab 83       	std	Y+3, r26	; 0x03
    379a:	bc 83       	std	Y+4, r27	; 0x04

	Command_Port |= (1 << CS1); /* Select Left half of display */
	Command_Port &= ~(1 << CS2);

	GLCD_Command(Page);
	for (i = 0; str[i] != 0; i++) /* Print char in string till null */
    379c:	8b 85       	ldd	r24, Y+11	; 0x0b
    379e:	9c 85       	ldd	r25, Y+12	; 0x0c
    37a0:	01 96       	adiw	r24, 0x01	; 1
    37a2:	9c 87       	std	Y+12, r25	; 0x0c
    37a4:	8b 87       	std	Y+11, r24	; 0x0b
    37a6:	2e 85       	ldd	r18, Y+14	; 0x0e
    37a8:	3f 85       	ldd	r19, Y+15	; 0x0f
    37aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    37ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    37ae:	f9 01       	movw	r30, r18
    37b0:	e8 0f       	add	r30, r24
    37b2:	f9 1f       	adc	r31, r25
    37b4:	80 81       	ld	r24, Z
    37b6:	88 23       	and	r24, r24
    37b8:	09 f0       	breq	.+2      	; 0x37bc <GLCD_String+0x4aa>
    37ba:	df cd       	rjmp	.-1090   	; 0x337a <GLCD_String+0x68>
				GLCD_Command((Page + Page_inc));
				Page_inc = Page_inc + 0.5;
			}
		}
	}
	GLCD_Command(0x40); /* Set Y address (column=0) */
    37bc:	80 e4       	ldi	r24, 0x40	; 64
    37be:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <GLCD_Command>
}
    37c2:	2f 96       	adiw	r28, 0x0f	; 15
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	de bf       	out	0x3e, r29	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	cd bf       	out	0x3d, r28	; 61
    37ce:	cf 91       	pop	r28
    37d0:	df 91       	pop	r29
    37d2:	1f 91       	pop	r17
    37d4:	0f 91       	pop	r16
    37d6:	08 95       	ret

000037d8 <main>:
#include <stdlib.h>

unsigned int first_rise, first_fall, second_rise, high, period;
char frequency[14] = { ' ' }, duty[7] = { ' ' };

int main() {
    37d8:	ef 92       	push	r14
    37da:	ff 92       	push	r15
    37dc:	0f 93       	push	r16
    37de:	1f 93       	push	r17
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	cd b7       	in	r28, 0x3d	; 61
    37e6:	de b7       	in	r29, 0x3e	; 62
    37e8:	6c 97       	sbiw	r28, 0x1c	; 28
    37ea:	0f b6       	in	r0, 0x3f	; 63
    37ec:	f8 94       	cli
    37ee:	de bf       	out	0x3e, r29	; 62
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	cd bf       	out	0x3d, r28	; 61
	dio_init();
    37f4:	0e 94 35 0a 	call	0x146a	; 0x146a <dio_init>
	lcd_init();
    37f8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <lcd_init>
	lcd_send_str("Freq=");
    37fc:	80 e6       	ldi	r24, 0x60	; 96
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <lcd_send_str>
	lcd_send_cmd(0xC0);
    3804:	80 ec       	ldi	r24, 0xC0	; 192
    3806:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_send_cmd>
	//move cursor to start from 2nd line
	lcd_send_str("Duty=");
    380a:	86 e6       	ldi	r24, 0x66	; 102
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <lcd_send_str>

	while (1) {
		TCCR1A = 0;
    3812:	ef e4       	ldi	r30, 0x4F	; 79
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	10 82       	st	Z, r1
		TCNT1 = 0;
    3818:	ec e4       	ldi	r30, 0x4C	; 76
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	11 82       	std	Z+1, r1	; 0x01
    381e:	10 82       	st	Z, r1
		TIFR = (1 << ICF1); // clear ICP flag (Input Capture flag)
    3820:	e8 e5       	ldi	r30, 0x58	; 88
    3822:	f0 e0       	ldi	r31, 0x00	; 0
    3824:	80 e2       	ldi	r24, 0x20	; 32
    3826:	80 83       	st	Z, r24

		TCCR1B = 0x41; // rising edge, No prescaler
    3828:	ee e4       	ldi	r30, 0x4E	; 78
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	81 e4       	ldi	r24, 0x41	; 65
    382e:	80 83       	st	Z, r24
		while ((TIFR & (1 << ICF1)) == 0);
    3830:	e8 e5       	ldi	r30, 0x58	; 88
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	80 81       	ld	r24, Z
    3836:	88 2f       	mov	r24, r24
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	80 72       	andi	r24, 0x20	; 32
    383c:	90 70       	andi	r25, 0x00	; 0
    383e:	00 97       	sbiw	r24, 0x00	; 0
    3840:	b9 f3       	breq	.-18     	; 0x3830 <main+0x58>

		first_rise = ICR1; // take value of capture register
    3842:	e6 e4       	ldi	r30, 0x46	; 70
    3844:	f0 e0       	ldi	r31, 0x00	; 0
    3846:	80 81       	ld	r24, Z
    3848:	91 81       	ldd	r25, Z+1	; 0x01
    384a:	90 93 ad 03 	sts	0x03AD, r25
    384e:	80 93 ac 03 	sts	0x03AC, r24
		TIFR = (1 << ICF1); // clear ICP flag (Input Capture flag)
    3852:	e8 e5       	ldi	r30, 0x58	; 88
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	80 e2       	ldi	r24, 0x20	; 32
    3858:	80 83       	st	Z, r24

		TCCR1B = 0x01; // falling edge, No prescaler
    385a:	ee e4       	ldi	r30, 0x4E	; 78
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	80 83       	st	Z, r24
		while ((TIFR & (1 << ICF1)) == 0)
    3862:	e8 e5       	ldi	r30, 0x58	; 88
    3864:	f0 e0       	ldi	r31, 0x00	; 0
    3866:	80 81       	ld	r24, Z
    3868:	88 2f       	mov	r24, r24
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	80 72       	andi	r24, 0x20	; 32
    386e:	90 70       	andi	r25, 0x00	; 0
    3870:	00 97       	sbiw	r24, 0x00	; 0
    3872:	b9 f3       	breq	.-18     	; 0x3862 <main+0x8a>
			;
		first_fall = ICR1; // take value of capture register
    3874:	e6 e4       	ldi	r30, 0x46	; 70
    3876:	f0 e0       	ldi	r31, 0x00	; 0
    3878:	80 81       	ld	r24, Z
    387a:	91 81       	ldd	r25, Z+1	; 0x01
    387c:	90 93 ab 03 	sts	0x03AB, r25
    3880:	80 93 aa 03 	sts	0x03AA, r24
		TIFR = (1 << ICF1); // clear ICP flag (Input Capture flag)
    3884:	e8 e5       	ldi	r30, 0x58	; 88
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 e2       	ldi	r24, 0x20	; 32
    388a:	80 83       	st	Z, r24

		TCCR1B = 0x41; // rising edge, No prescaler
    388c:	ee e4       	ldi	r30, 0x4E	; 78
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	81 e4       	ldi	r24, 0x41	; 65
    3892:	80 83       	st	Z, r24
		while ((TIFR & (1 << ICF1)) == 0)
    3894:	e8 e5       	ldi	r30, 0x58	; 88
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	80 81       	ld	r24, Z
    389a:	88 2f       	mov	r24, r24
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	80 72       	andi	r24, 0x20	; 32
    38a0:	90 70       	andi	r25, 0x00	; 0
    38a2:	00 97       	sbiw	r24, 0x00	; 0
    38a4:	b9 f3       	breq	.-18     	; 0x3894 <main+0xbc>
			;
		second_rise = ICR1; // take value of capture register
    38a6:	e6 e4       	ldi	r30, 0x46	; 70
    38a8:	f0 e0       	ldi	r31, 0x00	; 0
    38aa:	80 81       	ld	r24, Z
    38ac:	91 81       	ldd	r25, Z+1	; 0x01
    38ae:	90 93 a5 03 	sts	0x03A5, r25
    38b2:	80 93 a4 03 	sts	0x03A4, r24
		TIFR = (1 << ICF1); // clear ICP flag (Input Capture flag)
    38b6:	e8 e5       	ldi	r30, 0x58	; 88
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	80 e2       	ldi	r24, 0x20	; 32
    38bc:	80 83       	st	Z, r24

		TCCR1B = 0; // stop the timer
    38be:	ee e4       	ldi	r30, 0x4E	; 78
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	10 82       	st	Z, r1

		if (first_rise < first_fall && first_fall < second_rise) {
    38c4:	20 91 ac 03 	lds	r18, 0x03AC
    38c8:	30 91 ad 03 	lds	r19, 0x03AD
    38cc:	80 91 aa 03 	lds	r24, 0x03AA
    38d0:	90 91 ab 03 	lds	r25, 0x03AB
    38d4:	28 17       	cp	r18, r24
    38d6:	39 07       	cpc	r19, r25
    38d8:	58 f5       	brcc	.+86     	; 0x3930 <main+0x158>
    38da:	20 91 aa 03 	lds	r18, 0x03AA
    38de:	30 91 ab 03 	lds	r19, 0x03AB
    38e2:	80 91 a4 03 	lds	r24, 0x03A4
    38e6:	90 91 a5 03 	lds	r25, 0x03A5
    38ea:	28 17       	cp	r18, r24
    38ec:	39 07       	cpc	r19, r25
    38ee:	00 f5       	brcc	.+64     	; 0x3930 <main+0x158>
			high = first_fall - first_rise;
    38f0:	20 91 aa 03 	lds	r18, 0x03AA
    38f4:	30 91 ab 03 	lds	r19, 0x03AB
    38f8:	80 91 ac 03 	lds	r24, 0x03AC
    38fc:	90 91 ad 03 	lds	r25, 0x03AD
    3900:	a9 01       	movw	r20, r18
    3902:	48 1b       	sub	r20, r24
    3904:	59 0b       	sbc	r21, r25
    3906:	ca 01       	movw	r24, r20
    3908:	90 93 a7 03 	sts	0x03A7, r25
    390c:	80 93 a6 03 	sts	0x03A6, r24
			period = second_rise - first_rise;
    3910:	20 91 a4 03 	lds	r18, 0x03A4
    3914:	30 91 a5 03 	lds	r19, 0x03A5
    3918:	80 91 ac 03 	lds	r24, 0x03AC
    391c:	90 91 ad 03 	lds	r25, 0x03AD
    3920:	a9 01       	movw	r20, r18
    3922:	48 1b       	sub	r20, r24
    3924:	59 0b       	sbc	r21, r25
    3926:	ca 01       	movw	r24, r20
    3928:	90 93 a9 03 	sts	0x03A9, r25
    392c:	80 93 a8 03 	sts	0x03A8, r24
		}
			long freq = 16000000 / period;
    3930:	80 91 a8 03 	lds	r24, 0x03A8
    3934:	90 91 a9 03 	lds	r25, 0x03A9
    3938:	9c 01       	movw	r18, r24
    393a:	40 e0       	ldi	r20, 0x00	; 0
    393c:	50 e0       	ldi	r21, 0x00	; 0
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	94 e2       	ldi	r25, 0x24	; 36
    3942:	a4 ef       	ldi	r26, 0xF4	; 244
    3944:	b0 e0       	ldi	r27, 0x00	; 0
    3946:	bc 01       	movw	r22, r24
    3948:	cd 01       	movw	r24, r26
    394a:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__divmodsi4>
    394e:	da 01       	movw	r26, r20
    3950:	c9 01       	movw	r24, r18
    3952:	89 8f       	std	Y+25, r24	; 0x19
    3954:	9a 8f       	std	Y+26, r25	; 0x1a
    3956:	ab 8f       	std	Y+27, r26	; 0x1b
    3958:	bc 8f       	std	Y+28, r27	; 0x1c
			int duty_cycle = ((float) high / (float) period) * 100;
    395a:	80 91 a6 03 	lds	r24, 0x03A6
    395e:	90 91 a7 03 	lds	r25, 0x03A7
    3962:	cc 01       	movw	r24, r24
    3964:	a0 e0       	ldi	r26, 0x00	; 0
    3966:	b0 e0       	ldi	r27, 0x00	; 0
    3968:	bc 01       	movw	r22, r24
    396a:	cd 01       	movw	r24, r26
    396c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3970:	7b 01       	movw	r14, r22
    3972:	8c 01       	movw	r16, r24
    3974:	80 91 a8 03 	lds	r24, 0x03A8
    3978:	90 91 a9 03 	lds	r25, 0x03A9
    397c:	cc 01       	movw	r24, r24
    397e:	a0 e0       	ldi	r26, 0x00	; 0
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	bc 01       	movw	r22, r24
    3984:	cd 01       	movw	r24, r26
    3986:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    398a:	9b 01       	movw	r18, r22
    398c:	ac 01       	movw	r20, r24
    398e:	c8 01       	movw	r24, r16
    3990:	b7 01       	movw	r22, r14
    3992:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	bc 01       	movw	r22, r24
    399c:	cd 01       	movw	r24, r26
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	48 ec       	ldi	r20, 0xC8	; 200
    39a4:	52 e4       	ldi	r21, 0x42	; 66
    39a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	bc 01       	movw	r22, r24
    39b0:	cd 01       	movw	r24, r26
    39b2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	98 8f       	std	Y+24, r25	; 0x18
    39bc:	8f 8b       	std	Y+23, r24	; 0x17

			for (int i = 0; i < 12; i++) {
    39be:	1e 8a       	std	Y+22, r1	; 0x16
    39c0:	1d 8a       	std	Y+21, r1	; 0x15
    39c2:	0c c0       	rjmp	.+24     	; 0x39dc <main+0x204>
				frequency[i] = ' ';
    39c4:	8d 89       	ldd	r24, Y+21	; 0x15
    39c6:	9e 89       	ldd	r25, Y+22	; 0x16
    39c8:	fc 01       	movw	r30, r24
    39ca:	e4 57       	subi	r30, 0x74	; 116
    39cc:	fc 4f       	sbci	r31, 0xFC	; 252
    39ce:	80 e2       	ldi	r24, 0x20	; 32
    39d0:	80 83       	st	Z, r24
			period = second_rise - first_rise;
		}
			long freq = 16000000 / period;
			int duty_cycle = ((float) high / (float) period) * 100;

			for (int i = 0; i < 12; i++) {
    39d2:	8d 89       	ldd	r24, Y+21	; 0x15
    39d4:	9e 89       	ldd	r25, Y+22	; 0x16
    39d6:	01 96       	adiw	r24, 0x01	; 1
    39d8:	9e 8b       	std	Y+22, r25	; 0x16
    39da:	8d 8b       	std	Y+21, r24	; 0x15
    39dc:	8d 89       	ldd	r24, Y+21	; 0x15
    39de:	9e 89       	ldd	r25, Y+22	; 0x16
    39e0:	8c 30       	cpi	r24, 0x0C	; 12
    39e2:	91 05       	cpc	r25, r1
    39e4:	7c f3       	brlt	.-34     	; 0x39c4 <main+0x1ec>
				frequency[i] = ' ';
			}
			Cursor_pos(0, 5);
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	65 e0       	ldi	r22, 0x05	; 5
    39ea:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Cursor_pos>
			itoa(freq, frequency, 10); //frequency conversion
    39ee:	89 8d       	ldd	r24, Y+25	; 0x19
    39f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39f2:	2c e8       	ldi	r18, 0x8C	; 140
    39f4:	33 e0       	ldi	r19, 0x03	; 3
    39f6:	b9 01       	movw	r22, r18
    39f8:	4a e0       	ldi	r20, 0x0A	; 10
    39fa:	50 e0       	ldi	r21, 0x00	; 0
    39fc:	0e 94 17 07 	call	0xe2e	; 0xe2e <itoa>
			for (int i = 0; i < 14; i++) {
    3a00:	1c 8a       	std	Y+20, r1	; 0x14
    3a02:	1b 8a       	std	Y+19, r1	; 0x13
    3a04:	21 c0       	rjmp	.+66     	; 0x3a48 <main+0x270>
				if (frequency[i] < '0' || frequency[i] > '9')
    3a06:	8b 89       	ldd	r24, Y+19	; 0x13
    3a08:	9c 89       	ldd	r25, Y+20	; 0x14
    3a0a:	fc 01       	movw	r30, r24
    3a0c:	e4 57       	subi	r30, 0x74	; 116
    3a0e:	fc 4f       	sbci	r31, 0xFC	; 252
    3a10:	80 81       	ld	r24, Z
    3a12:	80 33       	cpi	r24, 0x30	; 48
    3a14:	40 f0       	brcs	.+16     	; 0x3a26 <main+0x24e>
    3a16:	8b 89       	ldd	r24, Y+19	; 0x13
    3a18:	9c 89       	ldd	r25, Y+20	; 0x14
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	e4 57       	subi	r30, 0x74	; 116
    3a1e:	fc 4f       	sbci	r31, 0xFC	; 252
    3a20:	80 81       	ld	r24, Z
    3a22:	8a 33       	cpi	r24, 0x3A	; 58
    3a24:	20 f0       	brcs	.+8      	; 0x3a2e <main+0x256>
					lcd_send_ch(' ');
    3a26:	80 e2       	ldi	r24, 0x20	; 32
    3a28:	0e 94 a6 0b 	call	0x174c	; 0x174c <lcd_send_ch>
    3a2c:	08 c0       	rjmp	.+16     	; 0x3a3e <main+0x266>
				else
					lcd_send_ch(frequency[i]);
    3a2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a30:	9c 89       	ldd	r25, Y+20	; 0x14
    3a32:	fc 01       	movw	r30, r24
    3a34:	e4 57       	subi	r30, 0x74	; 116
    3a36:	fc 4f       	sbci	r31, 0xFC	; 252
    3a38:	80 81       	ld	r24, Z
    3a3a:	0e 94 a6 0b 	call	0x174c	; 0x174c <lcd_send_ch>
			for (int i = 0; i < 12; i++) {
				frequency[i] = ' ';
			}
			Cursor_pos(0, 5);
			itoa(freq, frequency, 10); //frequency conversion
			for (int i = 0; i < 14; i++) {
    3a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a40:	9c 89       	ldd	r25, Y+20	; 0x14
    3a42:	01 96       	adiw	r24, 0x01	; 1
    3a44:	9c 8b       	std	Y+20, r25	; 0x14
    3a46:	8b 8b       	std	Y+19, r24	; 0x13
    3a48:	8b 89       	ldd	r24, Y+19	; 0x13
    3a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a4c:	8e 30       	cpi	r24, 0x0E	; 14
    3a4e:	91 05       	cpc	r25, r1
    3a50:	d4 f2       	brlt	.-76     	; 0x3a06 <main+0x22e>
					lcd_send_ch(' ');
				else
					lcd_send_ch(frequency[i]);
			}

			for (int i = 0; i < 3; i++) {
    3a52:	1a 8a       	std	Y+18, r1	; 0x12
    3a54:	19 8a       	std	Y+17, r1	; 0x11
    3a56:	0c c0       	rjmp	.+24     	; 0x3a70 <main+0x298>
				duty[i] = ' ';
    3a58:	89 89       	ldd	r24, Y+17	; 0x11
    3a5a:	9a 89       	ldd	r25, Y+18	; 0x12
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	e6 56       	subi	r30, 0x66	; 102
    3a60:	fc 4f       	sbci	r31, 0xFC	; 252
    3a62:	80 e2       	ldi	r24, 0x20	; 32
    3a64:	80 83       	st	Z, r24
					lcd_send_ch(' ');
				else
					lcd_send_ch(frequency[i]);
			}

			for (int i = 0; i < 3; i++) {
    3a66:	89 89       	ldd	r24, Y+17	; 0x11
    3a68:	9a 89       	ldd	r25, Y+18	; 0x12
    3a6a:	01 96       	adiw	r24, 0x01	; 1
    3a6c:	9a 8b       	std	Y+18, r25	; 0x12
    3a6e:	89 8b       	std	Y+17, r24	; 0x11
    3a70:	89 89       	ldd	r24, Y+17	; 0x11
    3a72:	9a 89       	ldd	r25, Y+18	; 0x12
    3a74:	83 30       	cpi	r24, 0x03	; 3
    3a76:	91 05       	cpc	r25, r1
    3a78:	7c f3       	brlt	.-34     	; 0x3a58 <main+0x280>
				duty[i] = ' ';
			}
			Cursor_pos(1, 5);
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	65 e0       	ldi	r22, 0x05	; 5
    3a7e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Cursor_pos>
			itoa(duty_cycle, duty, 10); //duty conversion
    3a82:	8f 89       	ldd	r24, Y+23	; 0x17
    3a84:	98 8d       	ldd	r25, Y+24	; 0x18
    3a86:	2a e9       	ldi	r18, 0x9A	; 154
    3a88:	33 e0       	ldi	r19, 0x03	; 3
    3a8a:	b9 01       	movw	r22, r18
    3a8c:	4a e0       	ldi	r20, 0x0A	; 10
    3a8e:	50 e0       	ldi	r21, 0x00	; 0
    3a90:	0e 94 17 07 	call	0xe2e	; 0xe2e <itoa>
			for (int i = 0; i < 3; i++) {
    3a94:	18 8a       	std	Y+16, r1	; 0x10
    3a96:	1f 86       	std	Y+15, r1	; 0x0f
    3a98:	21 c0       	rjmp	.+66     	; 0x3adc <main+0x304>
				if (duty[i] < '0' || duty[i] > '9')
    3a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a9c:	98 89       	ldd	r25, Y+16	; 0x10
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	e6 56       	subi	r30, 0x66	; 102
    3aa2:	fc 4f       	sbci	r31, 0xFC	; 252
    3aa4:	80 81       	ld	r24, Z
    3aa6:	80 33       	cpi	r24, 0x30	; 48
    3aa8:	40 f0       	brcs	.+16     	; 0x3aba <main+0x2e2>
    3aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aac:	98 89       	ldd	r25, Y+16	; 0x10
    3aae:	fc 01       	movw	r30, r24
    3ab0:	e6 56       	subi	r30, 0x66	; 102
    3ab2:	fc 4f       	sbci	r31, 0xFC	; 252
    3ab4:	80 81       	ld	r24, Z
    3ab6:	8a 33       	cpi	r24, 0x3A	; 58
    3ab8:	20 f0       	brcs	.+8      	; 0x3ac2 <main+0x2ea>
					lcd_send_ch(' ');
    3aba:	80 e2       	ldi	r24, 0x20	; 32
    3abc:	0e 94 a6 0b 	call	0x174c	; 0x174c <lcd_send_ch>
    3ac0:	08 c0       	rjmp	.+16     	; 0x3ad2 <main+0x2fa>
				else
					lcd_send_ch(duty[i]);
    3ac2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ac4:	98 89       	ldd	r25, Y+16	; 0x10
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	e6 56       	subi	r30, 0x66	; 102
    3aca:	fc 4f       	sbci	r31, 0xFC	; 252
    3acc:	80 81       	ld	r24, Z
    3ace:	0e 94 a6 0b 	call	0x174c	; 0x174c <lcd_send_ch>
			for (int i = 0; i < 3; i++) {
				duty[i] = ' ';
			}
			Cursor_pos(1, 5);
			itoa(duty_cycle, duty, 10); //duty conversion
			for (int i = 0; i < 3; i++) {
    3ad2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad4:	98 89       	ldd	r25, Y+16	; 0x10
    3ad6:	01 96       	adiw	r24, 0x01	; 1
    3ad8:	98 8b       	std	Y+16, r25	; 0x10
    3ada:	8f 87       	std	Y+15, r24	; 0x0f
    3adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ade:	98 89       	ldd	r25, Y+16	; 0x10
    3ae0:	83 30       	cpi	r24, 0x03	; 3
    3ae2:	91 05       	cpc	r25, r1
    3ae4:	d4 f2       	brlt	.-76     	; 0x3a9a <main+0x2c2>
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	aa e7       	ldi	r26, 0x7A	; 122
    3aec:	b3 e4       	ldi	r27, 0x43	; 67
    3aee:	8b 87       	std	Y+11, r24	; 0x0b
    3af0:	9c 87       	std	Y+12, r25	; 0x0c
    3af2:	ad 87       	std	Y+13, r26	; 0x0d
    3af4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3afe:	20 e0       	ldi	r18, 0x00	; 0
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	4a e7       	ldi	r20, 0x7A	; 122
    3b04:	55 e4       	ldi	r21, 0x45	; 69
    3b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	8f 83       	std	Y+7, r24	; 0x07
    3b10:	98 87       	std	Y+8, r25	; 0x08
    3b12:	a9 87       	std	Y+9, r26	; 0x09
    3b14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b16:	6f 81       	ldd	r22, Y+7	; 0x07
    3b18:	78 85       	ldd	r23, Y+8	; 0x08
    3b1a:	89 85       	ldd	r24, Y+9	; 0x09
    3b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b1e:	20 e0       	ldi	r18, 0x00	; 0
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	40 e8       	ldi	r20, 0x80	; 128
    3b24:	5f e3       	ldi	r21, 0x3F	; 63
    3b26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b2a:	88 23       	and	r24, r24
    3b2c:	2c f4       	brge	.+10     	; 0x3b38 <main+0x360>
		__ticks = 1;
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	9e 83       	std	Y+6, r25	; 0x06
    3b34:	8d 83       	std	Y+5, r24	; 0x05
    3b36:	3f c0       	rjmp	.+126    	; 0x3bb6 <main+0x3de>
	else if (__tmp > 65535)
    3b38:	6f 81       	ldd	r22, Y+7	; 0x07
    3b3a:	78 85       	ldd	r23, Y+8	; 0x08
    3b3c:	89 85       	ldd	r24, Y+9	; 0x09
    3b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	3f ef       	ldi	r19, 0xFF	; 255
    3b44:	4f e7       	ldi	r20, 0x7F	; 127
    3b46:	57 e4       	ldi	r21, 0x47	; 71
    3b48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b4c:	18 16       	cp	r1, r24
    3b4e:	4c f5       	brge	.+82     	; 0x3ba2 <main+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	40 e2       	ldi	r20, 0x20	; 32
    3b5e:	51 e4       	ldi	r21, 0x41	; 65
    3b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	bc 01       	movw	r22, r24
    3b6a:	cd 01       	movw	r24, r26
    3b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b70:	dc 01       	movw	r26, r24
    3b72:	cb 01       	movw	r24, r22
    3b74:	9e 83       	std	Y+6, r25	; 0x06
    3b76:	8d 83       	std	Y+5, r24	; 0x05
    3b78:	0f c0       	rjmp	.+30     	; 0x3b98 <main+0x3c0>
    3b7a:	80 e9       	ldi	r24, 0x90	; 144
    3b7c:	91 e0       	ldi	r25, 0x01	; 1
    3b7e:	9c 83       	std	Y+4, r25	; 0x04
    3b80:	8b 83       	std	Y+3, r24	; 0x03
    3b82:	8b 81       	ldd	r24, Y+3	; 0x03
    3b84:	9c 81       	ldd	r25, Y+4	; 0x04
    3b86:	01 97       	sbiw	r24, 0x01	; 1
    3b88:	f1 f7       	brne	.-4      	; 0x3b86 <main+0x3ae>
    3b8a:	9c 83       	std	Y+4, r25	; 0x04
    3b8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b90:	9e 81       	ldd	r25, Y+6	; 0x06
    3b92:	01 97       	sbiw	r24, 0x01	; 1
    3b94:	9e 83       	std	Y+6, r25	; 0x06
    3b96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b98:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9c:	00 97       	sbiw	r24, 0x00	; 0
    3b9e:	69 f7       	brne	.-38     	; 0x3b7a <main+0x3a2>
    3ba0:	38 ce       	rjmp	.-912    	; 0x3812 <main+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba4:	78 85       	ldd	r23, Y+8	; 0x08
    3ba6:	89 85       	ldd	r24, Y+9	; 0x09
    3ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	9e 83       	std	Y+6, r25	; 0x06
    3bb4:	8d 83       	std	Y+5, r24	; 0x05
    3bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bba:	9a 83       	std	Y+2, r25	; 0x02
    3bbc:	89 83       	std	Y+1, r24	; 0x01
    3bbe:	89 81       	ldd	r24, Y+1	; 0x01
    3bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	f1 f7       	brne	.-4      	; 0x3bc2 <main+0x3ea>
    3bc6:	9a 83       	std	Y+2, r25	; 0x02
    3bc8:	89 83       	std	Y+1, r24	; 0x01
    3bca:	23 ce       	rjmp	.-954    	; 0x3812 <main+0x3a>

00003bcc <__divmodsi4>:
    3bcc:	97 fb       	bst	r25, 7
    3bce:	09 2e       	mov	r0, r25
    3bd0:	05 26       	eor	r0, r21
    3bd2:	0e d0       	rcall	.+28     	; 0x3bf0 <__divmodsi4_neg1>
    3bd4:	57 fd       	sbrc	r21, 7
    3bd6:	04 d0       	rcall	.+8      	; 0x3be0 <__divmodsi4_neg2>
    3bd8:	14 d0       	rcall	.+40     	; 0x3c02 <__udivmodsi4>
    3bda:	0a d0       	rcall	.+20     	; 0x3bf0 <__divmodsi4_neg1>
    3bdc:	00 1c       	adc	r0, r0
    3bde:	38 f4       	brcc	.+14     	; 0x3bee <__divmodsi4_exit>

00003be0 <__divmodsi4_neg2>:
    3be0:	50 95       	com	r21
    3be2:	40 95       	com	r20
    3be4:	30 95       	com	r19
    3be6:	21 95       	neg	r18
    3be8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bea:	4f 4f       	sbci	r20, 0xFF	; 255
    3bec:	5f 4f       	sbci	r21, 0xFF	; 255

00003bee <__divmodsi4_exit>:
    3bee:	08 95       	ret

00003bf0 <__divmodsi4_neg1>:
    3bf0:	f6 f7       	brtc	.-4      	; 0x3bee <__divmodsi4_exit>
    3bf2:	90 95       	com	r25
    3bf4:	80 95       	com	r24
    3bf6:	70 95       	com	r23
    3bf8:	61 95       	neg	r22
    3bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    3c00:	08 95       	ret

00003c02 <__udivmodsi4>:
    3c02:	a1 e2       	ldi	r26, 0x21	; 33
    3c04:	1a 2e       	mov	r1, r26
    3c06:	aa 1b       	sub	r26, r26
    3c08:	bb 1b       	sub	r27, r27
    3c0a:	fd 01       	movw	r30, r26
    3c0c:	0d c0       	rjmp	.+26     	; 0x3c28 <__udivmodsi4_ep>

00003c0e <__udivmodsi4_loop>:
    3c0e:	aa 1f       	adc	r26, r26
    3c10:	bb 1f       	adc	r27, r27
    3c12:	ee 1f       	adc	r30, r30
    3c14:	ff 1f       	adc	r31, r31
    3c16:	a2 17       	cp	r26, r18
    3c18:	b3 07       	cpc	r27, r19
    3c1a:	e4 07       	cpc	r30, r20
    3c1c:	f5 07       	cpc	r31, r21
    3c1e:	20 f0       	brcs	.+8      	; 0x3c28 <__udivmodsi4_ep>
    3c20:	a2 1b       	sub	r26, r18
    3c22:	b3 0b       	sbc	r27, r19
    3c24:	e4 0b       	sbc	r30, r20
    3c26:	f5 0b       	sbc	r31, r21

00003c28 <__udivmodsi4_ep>:
    3c28:	66 1f       	adc	r22, r22
    3c2a:	77 1f       	adc	r23, r23
    3c2c:	88 1f       	adc	r24, r24
    3c2e:	99 1f       	adc	r25, r25
    3c30:	1a 94       	dec	r1
    3c32:	69 f7       	brne	.-38     	; 0x3c0e <__udivmodsi4_loop>
    3c34:	60 95       	com	r22
    3c36:	70 95       	com	r23
    3c38:	80 95       	com	r24
    3c3a:	90 95       	com	r25
    3c3c:	9b 01       	movw	r18, r22
    3c3e:	ac 01       	movw	r20, r24
    3c40:	bd 01       	movw	r22, r26
    3c42:	cf 01       	movw	r24, r30
    3c44:	08 95       	ret

00003c46 <__prologue_saves__>:
    3c46:	2f 92       	push	r2
    3c48:	3f 92       	push	r3
    3c4a:	4f 92       	push	r4
    3c4c:	5f 92       	push	r5
    3c4e:	6f 92       	push	r6
    3c50:	7f 92       	push	r7
    3c52:	8f 92       	push	r8
    3c54:	9f 92       	push	r9
    3c56:	af 92       	push	r10
    3c58:	bf 92       	push	r11
    3c5a:	cf 92       	push	r12
    3c5c:	df 92       	push	r13
    3c5e:	ef 92       	push	r14
    3c60:	ff 92       	push	r15
    3c62:	0f 93       	push	r16
    3c64:	1f 93       	push	r17
    3c66:	cf 93       	push	r28
    3c68:	df 93       	push	r29
    3c6a:	cd b7       	in	r28, 0x3d	; 61
    3c6c:	de b7       	in	r29, 0x3e	; 62
    3c6e:	ca 1b       	sub	r28, r26
    3c70:	db 0b       	sbc	r29, r27
    3c72:	0f b6       	in	r0, 0x3f	; 63
    3c74:	f8 94       	cli
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	cd bf       	out	0x3d, r28	; 61
    3c7c:	09 94       	ijmp

00003c7e <__epilogue_restores__>:
    3c7e:	2a 88       	ldd	r2, Y+18	; 0x12
    3c80:	39 88       	ldd	r3, Y+17	; 0x11
    3c82:	48 88       	ldd	r4, Y+16	; 0x10
    3c84:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c86:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c88:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c90:	b9 84       	ldd	r11, Y+9	; 0x09
    3c92:	c8 84       	ldd	r12, Y+8	; 0x08
    3c94:	df 80       	ldd	r13, Y+7	; 0x07
    3c96:	ee 80       	ldd	r14, Y+6	; 0x06
    3c98:	fd 80       	ldd	r15, Y+5	; 0x05
    3c9a:	0c 81       	ldd	r16, Y+4	; 0x04
    3c9c:	1b 81       	ldd	r17, Y+3	; 0x03
    3c9e:	aa 81       	ldd	r26, Y+2	; 0x02
    3ca0:	b9 81       	ldd	r27, Y+1	; 0x01
    3ca2:	ce 0f       	add	r28, r30
    3ca4:	d1 1d       	adc	r29, r1
    3ca6:	0f b6       	in	r0, 0x3f	; 63
    3ca8:	f8 94       	cli
    3caa:	de bf       	out	0x3e, r29	; 62
    3cac:	0f be       	out	0x3f, r0	; 63
    3cae:	cd bf       	out	0x3d, r28	; 61
    3cb0:	ed 01       	movw	r28, r26
    3cb2:	08 95       	ret

00003cb4 <__udivmodhi4>:
    3cb4:	aa 1b       	sub	r26, r26
    3cb6:	bb 1b       	sub	r27, r27
    3cb8:	51 e1       	ldi	r21, 0x11	; 17
    3cba:	07 c0       	rjmp	.+14     	; 0x3cca <__udivmodhi4_ep>

00003cbc <__udivmodhi4_loop>:
    3cbc:	aa 1f       	adc	r26, r26
    3cbe:	bb 1f       	adc	r27, r27
    3cc0:	a6 17       	cp	r26, r22
    3cc2:	b7 07       	cpc	r27, r23
    3cc4:	10 f0       	brcs	.+4      	; 0x3cca <__udivmodhi4_ep>
    3cc6:	a6 1b       	sub	r26, r22
    3cc8:	b7 0b       	sbc	r27, r23

00003cca <__udivmodhi4_ep>:
    3cca:	88 1f       	adc	r24, r24
    3ccc:	99 1f       	adc	r25, r25
    3cce:	5a 95       	dec	r21
    3cd0:	a9 f7       	brne	.-22     	; 0x3cbc <__udivmodhi4_loop>
    3cd2:	80 95       	com	r24
    3cd4:	90 95       	com	r25
    3cd6:	bc 01       	movw	r22, r24
    3cd8:	cd 01       	movw	r24, r26
    3cda:	08 95       	ret

00003cdc <_exit>:
    3cdc:	f8 94       	cli

00003cde <__stop_program>:
    3cde:	ff cf       	rjmp	.-2      	; 0x3cde <__stop_program>
